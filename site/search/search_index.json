{"config":{"lang":["en","es"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why LearnNostr?","text":"<ul> <li> <p> True Digital Identity</p> <p>Own your identity with cryptographic keys. No central authority can delete your account, censor your content, or control your digital presence.</p> <p> Learn About Keys</p> </li> <li> <p> Censorship Resistant</p> <p>Built on a decentralized network of relays that no single entity controls. Your voice can't be silenced by corporations or governments.</p> <p> Getting Started</p> </li> <li> <p> Lightning Integration</p> <p>Seamless Bitcoin payments through Lightning Network integration. Send and receive value instantly across the protocol.</p> <p> Build Applications</p> </li> </ul> <p> Start Here: Protocol Fundamentals</p> <p>New to Nostr? Begin with the basics. Learn what makes Nostr different from traditional social platforms and understand the core concepts that power this decentralized protocol.</p> <p>What you'll learn:</p> <p>\u2022 Protocol architecture and design principles \u2022 Decentralization vs. centralized platforms \u2022 Basic terminology and concepts</p> <p> Start Learning</p> <p> Master: Identity &amp; Security</p> <p>Essential Skills. Dive deep into cryptographic keys, digital signatures, and identity management. These concepts are fundamental to everything you'll build on Nostr.</p> <p>What you'll learn:</p> <p>\u2022 Public/private key cryptography \u2022 Digital identity and signatures \u2022 Security best practices</p> <p> Master Keys</p> <p> Build: Your First Application</p> <p>Hands-on Development. Put theory into practice by building real Nostr applications. Learn to connect to relays, publish events, and create interactive experiences.</p> <p>What you'll build:</p> <p>\u2022 Simple Nostr client \u2022 Event publishing system \u2022 Relay communication</p> <p> Start Building</p> <p> Reference: Complete Definitions</p> <p>Deep Dive Resources. Access comprehensive definitions and explanations of all Nostr concepts, protocols, and technical specifications in one organized location.</p> <p>What you'll find:</p> <p>\u2022 Technical definitions and explanations \u2022 Protocol specifications (NIPs) \u2022 Development tools and libraries</p> <p> Browse Definitions</p>"},{"location":"#learning-path","title":"\ud83c\udfaf Learning Path","text":"<p>Master Nostr in 4 Progressive Steps \u2014 From understanding the basics to building your own applications, this guided learning path will take you from beginner to developer.</p>"},{"location":"#code-example","title":"Code Example","text":"<p>Here's how to publish your first event to the Nostr network:</p> JavaScriptPythonRust <pre><code>import { generatePrivateKey, getPublicKey, finishEvent, relayInit } from 'nostr-tools'\n\n// Generate your identity\nconst sk = generatePrivateKey()\nconst pk = getPublicKey(sk)\n\n// Create an event\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: 'Hello Nostr!',\n}, sk)\n\n// Publish to relay\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\nawait relay.publish(event)\n</code></pre> <pre><code>from nostr.key import PrivateKey\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\nimport time\n\n# Generate identity\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\n\n# Create event\nevent = Event(\n    kind=1,\n    content=\"Hello Nostr!\",\n    created_at=int(time.time())\n)\nprivate_key.sign_event(event)\n\n# Publish event\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.publish_event(event)\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    // Generate keys\n    let keys = Keys::generate();\n\n    // Connect to relay\n    let client = Client::new(&amp;keys);\n    client.add_relay(\"wss://relay.damus.io\", None).await?;\n    client.connect().await;\n\n    // Publish event\n    let event = EventBuilder::new_text_note(\"Hello Nostr!\", &amp;[])\n        .to_event(&amp;keys)?;\n\n    client.send_event(event).await?;\n    Ok(())\n}\n</code></pre>"},{"location":"definitions/","title":"Nostr Definitions: Complete Reference Guide","text":"<p>This comprehensive guide defines all essential Nostr concepts, protocols, and components in one place.</p>"},{"location":"definitions/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Protocol Fundamentals</li> <li>Keys and Identity</li> <li>Events and Messages</li> <li>Relays and Network</li> <li>Clients and Applications</li> <li>NIPs (Nostr Implementation Possibilities)</li> <li>Zaps and Lightning Integration</li> <li>Security and Privacy</li> <li>Development and Technical</li> </ul>"},{"location":"definitions/#protocol-fundamentals","title":"Protocol Fundamentals","text":""},{"location":"definitions/#nostr","title":"Nostr","text":"<p>\"Notes and Other Stuff Transmitted by Relays\" - A simple, open protocol for decentralized social networking and communication.</p>"},{"location":"definitions/#core-principles","title":"Core Principles","text":"<ul> <li>Decentralized: No central authority or single point of failure</li> <li>Censorship-resistant: Content cannot be universally censored</li> <li>Interoperable: All clients can communicate with each other</li> <li>User-owned: Users control their identity and data</li> <li>Simple: Easy to implement and understand</li> </ul>"},{"location":"definitions/#protocol-overview","title":"Protocol Overview","text":"<pre><code>graph TB\n    A[User with Keys] --&gt; B[Nostr Client]\n    B --&gt; C[Sign Events]\n    C --&gt; D[Send to Relays]\n    D --&gt; E[Other Users' Clients]\n    E --&gt; F[Verify Signatures]</code></pre>"},{"location":"definitions/#keys-and-identity","title":"Keys and Identity","text":""},{"location":"definitions/#private-key","title":"Private Key","text":"<p>Your secret cryptographic key that: - Controls your entire Nostr identity - Signs all your events and messages - Cannot be recovered if lost - Must be kept absolutely secure</p> <p>Format Examples: <pre><code>Hex: 5c0c523f52a5b6fad39ed2403092df8cebc36318b39383bca6c00808626fab3a\nnsec: nsec1ts8y20636km0450n6fqrxyktmrhtcd0cvwucnw6xvqygsp6wlv62q4ew66q\n</code></pre></p>"},{"location":"definitions/#public-key","title":"Public Key","text":"<p>Your public identity on Nostr: - Derived mathematically from your private key - Serves as your unique identifier - Can be shared freely - Used by others to verify your signatures</p> <p>Format Examples: <pre><code>Hex: 48d54b934bb2767a2980a4e6b2ee5ff86e3a4102b1e3f71c95e66bb06a1e7ff6\nnpub: npub1frw5hw6tkfm85t2qpfnty0hllrhkx5gzk83lw8y4uehmq6s70lmqqrr9nv\n</code></pre></p>"},{"location":"definitions/#key-security-best-practices","title":"Key Security Best Practices","text":"<ul> <li>Never share your private key</li> <li>Use hardware wallets when possible</li> <li>Keep multiple secure backups</li> <li>Use different keys for different purposes</li> <li>Consider key rotation strategies</li> </ul>"},{"location":"definitions/#events-and-messages","title":"Events and Messages","text":""},{"location":"definitions/#event-structure","title":"Event Structure","text":"<p>All Nostr data is transmitted as events with this structure:</p> <pre><code>{\n  \"id\": \"event-id-hash\",\n  \"pubkey\": \"author-public-key\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Event content\",\n  \"sig\": \"cryptographic-signature\"\n}\n</code></pre>"},{"location":"definitions/#event-kinds-common-types","title":"Event Kinds (Common Types)","text":""},{"location":"definitions/#basic-events","title":"Basic Events","text":"<ul> <li>Kind 0: User Metadata (profile information)</li> <li>Kind 1: Text Note (like a tweet)</li> <li>Kind 2: Recommend Relay</li> <li>Kind 3: Contact List (following list)</li> <li>Kind 4: Encrypted Direct Message</li> <li>Kind 5: Event Deletion Request</li> <li>Kind 6: Repost</li> <li>Kind 7: Reaction (like/dislike)</li> </ul>"},{"location":"definitions/#advanced-events","title":"Advanced Events","text":"<ul> <li>Kind 9735: Zap Receipt</li> <li>Kind 30023: Long-form Article</li> <li>Kind 40: Channel Creation</li> <li>Kind 41: Channel Metadata</li> <li>Kind 42: Channel Message</li> </ul>"},{"location":"definitions/#tags","title":"Tags","text":"<p>Metadata attached to events for: - Mentioning users (<code>[\"p\", \"pubkey\"]</code>) - Referencing events (<code>[\"e\", \"event-id\"]</code>) - Adding hashtags (<code>[\"t\", \"hashtag\"]</code>) - Specifying relays (<code>[\"r\", \"relay-url\"]</code>)</p>"},{"location":"definitions/#relays-and-network","title":"Relays and Network","text":""},{"location":"definitions/#relay","title":"Relay","text":"<p>A server that: - Accepts events from clients - Stores events (temporarily or permanently) - Forwards events to subscribers - Implements filtering and policies - Communicates via WebSocket</p>"},{"location":"definitions/#how-relays-work","title":"How Relays Work","text":"<pre><code>sequenceDiagram\n    participant C1 as Client 1\n    participant R as Relay\n    participant C2 as Client 2\n\n    C1-&gt;&gt;R: Connect (WebSocket)\n    C2-&gt;&gt;R: Connect (WebSocket)\n    C1-&gt;&gt;R: Publish Event\n    R-&gt;&gt;R: Store Event\n    C2-&gt;&gt;R: Subscribe to Events\n    R-&gt;&gt;C2: Send Matching Events</code></pre>"},{"location":"definitions/#relay-types","title":"Relay Types","text":"<ul> <li>Public Relays: Open to all users</li> <li>Private Relays: Restricted access</li> <li>Paid Relays: Require payment for service</li> <li>Specialized Relays: Focus on specific content types</li> </ul>"},{"location":"definitions/#popular-relays","title":"Popular Relays","text":"<ul> <li><code>wss://relay.damus.io</code></li> <li><code>wss://nos.lol</code></li> <li><code>wss://relay.snort.social</code></li> <li><code>wss://nostr.wine</code></li> </ul>"},{"location":"definitions/#clients-and-applications","title":"Clients and Applications","text":""},{"location":"definitions/#nostr-client","title":"Nostr Client","text":"<p>An application that allows users to interact with the Nostr network by: - Managing cryptographic keys - Creating and signing events - Connecting to relays - Displaying content - Handling user interactions</p>"},{"location":"definitions/#client-types","title":"Client Types","text":""},{"location":"definitions/#web-clients","title":"Web Clients","text":"<ul> <li>Iris: Feature-rich web interface</li> <li>Snort: Fast, modern design</li> <li>Coracle: Privacy-focused</li> <li>Nostrudel: Developer-oriented</li> </ul>"},{"location":"definitions/#mobile-clients","title":"Mobile Clients","text":"<ul> <li>Damus (iOS): Native iOS experience</li> <li>Amethyst (Android): Feature-complete Android app</li> <li>Primal (iOS/Android): Algorithm-driven feeds</li> </ul>"},{"location":"definitions/#desktop-clients","title":"Desktop Clients","text":"<ul> <li>Gossip: Desktop client with advanced relay management</li> <li>More!: Cross-platform Tauri-based client</li> </ul>"},{"location":"definitions/#client-features","title":"Client Features","text":"<ul> <li>Timeline management</li> <li>Direct messaging</li> <li>Profile management</li> <li>Relay configuration</li> <li>Lightning integration</li> <li>Content filtering</li> </ul>"},{"location":"definitions/#nips-nostr-implementation-possibilities","title":"NIPs (Nostr Implementation Possibilities)","text":""},{"location":"definitions/#what-are-nips","title":"What are NIPs?","text":"<p>Technical specifications that define: - Protocol features and extensions - Event formats and structures - Client and relay behaviors - Cryptographic standards</p>"},{"location":"definitions/#essential-nips","title":"Essential NIPs","text":""},{"location":"definitions/#nip-01-basic-protocol-flow","title":"NIP-01: Basic Protocol Flow","text":"<p>The foundation - defines events, signatures, and communication.</p>"},{"location":"definitions/#nip-02-contact-list-and-petnames","title":"NIP-02: Contact List and Petnames","text":"<p>Following lists and user labeling.</p>"},{"location":"definitions/#nip-04-encrypted-direct-messages","title":"NIP-04: Encrypted Direct Messages","text":"<p>Private messaging between users.</p>"},{"location":"definitions/#nip-05-mapping-nostr-keys-to-dns","title":"NIP-05: Mapping Nostr Keys to DNS","text":"<p>Human-readable identifiers (name@domain.com).</p>"},{"location":"definitions/#nip-07-browser-extension-for-signing","title":"NIP-07: Browser Extension for Signing","text":"<p>Secure key management in browsers.</p>"},{"location":"definitions/#nip-09-event-deletion","title":"NIP-09: Event Deletion","text":"<p>Requesting deletion of previously published events.</p>"},{"location":"definitions/#nip-10-text-note-references","title":"NIP-10: Text Note References","text":"<p>Proper threading and reply structures.</p>"},{"location":"definitions/#nip-11-relay-information-document","title":"NIP-11: Relay Information Document","text":"<p>Relay capabilities and policies.</p>"},{"location":"definitions/#nip-57-lightning-zaps","title":"NIP-57: Lightning Zaps","text":"<p>Bitcoin micropayments integrated with Nostr.</p>"},{"location":"definitions/#nip-categories","title":"NIP Categories","text":"<ul> <li>Core: Essential for basic functionality</li> <li>Optional: Additional features</li> <li>Informational: Best practices and guidelines</li> <li>Experimental: Testing new ideas</li> </ul>"},{"location":"definitions/#zaps-and-lightning-integration","title":"Zaps and Lightning Integration","text":""},{"location":"definitions/#zap","title":"Zap","text":"<p>Instant Bitcoin payments over Lightning Network cryptographically tied to Nostr events.</p>"},{"location":"definitions/#key-features","title":"Key Features","text":"<ul> <li>\u26a1 Instant settlement (milliseconds)</li> <li>\ud83d\udd12 Cryptographically verified</li> <li>\ud83d\udcb0 Micro-payments (1+ satoshi)</li> <li>\ud83c\udf0d Global and permissionless</li> </ul>"},{"location":"definitions/#how-zaps-work-nip-57","title":"How Zaps Work (NIP-57)","text":"<pre><code>sequenceDiagram\n    participant User as You\n    participant Client as Nostr Client\n    participant Wallet as Lightning Wallet\n    participant LNURL as Recipient LNURL\n    participant Relay as Nostr Relay\n\n    User-&gt;&gt;Client: Click Zap\n    Client-&gt;&gt;LNURL: Request zap endpoint\n    LNURL--&gt;&gt;Client: Return payment template\n    Client-&gt;&gt;Wallet: Generate invoice\n    Wallet--&gt;&gt;Client: Lightning invoice\n    Client-&gt;&gt;LNURL: Send payment + event\n    LNURL-&gt;&gt;Relay: Publish zap receipt\n    Relay--&gt;&gt;Client: Show confirmation</code></pre>"},{"location":"definitions/#zap-types","title":"Zap Types","text":"<ul> <li>Public Zaps: Visible to everyone</li> <li>Private Zaps: Only sender and recipient know</li> <li>Anonymous Zaps: No sender identification</li> </ul>"},{"location":"definitions/#lnurl","title":"LNURL","text":"<p>Lightning Network URL - enables seamless Lightning payments through simple URLs.</p>"},{"location":"definitions/#security-and-privacy","title":"Security and Privacy","text":""},{"location":"definitions/#cryptographic-security","title":"Cryptographic Security","text":"<ul> <li>ECDSA: Elliptic Curve Digital Signature Algorithm</li> <li>secp256k1: Same curve used by Bitcoin</li> <li>SHA-256: Hashing algorithm for event IDs</li> </ul>"},{"location":"definitions/#privacy-considerations","title":"Privacy Considerations","text":"<ul> <li>Public by Default: Most content is publicly visible</li> <li>Metadata Leakage: Timing and relay data can reveal information</li> <li>IP Privacy: Use Tor for enhanced anonymity</li> <li>Key Rotation: Regular key changes for enhanced security</li> </ul>"},{"location":"definitions/#best-practices","title":"Best Practices","text":"<ul> <li>Use reputable clients</li> <li>Verify software integrity</li> <li>Keep keys secure</li> <li>Understand data permanence</li> <li>Use multiple relays</li> </ul>"},{"location":"definitions/#development-and-technical","title":"Development and Technical","text":""},{"location":"definitions/#event-id-calculation","title":"Event ID Calculation","text":"<pre><code>function getEventId(event) {\n  const serialized = JSON.stringify([\n    0,\n    event.pubkey,\n    event.created_at,\n    event.kind,\n    event.tags,\n    event.content\n  ])\n  return sha256(utf8Encoder.encode(serialized))\n}\n</code></pre>"},{"location":"definitions/#signature-verification","title":"Signature Verification","text":"<p>Events are signed using the private key and verified using the public key to ensure authenticity.</p>"},{"location":"definitions/#websocket-communication","title":"WebSocket Communication","text":"<pre><code>// Connect to relay\nconst relay = new WebSocket('wss://relay.example.com')\n\n// Subscribe to events\nrelay.send(JSON.stringify(['REQ', subscriptionId, filter]))\n\n// Publish event\nrelay.send(JSON.stringify(['EVENT', signedEvent]))\n</code></pre>"},{"location":"definitions/#filters","title":"Filters","text":"<p>Query relays for specific events: <pre><code>{\n  \"ids\": [\"event-id\"],\n  \"authors\": [\"pubkey\"],\n  \"kinds\": [1],\n  \"since\": 1234567890,\n  \"until\": 1234567890,\n  \"limit\": 100\n}\n</code></pre></p>"},{"location":"definitions/#glossary-quick-reference","title":"Glossary Quick Reference","text":"Term Definition Nostr Notes and Other Stuff Transmitted by Relays NIP Nostr Implementation Possibility npub Public key in bech32 format nsec Private key in bech32 format Relay Server that stores and forwards Nostr events Event Basic unit of data in Nostr Kind Event type identifier Zap Lightning payment tied to a Nostr event LNURL Lightning Network URL protocol Tag Metadata attached to events Filter Query parameters for relay subscriptions <p>This definitions guide is a living document. As Nostr evolves, new concepts and refinements will be added. </p>"},{"location":"support/","title":"Support LearnNostr","text":"<p>Help Keep This Resource Free</p> <p>LearnNostr is a community-driven educational platform. Your support helps us maintain and expand this comprehensive Nostr learning resource for everyone.</p>"},{"location":"support/#donate-to-learnnostr-via-bitcoin-lightning","title":"\u26a1 Donate to LearnNostr via Bitcoin Lightning:","text":"<pre><code>greenmiracle695447@getalby.com\n</code></pre> <p>Copy and paste the address above into your Lightning wallet to support this project!</p>"},{"location":"concepts/clients/","title":"Understanding Nostr Clients","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What Nostr clients are and their role in the ecosystem</li> <li>Different types of clients and their features</li> <li>How clients interact with relays and manage keys</li> <li>Popular client options and how to choose one</li> </ul>"},{"location":"concepts/clients/#what-is-a-nostr-client","title":"What is a Nostr Client?","text":"<p>A Nostr client is an application that allows users to interact with the Nostr network. Think of it as your window into the decentralized social web - it's how you create posts, read content, manage your identity, and connect with others.</p> <p>Unlike traditional social media where you're locked into one app (like Twitter or Facebook), Nostr clients are interoperable. You can switch between different clients while keeping the same identity and data.</p>"},{"location":"concepts/clients/#core-functions-of-clients","title":"Core Functions of Clients","text":""},{"location":"concepts/clients/#1-key-management","title":"1. Key Management","text":"<ul> <li>Generate new cryptographic key pairs</li> <li>Store private keys securely (or integrate with external key managers)</li> <li>Sign events with your private key</li> <li>Verify signatures from other users</li> </ul>"},{"location":"concepts/clients/#2-event-creation","title":"2. Event Creation","text":"<ul> <li>Compose different types of content (text notes, reactions, reposts)</li> <li>Format content with proper metadata and tags</li> <li>Sign events cryptographically</li> <li>Publish to selected relays</li> </ul>"},{"location":"concepts/clients/#3-relay-communication","title":"3. Relay Communication","text":"<ul> <li>Connect to multiple relays simultaneously</li> <li>Subscribe to event feeds and filters</li> <li>Fetch historical events and user profiles</li> <li>Manage relay lists and preferences</li> </ul>"},{"location":"concepts/clients/#4-content-display","title":"4. Content Display","text":"<ul> <li>Parse and display events in user-friendly formats</li> <li>Handle different event types (notes, reactions, profiles)</li> <li>Organize content (timelines, threads, notifications)</li> <li>Filter content based on user preferences</li> </ul>"},{"location":"concepts/clients/#types-of-nostr-clients","title":"Types of Nostr Clients","text":""},{"location":"concepts/clients/#web-clients","title":"Web Clients","text":"<p>Browser-based applications that run in your web browser.</p> <p>Examples: - Iris - Feature-rich web client with social features - Snort - Fast, modern web interface - Nostrgram - Instagram-like photo sharing - Coracle - Minimalist, privacy-focused client</p> <p>Pros: - \u2705 No installation required - \u2705 Cross-platform compatibility - \u2705 Easy to try different clients</p> <p>Cons: - \u274c Limited key storage options - \u274c Dependent on browser security - \u274c May have performance limitations</p>"},{"location":"concepts/clients/#mobile-apps","title":"Mobile Apps","text":"<p>Native applications for smartphones and tablets.</p> <p>Examples: - Damus (iOS) - Popular, user-friendly iOS client - Amethyst (Android) - Feature-rich Android client - Nostros (Android) - Open-source Android client - Plebstr (iOS/Android) - Simple, beginner-friendly</p> <p>Pros: - \u2705 Native performance and UX - \u2705 Push notifications - \u2705 Better key storage options - \u2705 Offline capabilities</p> <p>Cons: - \u274c Platform-specific - \u274c App store restrictions - \u274c Installation required</p>"},{"location":"concepts/clients/#desktop-applications","title":"Desktop Applications","text":"<p>Native applications for computers.</p> <p>Examples: - Gossip - Rust-based desktop client - More TBD - Desktop client ecosystem is growing</p> <p>Pros: - \u2705 Full-featured experience - \u2705 Better key management - \u2705 Advanced power-user features - \u2705 No browser limitations</p> <p>Cons: - \u274c Platform-specific builds - \u274c Larger download/install - \u274c Less portable</p>"},{"location":"concepts/clients/#specialized-clients","title":"Specialized Clients","text":"<p>Purpose-built for specific use cases.</p> <p>Examples: - Habla - Long-form content publishing - Zap.stream - Live streaming - Nostrudel - Advanced power-user features - Satellite - Minimalist text-only</p>"},{"location":"concepts/clients/#how-clients-work","title":"How Clients Work","text":"<pre><code>graph TB\n    U[User] --&gt;|interacts with| C[Client]\n    C --&gt;|manages| K[Private Keys]\n    C --&gt;|creates &amp; signs| E[Events]\n    C --&gt;|connects to| R1[Relay 1]\n    C --&gt;|connects to| R2[Relay 2]\n    C --&gt;|connects to| R3[Relay 3]\n\n    R1 --&gt;|delivers events| C\n    R2 --&gt;|delivers events| C\n    R3 --&gt;|delivers events| C\n\n    C --&gt;|displays| F[Feed/Timeline]\n    F --&gt;|shown to| U</code></pre>"},{"location":"concepts/clients/#the-client-workflow","title":"The Client Workflow","text":"<ol> <li>User Action: You want to post a note or read your timeline</li> <li>Event Creation: Client creates a properly formatted event</li> <li>Signing: Client signs the event with your private key</li> <li>Publishing: Client sends the event to your selected relays</li> <li>Fetching: Client requests events from relays for your timeline</li> <li>Display: Client formats and shows the content to you</li> </ol>"},{"location":"concepts/clients/#key-features-to-look-for","title":"Key Features to Look For","text":""},{"location":"concepts/clients/#essential-features","title":"Essential Features","text":"<ul> <li>Key Management: Secure storage and handling of private keys</li> <li>Multi-relay Support: Connect to multiple relays simultaneously</li> <li>Basic Event Types: Support for text notes, reactions, reposts</li> <li>User Profiles: View and edit profile information</li> <li>Timeline/Feed: Chronological display of events</li> </ul>"},{"location":"concepts/clients/#advanced-features","title":"Advanced Features","text":"<ul> <li>Thread Support: Proper display of conversation threads</li> <li>Media Support: Images, videos, and file attachments</li> <li>Lightning Integration: Zaps (Bitcoin Lightning payments)</li> <li>Advanced Filtering: Content filtering and moderation tools</li> <li>Backup/Export: Export your data and settings</li> </ul>"},{"location":"concepts/clients/#power-user-features","title":"Power User Features","text":"<ul> <li>Custom Relay Management: Advanced relay configuration</li> <li>Event Debugging: Raw event inspection and debugging</li> <li>Custom Event Types: Support for experimental NIPs</li> <li>API Access: Integration with external tools</li> <li>Plugin System: Extensibility through plugins</li> </ul>"},{"location":"concepts/clients/#choosing-the-right-client","title":"Choosing the Right Client","text":""},{"location":"concepts/clients/#for-beginners","title":"For Beginners","text":"<p>Recommended: Damus (iOS), Amethyst (Android), Iris (Web)</p> <ul> <li>Simple, intuitive interface</li> <li>Good onboarding experience</li> <li>Built-in key generation</li> <li>Reasonable default settings</li> </ul>"},{"location":"concepts/clients/#for-privacy-conscious-users","title":"For Privacy-Conscious Users","text":"<p>Recommended: Gossip (Desktop), Coracle (Web)</p> <ul> <li>Enhanced privacy features</li> <li>Local key storage</li> <li>Minimal data collection</li> <li>Tor support (some clients)</li> </ul>"},{"location":"concepts/clients/#for-power-users","title":"For Power Users","text":"<p>Recommended: Nostrudel (Web), Gossip (Desktop)</p> <ul> <li>Advanced configuration options</li> <li>Raw event inspection</li> <li>Custom relay management</li> <li>Experimental feature support</li> </ul>"},{"location":"concepts/clients/#for-content-creators","title":"For Content Creators","text":"<p>Recommended: Habla (Long-form), Nostrgram (Photos)</p> <ul> <li>Specialized content creation tools</li> <li>Rich media support</li> <li>Publishing workflows</li> <li>Audience engagement features</li> </ul>"},{"location":"concepts/clients/#client-interoperability","title":"Client Interoperability","text":"<p>One of Nostr's key advantages is client interoperability:</p> <p>Real-World Example</p> <p>Morning: Use Damus on your phone to check notifications</p> <p>Afternoon: Switch to Iris on your work computer to post updates</p> <p>Evening: Use Habla to write a long-form article</p> <p>Result: All your content appears seamlessly across all clients because they all use the same underlying protocol and relays.</p>"},{"location":"concepts/clients/#security-considerations","title":"Security Considerations","text":""},{"location":"concepts/clients/#key-storage","title":"Key Storage","text":"<ul> <li>Browser Storage: Convenient but less secure</li> <li>Mobile Keychain: Better security on mobile devices</li> <li>Hardware Wallets: Maximum security for valuable accounts</li> <li>External Signers: Dedicated key management apps</li> </ul>"},{"location":"concepts/clients/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Use reputable, open-source clients</li> <li>\u2705 Verify client authenticity before downloading</li> <li>\u2705 Keep your private key backed up securely</li> <li>\u2705 Use different clients to avoid vendor lock-in</li> <li>\u274c Never share your private key</li> <li>\u274c Don't use untrusted or closed-source clients</li> </ul>"},{"location":"concepts/clients/#the-future-of-clients","title":"The Future of Clients","text":"<p>The Nostr client ecosystem is rapidly evolving:</p> <ul> <li>Specialized Clients: Purpose-built for specific use cases</li> <li>AI Integration: Smart content curation and assistance</li> <li>Enhanced Privacy: Better anonymity and privacy features</li> <li>Cross-Platform: Seamless experience across all devices</li> <li>Plugin Ecosystems: Extensible, customizable clients</li> </ul>"},{"location":"concepts/clients/#next-steps","title":"Next Steps","text":"<p>Now that you understand clients, explore how they interact with relays and the broader Nostr ecosystem.</p>      Understanding Relays \u2192"},{"location":"concepts/clients/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What are the core functions of a Nostr client?</li> <li>Why can you switch between different Nostr clients freely?</li> <li>What's the difference between web clients and mobile apps?</li> <li>What should you consider when choosing a client for privacy?</li> </ol> Answers <ol> <li>Key management, event creation, relay communication, and content display</li> <li>Because all clients use the same open protocol and can access the same relays</li> <li>Web clients run in browsers (cross-platform, no install) while mobile apps are native (better performance, platform-specific)</li> <li>Local key storage, minimal data collection, open-source code, and privacy-focused features </li> </ol>"},{"location":"concepts/events-and-messages/","title":"Events and Messages in Nostr","text":"<p>Learning Objectives</p> <p>After this lesson, you'll understand:</p> <ul> <li>How everything in Nostr is structured as events</li> <li>Different types of events and their purposes</li> <li>Event structure and required fields</li> <li>How events are signed and verified</li> <li>Common event kinds and their use cases</li> </ul>"},{"location":"concepts/events-and-messages/#understanding-events","title":"Understanding Events","text":"<p>In Nostr, everything is an event. Whether you're posting a text note, updating your profile, reacting to a post, or sending a direct message - it's all structured as events.</p> <p>This unified approach provides several benefits:</p> <ul> <li>Consistency: All data follows the same structure</li> <li>Extensibility: New features can be added as new event types</li> <li>Simplicity: One format to rule them all</li> <li>Interoperability: All clients understand the same basic structure</li> </ul>"},{"location":"concepts/events-and-messages/#event-structure","title":"Event Structure","text":"<p>Every Nostr event is a JSON object with specific required fields:</p> <pre><code>{\n  \"id\": \"event-id-hash\",\n  \"pubkey\": \"author-public-key\", \n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"cryptographic-signature\"\n}\n</code></pre> <p>Let's break down each field:</p>"},{"location":"concepts/events-and-messages/#required-fields","title":"Required Fields","text":""},{"location":"concepts/events-and-messages/#id-event-id","title":"<code>id</code> (Event ID)","text":"<ul> <li>32-byte SHA-256 hash of the serialized event data</li> <li>Serves as the unique identifier for the event</li> <li>Calculated from other fields (not arbitrary)</li> </ul> <pre><code>// The ID is the SHA-256 of this serialized data:\n[\n  0,                    // Reserved\n  pubkey,              // Author public key\n  created_at,          // Timestamp\n  kind,                // Event type\n  tags,                // Tags array\n  content              // Event content\n]\n</code></pre>"},{"location":"concepts/events-and-messages/#pubkey-author","title":"<code>pubkey</code> (Author)","text":"<ul> <li>32-byte public key of the event creator</li> <li>Identifies who created the event</li> <li>Used to verify the signature</li> </ul>"},{"location":"concepts/events-and-messages/#created_at-timestamp","title":"<code>created_at</code> (Timestamp)","text":"<ul> <li>Unix timestamp in seconds</li> <li>When the event was created</li> <li>Used for chronological ordering</li> </ul>"},{"location":"concepts/events-and-messages/#kind-event-type","title":"<code>kind</code> (Event Type)","text":"<ul> <li>Integer that defines the event type</li> <li>Determines how clients should interpret the event</li> <li>Standardized in various NIPs</li> </ul>"},{"location":"concepts/events-and-messages/#tags-metadata","title":"<code>tags</code> (Metadata)","text":"<ul> <li>Array of arrays containing metadata</li> <li>Used for references, mentions, hashtags, etc.</li> <li>Each tag is an array of strings</li> </ul>"},{"location":"concepts/events-and-messages/#content-message-content","title":"<code>content</code> (Message Content)","text":"<ul> <li>The main content of the event</li> <li>Can be text, JSON, or empty depending on kind</li> <li>Often contains the user-visible message</li> </ul>"},{"location":"concepts/events-and-messages/#sig-signature","title":"<code>sig</code> (Signature)","text":"<ul> <li>64-byte Schnorr signature</li> <li>Proves the event was created by the pubkey owner</li> <li>Prevents tampering</li> </ul>"},{"location":"concepts/events-and-messages/#event-kinds","title":"Event Kinds","text":"<p>Event kinds determine how the event should be interpreted:</p>"},{"location":"concepts/events-and-messages/#text-events","title":"Text Events","text":""},{"location":"concepts/events-and-messages/#kind-1-text-note","title":"Kind 1: Text Note","text":"<p>The most common event type - like a tweet:</p> <pre><code>{\n  \"kind\": 1,\n  \"content\": \"Just learned about Nostr! This decentralized social media is amazing \ud83d\ude80\",\n  \"tags\": [\n    [\"t\", \"nostr\"],\n    [\"t\", \"decentralized\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#kind-0-user-metadata","title":"Kind 0: User Metadata","text":"<p>Profile information:</p> <pre><code>{\n  \"kind\": 0,\n  \"content\": \"{\\\"name\\\":\\\"Alice\\\",\\\"about\\\":\\\"Nostr enthusiast\\\",\\\"picture\\\":\\\"https://example.com/avatar.jpg\\\"}\"\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#social-events","title":"Social Events","text":""},{"location":"concepts/events-and-messages/#kind-7-reaction","title":"Kind 7: Reaction","text":"<p>Likes, hearts, and other reactions:</p> <pre><code>{\n  \"kind\": 7,\n  \"content\": \"\ud83e\udd19\",\n  \"tags\": [\n    [\"e\", \"note-id-being-reacted-to\"],\n    [\"p\", \"author-of-original-note\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#kind-6-repost","title":"Kind 6: Repost","text":"<p>Sharing someone else's note:</p> <pre><code>{\n  \"kind\": 6,\n  \"content\": \"\",\n  \"tags\": [\n    [\"e\", \"event-id-being-reposted\"],\n    [\"p\", \"original-author-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#communication-events","title":"Communication Events","text":""},{"location":"concepts/events-and-messages/#kind-4-encrypted-direct-message","title":"Kind 4: Encrypted Direct Message","text":"<p>Private messages between users:</p> <pre><code>{\n  \"kind\": 4,\n  \"content\": \"encrypted-message-content\",\n  \"tags\": [\n    [\"p\", \"recipient-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#kind-42-channel-message","title":"Kind 42: Channel Message","text":"<p>Public chat room messages:</p> <pre><code>{\n  \"kind\": 42,\n  \"content\": \"Hello everyone in this channel!\",\n  \"tags\": [\n    [\"e\", \"channel-creation-event-id\", \"\", \"root\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#management-events","title":"Management Events","text":""},{"location":"concepts/events-and-messages/#kind-3-contact-list","title":"Kind 3: Contact List","text":"<p>Who you follow:</p> <pre><code>{\n  \"kind\": 3,\n  \"content\": \"\",\n  \"tags\": [\n    [\"p\", \"pubkey1\", \"relay-url\", \"petname\"],\n    [\"p\", \"pubkey2\", \"relay-url\", \"alice\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#kind-5-event-deletion","title":"Kind 5: Event Deletion","text":"<p>Request to delete your own events:</p> <pre><code>{\n  \"kind\": 5,\n  \"content\": \"Deleting this post\",\n  \"tags\": [\n    [\"e\", \"event-id-to-delete\"],\n    [\"k\", \"1\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#advanced-events","title":"Advanced Events","text":""},{"location":"concepts/events-and-messages/#kind-30023-long-form-content","title":"Kind 30023: Long-form Content","text":"<p>Articles and blog posts:</p> <pre><code>{\n  \"kind\": 30023,\n  \"content\": \"# My Article\\n\\nThis is a long-form article...\",\n  \"tags\": [\n    [\"d\", \"my-article-slug\"],\n    [\"title\", \"My Amazing Article\"],\n    [\"summary\", \"A brief summary\"],\n    [\"published_at\", \"1234567890\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#kind-9735-zap","title":"Kind 9735: Zap","text":"<p>Lightning payments:</p> <pre><code>{\n  \"kind\": 9735,\n  \"content\": \"\",\n  \"tags\": [\n    [\"bolt11\", \"lightning-invoice\"],\n    [\"description\", \"zap-request-event\"],\n    [\"p\", \"recipient-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#tag-system","title":"Tag System","text":"<p>Tags provide structured metadata for events:</p>"},{"location":"concepts/events-and-messages/#common-tag-types","title":"Common Tag Types","text":""},{"location":"concepts/events-and-messages/#e-tags-event-references","title":"\"e\" tags - Event References","text":"<p>Reference other events:</p> <pre><code>[\"e\", \"event-id\", \"relay-url\", \"marker\", \"pubkey\"]\n</code></pre> <ul> <li><code>event-id</code>: The event being referenced</li> <li><code>relay-url</code>: Where to find the event (optional)</li> <li><code>marker</code>: \"root\", \"reply\", or \"mention\" (optional)</li> <li><code>pubkey</code>: Author of referenced event (optional)</li> </ul>"},{"location":"concepts/events-and-messages/#p-tags-pubkey-references","title":"\"p\" tags - Pubkey References","text":"<p>Reference users:</p> <pre><code>[\"p\", \"pubkey\", \"relay-url\", \"petname\"]\n</code></pre>"},{"location":"concepts/events-and-messages/#t-tags-topicshashtags","title":"\"t\" tags - Topics/Hashtags","text":"<p>Categorize content:</p> <pre><code>[\"t\", \"nostr\"]\n[\"t\", \"bitcoin\"]\n</code></pre>"},{"location":"concepts/events-and-messages/#d-tags-identifiers","title":"\"d\" tags - Identifiers","text":"<p>For replaceable events:</p> <pre><code>[\"d\", \"unique-identifier\"]\n</code></pre>"},{"location":"concepts/events-and-messages/#advanced-tags","title":"Advanced Tags","text":"<pre><code>// Content warning\n[\"content-warning\", \"reason\"]\n\n// Expiration\n[\"expiration\", \"unix-timestamp\"]\n\n// Subject line\n[\"subject\", \"Email-like subject\"]\n\n// Geographic location\n[\"g\", \"geohash\"]\n</code></pre>"},{"location":"concepts/events-and-messages/#event-creation-process","title":"Event Creation Process","text":""},{"location":"concepts/events-and-messages/#1-build-event-object","title":"1. Build Event Object","text":"<pre><code>const event = {\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [\n    [\"t\", \"nostr\"],\n    [\"p\", \"some-pubkey\"]\n  ],\n  content: \"Hello Nostr!\"\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#2-add-pubkey","title":"2. Add Pubkey","text":"<pre><code>event.pubkey = getPublicKey(privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#3-calculate-id","title":"3. Calculate ID","text":"<pre><code>import { getEventHash } from 'nostr-tools'\n\nevent.id = getEventHash(event)\n</code></pre>"},{"location":"concepts/events-and-messages/#4-sign-event","title":"4. Sign Event","text":"<pre><code>import { signEvent } from 'nostr-tools'\n\nevent.sig = signEvent(event, privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#5-publish-to-relays","title":"5. Publish to Relays","text":"<pre><code>relays.forEach(relay =&gt; {\n  relay.publish(event)\n})\n</code></pre>"},{"location":"concepts/events-and-messages/#event-verification","title":"Event Verification","text":"<p>When receiving events, clients must verify them:</p>"},{"location":"concepts/events-and-messages/#1-verify-id","title":"1. Verify ID","text":"<pre><code>import { getEventHash } from 'nostr-tools'\n\nconst calculatedId = getEventHash(event)\nif (calculatedId !== event.id) {\n  throw new Error('Invalid event ID')\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#2-verify-signature","title":"2. Verify Signature","text":"<pre><code>import { verifySignature } from 'nostr-tools'\n\nconst isValid = verifySignature(event)\nif (!isValid) {\n  throw new Error('Invalid signature')\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#3-check-timestamp","title":"3. Check Timestamp","text":"<pre><code>const now = Math.floor(Date.now() / 1000)\nconst age = now - event.created_at\n\n// Reject events too far in the future\nif (event.created_at &gt; now + 60) {\n  throw new Error('Event from future')\n}\n\n// Optionally reject very old events\nif (age &gt; 86400 * 30) { // 30 days\n  console.warn('Very old event')\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#event-serialization","title":"Event Serialization","text":"<p>Events must be serialized consistently for ID calculation:</p> <pre><code>// Serialization for ID calculation\nconst serialized = JSON.stringify([\n  0,\n  event.pubkey,\n  event.created_at,\n  event.kind,\n  event.tags,\n  event.content\n])\n\n// No whitespace, specific character escaping\nconst id = sha256(utf8Encode(serialized))\n</code></pre>"},{"location":"concepts/events-and-messages/#character-escaping-rules","title":"Character Escaping Rules","text":"<p>Specific characters must be escaped in content:</p> <ul> <li>Line break (<code>0x0A</code>) \u2192 <code>\\n</code></li> <li>Double quote (<code>0x22</code>) \u2192 <code>\\\"</code></li> <li>Backslash (<code>0x5C</code>) \u2192 <code>\\\\</code></li> <li>Carriage return (<code>0x0D</code>) \u2192 <code>\\r</code></li> <li>Tab (<code>0x09</code>) \u2192 <code>\\t</code></li> <li>Backspace (<code>0x08</code>) \u2192 <code>\\b</code></li> <li>Form feed (<code>0x0C</code>) \u2192 <code>\\f</code></li> </ul>"},{"location":"concepts/events-and-messages/#event-relationships","title":"Event Relationships","text":"<p>Events can reference each other to create complex structures:</p>"},{"location":"concepts/events-and-messages/#threads-replies","title":"Threads (Replies)","text":"<pre><code>{\n  \"kind\": 1,\n  \"content\": \"This is a reply\",\n  \"tags\": [\n    [\"e\", \"root-event-id\", \"\", \"root\"],\n    [\"e\", \"parent-event-id\", \"\", \"reply\"],\n    [\"p\", \"original-author-pubkey\"],\n    [\"p\", \"parent-author-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#mentions","title":"Mentions","text":"<pre><code>{\n  \"kind\": 1,\n  \"content\": \"Hey #[0], check this out!\",\n  \"tags\": [\n    [\"p\", \"mentioned-user-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#quotes","title":"Quotes","text":"<pre><code>{\n  \"kind\": 1,\n  \"content\": \"This is interesting: nostr:note1abc...\",\n  \"tags\": [\n    [\"q\", \"quoted-event-id\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#replaceable-events","title":"Replaceable Events","text":"<p>Some events can be replaced by newer versions:</p>"},{"location":"concepts/events-and-messages/#regular-replaceable-10000-19999","title":"Regular Replaceable (10000-19999)","text":"<p>Only the latest event for each <code>kind</code> + <code>pubkey</code> is kept:</p> <pre><code>{\n  \"kind\": 10000,\n  \"content\": \"My mute list\",\n  \"tags\": [\n    [\"p\", \"muted-pubkey-1\"],\n    [\"p\", \"muted-pubkey-2\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#parameterized-replaceable-30000-39999","title":"Parameterized Replaceable (30000-39999)","text":"<p>Latest event for each <code>kind</code> + <code>pubkey</code> + <code>d</code> tag:</p> <pre><code>{\n  \"kind\": 30023,\n  \"tags\": [\n    [\"d\", \"my-article-slug\"],\n    [\"title\", \"My Article\"]\n  ],\n  \"content\": \"Article content...\"\n}\n</code></pre>"},{"location":"concepts/events-and-messages/#event-validation-rules","title":"Event Validation Rules","text":""},{"location":"concepts/events-and-messages/#required-validations","title":"Required Validations","text":"<ul> <li><code>id</code> matches SHA-256 of serialized event</li> <li><code>sig</code> is valid Schnorr signature</li> <li><code>pubkey</code> is valid 32-byte hex</li> <li><code>created_at</code> is reasonable timestamp</li> <li><code>kind</code> is valid integer</li> <li><code>tags</code> is array of arrays of strings</li> </ul>"},{"location":"concepts/events-and-messages/#optional-validations","title":"Optional Validations","text":"<ul> <li>Content length limits</li> <li>Tag count limits</li> <li>Timestamp freshness</li> <li>Proof of work requirements</li> <li>Content filtering</li> </ul>"},{"location":"concepts/events-and-messages/#working-with-events-in-code","title":"Working with Events in Code","text":""},{"location":"concepts/events-and-messages/#creating-a-text-note","title":"Creating a Text Note","text":"<pre><code>import { finishEvent } from 'nostr-tools'\n\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [\n    [\"t\", \"hello\"],\n    [\"t\", \"nostr\"]\n  ],\n  content: \"Hello Nostr world! \ud83d\udc4b\"\n}, privateKey)\n\nconsole.log('Created event:', event)\n</code></pre>"},{"location":"concepts/events-and-messages/#creating-a-reply","title":"Creating a Reply","text":"<pre><code>const replyEvent = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [\n    [\"e\", originalEvent.id, \"\", \"root\"],\n    [\"p\", originalEvent.pubkey]\n  ],\n  content: \"Great post! Thanks for sharing.\"\n}, privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#creating-a-reaction","title":"Creating a Reaction","text":"<pre><code>const reaction = finishEvent({\n  kind: 7,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [\n    [\"e\", noteEvent.id],\n    [\"p\", noteEvent.pubkey],\n    [\"k\", \"1\"] // kind of event being reacted to\n  ],\n  content: \"\ud83e\udd19\"\n}, privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#best-practices","title":"Best Practices","text":""},{"location":"concepts/events-and-messages/#for-event-creation","title":"For Event Creation","text":"<p>Do This</p> <ul> <li>Always set reasonable <code>created_at</code> timestamps</li> <li>Include relevant <code>p</code> tags for notifications</li> <li>Use standard tag formats</li> <li>Keep content size reasonable</li> <li>Include proper event references in replies</li> </ul> <p>Avoid This</p> <ul> <li>Creating events with future timestamps</li> <li>Omitting required <code>p</code> tags in replies</li> <li>Using non-standard tag formats</li> <li>Creating excessive tag noise</li> <li>Forgetting to handle special characters</li> </ul>"},{"location":"concepts/events-and-messages/#for-event-processing","title":"For Event Processing","text":"<ul> <li>Always verify signatures before trusting events</li> <li>Implement reasonable timestamp checks</li> <li>Handle missing or malformed fields gracefully</li> <li>Cache verification results for performance</li> <li>Rate limit event processing to prevent spam</li> </ul>"},{"location":"concepts/events-and-messages/#common-patterns","title":"Common Patterns","text":""},{"location":"concepts/events-and-messages/#thread-creation","title":"Thread Creation","text":"<pre><code>// Root post\nconst rootPost = finishEvent({\n  kind: 1,\n  content: \"Starting a new thread about Nostr events...\",\n  // ...\n}, privateKey)\n\n// Reply to root\nconst reply = finishEvent({\n  kind: 1,\n  content: \"First point: events are the core data structure\",\n  tags: [\n    [\"e\", rootPost.id, \"\", \"root\"],\n    [\"p\", rootPost.pubkey]\n  ]\n  // ...\n}, privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#content-discovery","title":"Content Discovery","text":"<pre><code>// Subscribe to hashtag\nconst sub = relay.sub([{\n  kinds: [1],\n  \"#t\": [\"nostr\"]\n}])\n\n// Subscribe to mentions\nconst mentionSub = relay.sub([{\n  kinds: [1],\n  \"#p\": [myPubkey]\n}])\n</code></pre>"},{"location":"concepts/events-and-messages/#event-updates","title":"Event Updates","text":"<pre><code>// Replaceable event (profile)\nconst profile = finishEvent({\n  kind: 0,\n  content: JSON.stringify({\n    name: \"Alice\",\n    about: \"Nostr developer\",\n    picture: \"https://example.com/avatar.jpg\"\n  })\n  // ...\n}, privateKey)\n</code></pre>"},{"location":"concepts/events-and-messages/#next-steps","title":"Next Steps","text":"<p>Understanding events is crucial for building Nostr applications. Next, explore:</p> <ul> <li>Relays and Communication - How events travel through the network</li> <li>NIPs - Specifications for different event types</li> <li>Building Applications - Putting it all together</li> </ul> <p>Practice Exercise</p> <p>Try creating different types of events using the examples above. Start with simple text notes and gradually explore more complex event types like replies and reactions.</p>"},{"location":"concepts/keys/","title":"Keys and Identity in Nostr","text":"<p>Learning Objectives</p> <p>After this lesson, you'll understand:</p> <ul> <li>How digital identity works in the Nostr protocol</li> <li>The difference between private and public keys</li> <li>Different key formats and their purposes</li> <li>Best practices for key security and management</li> <li>Why Nostr uses cryptographic identity instead of usernames</li> </ul>"},{"location":"concepts/keys/#cryptographic-identity","title":"Cryptographic Identity","text":"<p>Nostr uses a fundamentally different approach to identity compared to traditional social media platforms. Instead of usernames and passwords managed by a central authority, Nostr employs cryptographic key pairs to establish and verify identity.</p> <p>This approach provides users with complete ownership and control over their digital identity, eliminating dependence on any central platform or service provider.</p>"},{"location":"concepts/keys/#understanding-key-pairs","title":"Understanding Key Pairs","text":""},{"location":"concepts/keys/#cryptographic-fundamentals","title":"Cryptographic Fundamentals","text":"<p>Cryptographic keys work as mathematically related pairs that enable secure digital communication:</p> <ul> <li>One-way mathematical relationship: Public keys are derived from private keys, but the reverse is computationally infeasible</li> <li>Digital signatures: Private keys create signatures that public keys can verify</li> <li>Identity verification: Signatures prove ownership without revealing the private key</li> </ul> <pre><code>graph LR\n    A[Private Key&lt;br/&gt;Secret Component] --&gt;|generates| B[Public Key&lt;br/&gt;Identity Component]\n    A --&gt;|signs| C[Messages/Events]\n    B --&gt;|verifies| C\n    B --&gt;|becomes| D[Nostr Identity]</code></pre>"},{"location":"concepts/keys/#private-key-management","title":"Private Key Management","text":""},{"location":"concepts/keys/#definition-and-purpose","title":"Definition and Purpose","text":"<p>The private key serves as the master secret that controls your entire Nostr identity. It is a cryptographically secure random number that:</p> <ul> <li>Generates your public identity: Mathematically derives your public key</li> <li>Creates digital signatures: Proves authorship of your events</li> <li>Controls all interactions: Required for posting, following, and other actions</li> <li>Cannot be recovered: Loss results in permanent identity loss</li> </ul>"},{"location":"concepts/keys/#security-requirements","title":"Security Requirements","text":"<p>Private key security is critical for maintaining control of your Nostr identity:</p> <p>Critical Security Practices</p> <p>Never Share Your Private Key - Do not transmit via email, messaging, or any digital communication - Avoid storing in plain text files or unencrypted formats - Never enter into untrusted applications or websites</p> <p>Secure Storage Methods - Use hardware wallets for maximum security - Employ encrypted password managers - Create offline, encrypted backups - Store in multiple secure locations</p>"},{"location":"concepts/keys/#key-format-examples","title":"Key Format Examples","text":"Hex Formatnsec Format (Bech32) <pre><code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2\n</code></pre> <pre><code>nsec1mclkfkwu2n7v0wuwn6d2kwx56mn0029ceuxr6ul6xjm2k6l7qxsqrxqhp8\n</code></pre>"},{"location":"concepts/keys/#public-key-distribution","title":"Public Key Distribution","text":""},{"location":"concepts/keys/#purpose-and-function","title":"Purpose and Function","text":"<p>Your public key serves as your permanent Nostr address and identity. It enables:</p> <ul> <li>Global identification: Unique address in the Nostr network</li> <li>Signature verification: Others can verify your message authenticity  </li> <li>Social connections: Followers use this to find and follow you</li> <li>Cross-client compatibility: Works across all Nostr applications</li> </ul>"},{"location":"concepts/keys/#sharing-guidelines","title":"Sharing Guidelines","text":"<p>Unlike private keys, public keys are designed for open distribution:</p> <p>\u2705 Safe to share publicly \u2705 Include in social media profiles \u2705 Display on websites and business cards \u2705 Send via any communication method \u2705 Embed in QR codes</p>"},{"location":"concepts/keys/#public-key-formats","title":"Public Key Formats","text":"Hex Formatnpub Format (Bech32) <pre><code>a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2\n</code></pre> <pre><code>npub15xkv85x2um6h3jfgxhj259x54fvv7n7k9c5wxq9ewn64fhux5xeqz8p2qv\n</code></pre>"},{"location":"concepts/keys/#mathematical-relationship","title":"Mathematical Relationship","text":"<p>The relationship between private and public keys relies on elliptic curve cryptography:</p>"},{"location":"concepts/keys/#key-generation-process","title":"Key Generation Process","text":"<pre><code>graph TB\n    A[Cryptographically Secure&lt;br/&gt;Random Number] --&gt;|secp256k1| B[Private Key]\n    B --&gt;|Elliptic Curve&lt;br/&gt;Point Multiplication| C[Public Key]\n    B --&gt;|ECDSA| D[Digital Signatures]\n    C --&gt;|verifies| D</code></pre>"},{"location":"concepts/keys/#security-properties","title":"Security Properties","text":"<ul> <li>One-way function: Computing public key from private key is fast</li> <li>Computational security: Deriving private key from public key is infeasible</li> <li>Signature uniqueness: Each message produces a unique signature</li> <li>Non-repudiation: Signatures cannot be forged without the private key</li> </ul>"},{"location":"concepts/keys/#your-private-key-in-detail","title":"Your Private Key in Detail","text":"<p>Let's dive deeper into your most important digital possession.</p>"},{"location":"concepts/keys/#what-makes-it-special","title":"What Makes It Special","text":"<ul> <li>Completely random: Generated using cryptographically secure randomness</li> <li>Astronomically unique: The chances of two people getting the same key are basically zero</li> <li>Mathematically powerful: Can create unlimited verified signatures</li> <li>Irreplaceable: There's no customer service to call if you lose it</li> </ul>"},{"location":"concepts/keys/#what-it-looks-like","title":"What It Looks Like","text":"Hex Format (Raw)nsec Format (User-Friendly) <pre><code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2\n</code></pre> <pre><code>nsec1mclkfkwu2n7v0wuwn6d2kwx56mn0029ceuxr6ul6xjm2k6l7qxsqrxqhp8\n</code></pre>"},{"location":"concepts/keys/#creating-your-first-key-pair","title":"Creating Your First Key Pair","text":"JavaScriptPythonRust <pre><code>import { generatePrivateKey } from 'nostr-tools'\n\n// Generate your unique identity\nconst privateKey = generatePrivateKey()\nconsole.log('Your private key (keep secret!):', privateKey)\n</code></pre> <pre><code>from nostr.key import PrivateKey\n\n// Create your digital identity\nprivate_key = PrivateKey()\nprint(f\"Your private key (guard this!): {private_key.hex()}\")\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n// Generate your keys\nlet keys = Keys::generate();\nprintln!(\"Private key (keep safe!): {}\", keys.secret_key().display_secret());\n</code></pre>"},{"location":"concepts/keys/#your-public-key-in-detail","title":"Your Public Key in Detail","text":"<p>Now let's explore your public identity - the part of you that the Nostr world gets to see.</p>"},{"location":"concepts/keys/#what-makes-it-perfect-for-sharing","title":"What Makes It Perfect for Sharing","text":"<ul> <li>Derived from private: Mathematically created from your private key</li> <li>Always the same: Your private key always generates the same public key</li> <li>Safe to broadcast: No security risk in sharing it widely</li> <li>Verifiable: Others can use it to confirm your signatures are real</li> </ul>"},{"location":"concepts/keys/#key-formats-and-encoding","title":"Key Formats and Encoding","text":"<p>Nostr uses different formats for displaying keys to users:</p>"},{"location":"concepts/keys/#hex-format","title":"Hex Format","text":"<ul> <li>Raw format: 64 character hexadecimal string</li> <li>Use case: Internal processing, APIs</li> <li>Example: <code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2</code></li> </ul>"},{"location":"concepts/keys/#bech32-format-nip-19","title":"Bech32 Format (NIP-19)","text":"<ul> <li>User-friendly: Includes checksums and prefixes</li> <li>Private keys: Start with <code>nsec1</code></li> <li>Public keys: Start with <code>npub1</code></li> <li>Benefits: Error detection, easier to copy/paste</li> </ul> <p>Format Conversion</p> <p>Most Nostr libraries provide functions to convert between formats:</p> <pre><code>import { nip19 } from 'nostr-tools'\n\n// Hex to bech32\nconst npub = nip19.npubEncode(hexPublicKey)\nconst nsec = nip19.nsecEncode(hexPrivateKey)\n\n// Bech32 to hex\nconst { type, data } = nip19.decode(npub)\n</code></pre>"},{"location":"concepts/keys/#digital-signatures","title":"Digital Signatures","text":"<p>Your private key is used to create digital signatures that prove authenticity:</p>"},{"location":"concepts/keys/#how-signatures-work","title":"How Signatures Work","text":"<ol> <li>Create Event: You compose a message or event</li> <li>Hash Content: The event content is hashed</li> <li>Sign Hash: Your private key signs the hash</li> <li>Attach Signature: The signature is included with the event</li> <li>Verify: Others use your public key to verify the signature</li> </ol>"},{"location":"concepts/keys/#example-signing-an-event","title":"Example: Signing an Event","text":"JavaScriptPython <pre><code>import { finishEvent } from 'nostr-tools'\n\nconst event = {\n    kind: 1,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],\n    content: 'Hello Nostr!'\n}\n\nconst signedEvent = finishEvent(event, privateKey)\nconsole.log('Signed event:', signedEvent)\n</code></pre> <pre><code>from nostr.event import Event\nfrom nostr.key import PrivateKey\nimport time\n\nprivate_key = PrivateKey()\n\nevent = Event(\n    kind=1,\n    content=\"Hello Nostr!\",\n    created_at=int(time.time())\n)\n\nprivate_key.sign_event(event)\nprint(f\"Signed event: {event.to_json()}\")\n</code></pre>"},{"location":"concepts/keys/#identity-without-usernames","title":"Identity Without Usernames","text":""},{"location":"concepts/keys/#traditional-vs-nostr-identity","title":"Traditional vs Nostr Identity","text":"Traditional Social Media Nostr Username + Password Cryptographic Keys Platform controls identity You control identity Can be banned/suspended Censorship resistant Tied to one platform Portable across clients Password can be reset Keys cannot be recovered"},{"location":"concepts/keys/#benefits-of-cryptographic-identity","title":"Benefits of Cryptographic Identity","text":"<p>Advantages</p> <ul> <li>True Ownership: You own your identity, not a platform</li> <li>Portability: Use the same identity across all Nostr clients</li> <li>Censorship Resistance: No central authority can ban you</li> <li>Verification: Cryptographic proof of authenticity</li> <li>Privacy: No personal information required</li> </ul> <p>Responsibilities</p> <ul> <li>Key Security: You must protect your private key</li> <li>No Recovery: Lost keys mean lost identity</li> <li>Backup Important: Always backup your keys securely</li> </ul>"},{"location":"concepts/keys/#key-management-best-practices","title":"Key Management Best Practices","text":""},{"location":"concepts/keys/#secure-storage","title":"Secure Storage","text":"<p>Never Do This</p> <ul> <li>Store private keys in plain text files</li> <li>Share private keys via email or messaging</li> <li>Use the same key across multiple devices without encryption</li> <li>Store keys in browser localStorage without encryption</li> </ul> <p>Best Practices</p> <ul> <li>Use hardware wallets when possible</li> <li>Encrypt private keys with strong passwords</li> <li>Use secure key management software</li> <li>Create offline backups in multiple locations</li> <li>Consider using key derivation for multiple identities</li> </ul>"},{"location":"concepts/keys/#key-backup-strategies","title":"Key Backup Strategies","text":"Paper BackupDigital BackupHardware Wallet <pre><code>1. Write down your private key (nsec format)\n2. Store in a fireproof safe\n3. Consider multiple copies in different locations\n4. Use tamper-evident storage\n</code></pre> <pre><code>1. Encrypt with strong password\n2. Store on multiple devices\n3. Use cloud storage with encryption\n4. Regular backup verification\n</code></pre> <pre><code>1. Use dedicated hardware device\n2. Secure with PIN/passphrase\n3. Backup seed phrase securely\n4. Test recovery process\n</code></pre>"},{"location":"concepts/keys/#multiple-identities","title":"Multiple Identities","text":"<p>You can have multiple Nostr identities for different purposes:</p>"},{"location":"concepts/keys/#use-cases","title":"Use Cases","text":"<ul> <li>Personal: Your main social identity</li> <li>Professional: Work-related content</li> <li>Anonymous: Privacy-focused interactions</li> <li>Bot: Automated accounts</li> <li>Testing: Development and experimentation</li> </ul>"},{"location":"concepts/keys/#managing-multiple-keys","title":"Managing Multiple Keys","text":"JavaScript <pre><code>class NostrIdentityManager {\n    constructor() {\n        this.identities = new Map()\n    }\n\n    createIdentity(name) {\n        const privateKey = generatePrivateKey()\n        const publicKey = getPublicKey(privateKey)\n\n        this.identities.set(name, {\n            privateKey,\n            publicKey,\n            npub: nip19.npubEncode(publicKey)\n        })\n\n        return this.identities.get(name)\n    }\n\n    getIdentity(name) {\n        return this.identities.get(name)\n    }\n\n    listIdentities() {\n        return Array.from(this.identities.keys())\n    }\n}\n</code></pre>"},{"location":"concepts/keys/#interactive-exercise","title":"Interactive Exercise","text":"<p>Let's practice working with keys:</p> <p>Try This</p> <ol> <li>Generate a new key pair</li> <li>Convert between hex and bech32 formats</li> <li>Create and sign a simple event</li> <li>Verify the signature</li> </ol> <p>Use the code examples above to experiment with key generation and signing.</p>"},{"location":"concepts/keys/#common-pitfalls","title":"Common Pitfalls","text":"<p>Avoid These Mistakes</p> <p>Key Confusion - Mixing up private and public keys - Using wrong key formats - Sharing private keys accidentally</p> <p>Security Issues - Storing keys insecurely - Not backing up keys - Using weak random number generation</p> <p>Format Errors - Invalid hex characters - Incorrect bech32 encoding - Wrong key length</p>"},{"location":"concepts/keys/#next-steps","title":"Next Steps","text":"<p>Now that you understand keys and identity, let's explore how events and messages work in Nostr.</p>      :material-arrow-right: Events &amp; Messages \u2192"},{"location":"concepts/keys/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What's the difference between a private key and public key?</li> <li>Which key format starts with \"npub1\"?</li> <li>What happens if you lose your private key?</li> <li>Why doesn't Nostr use usernames and passwords?</li> <li>What is the purpose of digital signatures?</li> </ol> Answers <ol> <li>Private key is secret and used for signing; public key is shared and used for verification</li> <li>Public keys in bech32 format start with \"npub1\"</li> <li>You lose access to that identity forever - there's no recovery</li> <li>Cryptographic keys provide better security, ownership, and censorship resistance</li> <li>Digital signatures prove authenticity and prevent tampering </li> </ol>"},{"location":"concepts/nips/","title":"Understanding NIPs (Nostr Implementation Possibilities)","text":"<p>Learning Objectives</p> <p>After this lesson, you'll understand:</p> <ul> <li>What NIPs are and why they're essential</li> <li>How NIPs enable interoperability and innovation</li> <li>Core NIPs that every implementation should support</li> <li>The NIP development and adoption process</li> <li>How to read and implement NIPs</li> </ul> <p>NIPs are the backbone of Nostr's extensibility and standardization. They define how different parts of the protocol work and enable interoperability between clients and relays.</p>"},{"location":"concepts/nips/#what-are-nips","title":"What are NIPs?","text":"<p>NIP stands for Nostr Implementation Possibility. NIPs are technical specifications that describe:</p> <ul> <li>Protocol features and extensions</li> <li>Event formats and structures</li> <li>Client and relay behaviors</li> <li>Cryptographic standards</li> <li>Communication patterns</li> </ul> <p>Think of NIPs as the \"rules of the game\" that all Nostr applications follow to ensure they can work together seamlessly.</p>"},{"location":"concepts/nips/#why-nips-matter","title":"Why NIPs Matter","text":""},{"location":"concepts/nips/#interoperability","title":"\ud83d\udd17 Interoperability","text":"<p>NIPs ensure that a note posted from Damus can be read on Amethyst, Iris, or any other Nostr client.</p>"},{"location":"concepts/nips/#innovation","title":"\ud83d\ude80 Innovation","text":"<p>New features can be proposed, tested, and standardized through the NIP process.</p>"},{"location":"concepts/nips/#standardization","title":"\ud83d\udccb Standardization","text":"<p>Common patterns and best practices are documented for developers.</p>"},{"location":"concepts/nips/#evolution","title":"\ud83d\udd04 Evolution","text":"<p>The protocol can evolve while maintaining backward compatibility.</p>"},{"location":"concepts/nips/#core-nips-essential","title":"Core NIPs (Essential)","text":"<p>These NIPs form the foundation of Nostr and should be implemented by all clients:</p>"},{"location":"concepts/nips/#nip-01-basic-protocol-flow-description","title":"NIP-01: Basic Protocol Flow Description","text":"<p>The foundation of Nostr - defines events, signatures, and basic communication.</p> <p>Key concepts: - Event structure and serialization - Digital signatures using Schnorr - Basic relay communication patterns - Event kinds and their meanings</p> <pre><code>{\n  \"id\": \"event-id\",\n  \"pubkey\": \"author-pubkey\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"signature\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-02-follow-list","title":"NIP-02: Follow List","text":"<p>Defines how users follow each other and manage contact lists.</p> <pre><code>{\n  \"kind\": 3,\n  \"tags\": [\n    [\"p\", \"pubkey1\", \"relay-url\", \"alice\"],\n    [\"p\", \"pubkey2\", \"relay-url\", \"bob\"]\n  ],\n  \"content\": \"\"\n}\n</code></pre> <p>Use cases: - Building social graphs - Contact management - Relay recommendations - Petname systems</p>"},{"location":"concepts/nips/#nip-19-bech32-encoded-entities","title":"NIP-19: bech32-encoded entities","text":"<p>Human-readable identifiers for Nostr entities.</p> <pre><code>npub1... (public keys)\nnsec1... (private keys)  \nnote1... (note IDs)\nnprofile1... (profiles with relay hints)\nnevent1... (events with relay hints)\nnaddr1... (addresses for replaceable events)\nnrelay1... (relay URLs)\n</code></pre>"},{"location":"concepts/nips/#communication-nips","title":"Communication NIPs","text":""},{"location":"concepts/nips/#nip-04-encrypted-direct-message-deprecated","title":"NIP-04: Encrypted Direct Message (Deprecated)","text":"<p>\u26a0\ufe0f Note: Deprecated in favor of NIP-17</p> <p>Enables private messaging between users using shared secrets.</p> <pre><code>{\n  \"kind\": 4,\n  \"tags\": [[\"p\", \"recipient-pubkey\"]],\n  \"content\": \"encrypted-message-content?iv=initialization-vector\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-17-private-direct-messages-current-standard","title":"NIP-17: Private Direct Messages (Current Standard)","text":"<p>Modern encrypted messaging with improved security.</p> <p>Key improvements: - Gift wrap pattern for metadata protection - Better forward secrecy - Reduced metadata leakage</p>"},{"location":"concepts/nips/#nip-10-text-notes-and-threads","title":"NIP-10: Text Notes and Threads","text":"<p>Standardizes how to reference other notes and create threads.</p> <pre><code>{\n  \"kind\": 1,\n  \"tags\": [\n    [\"e\", \"root-event-id\", \"\", \"root\"],\n    [\"e\", \"reply-to-id\", \"\", \"reply\"],\n    [\"p\", \"mentioned-pubkey\"]\n  ],\n  \"content\": \"This is a reply\"\n}\n</code></pre> <p>Tag markers: - <code>root</code>: Points to the thread root - <code>reply</code>: Points to the direct parent - <code>mention</code>: References without reply semantics</p>"},{"location":"concepts/nips/#identity-and-verification","title":"Identity and Verification","text":""},{"location":"concepts/nips/#nip-05-mapping-nostr-keys-to-dns-based-internet-identifiers","title":"NIP-05: Mapping Nostr keys to DNS-based internet identifiers","text":"<p>Links Nostr identities to domain names for verification.</p> <p>Process: 1. User sets <code>nip05</code> field in profile: <code>\"alice@example.com\"</code> 2. Client fetches <code>https://example.com/.well-known/nostr.json?name=alice</code> 3. Verifies pubkey matches</p> <pre><code>{\n  \"names\": {\n    \"alice\": \"npub1...\"\n  },\n  \"relays\": {\n    \"npub1...\": [\"wss://relay.example.com\"]\n  }\n}\n</code></pre>"},{"location":"concepts/nips/#nip-39-external-identities-in-profiles","title":"NIP-39: External Identities in Profiles","text":"<p>Link external platforms to Nostr profiles.</p> <pre><code>{\n  \"kind\": 0,\n  \"content\": \"{\\\"name\\\":\\\"Alice\\\"}\",\n  \"tags\": [\n    [\"i\", \"github:alice\", \"https://github.com/alice\"],\n    [\"i\", \"twitter:alice_crypto\", \"https://twitter.com/alice_crypto\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/nips/#content-types","title":"Content Types","text":""},{"location":"concepts/nips/#nip-23-long-form-content","title":"NIP-23: Long-form Content","text":"<p>Enables publishing articles and long-form content.</p> <pre><code>{\n  \"kind\": 30023,\n  \"tags\": [\n    [\"d\", \"article-slug\"],\n    [\"title\", \"My Article Title\"],\n    [\"summary\", \"Article summary\"],\n    [\"published_at\", \"1234567890\"]\n  ],\n  \"content\": \"# Article Content\\n\\nThis is a long article...\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-25-reactions","title":"NIP-25: Reactions","text":"<p>Standardizes reactions (likes, hearts, etc.) to events.</p> <pre><code>{\n  \"kind\": 7,\n  \"tags\": [\n    [\"e\", \"reacted-event-id\"],\n    [\"p\", \"reacted-event-author\"],\n    [\"k\", \"1\"]\n  ],\n  \"content\": \"\ud83e\udd19\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-18-reposts","title":"NIP-18: Reposts","text":"<p>Two types of reposts:</p> <p>Generic Repost (Kind 6): <pre><code>{\n  \"kind\": 6,\n  \"tags\": [[\"e\", \"reposted-event-id\"]],\n  \"content\": \"\"\n}\n</code></pre></p> <p>Quote Repost (Kind 1): <pre><code>{\n  \"kind\": 1,\n  \"tags\": [[\"q\", \"quoted-event-id\"]],\n  \"content\": \"This is interesting: nostr:note1...\"\n}\n</code></pre></p>"},{"location":"concepts/nips/#lightning-integration","title":"Lightning Integration","text":""},{"location":"concepts/nips/#nip-57-lightning-zaps","title":"NIP-57: Lightning Zaps","text":"<p>Enables Bitcoin Lightning payments (zaps) on Nostr.</p> <p>Zap Request (Kind 9734): <pre><code>{\n  \"kind\": 9734,\n  \"tags\": [\n    [\"p\", \"recipient-pubkey\"],\n    [\"amount\", \"21000\"],\n    [\"relays\", \"wss://relay1.com\", \"wss://relay2.com\"]\n  ],\n  \"content\": \"Great post! \u26a1\"\n}\n</code></pre></p> <p>Zap Receipt (Kind 9735): <pre><code>{\n  \"kind\": 9735,\n  \"tags\": [\n    [\"bolt11\", \"lightning-invoice\"],\n    [\"description\", \"zap-request-event\"],\n    [\"p\", \"recipient-pubkey\"]\n  ]\n}\n</code></pre></p>"},{"location":"concepts/nips/#nip-47-wallet-connect","title":"NIP-47: Wallet Connect","text":"<p>Allows remote wallet control for Lightning payments.</p> <p>Supported commands: - <code>pay_invoice</code> - <code>pay_keysend</code> - <code>make_invoice</code> - <code>lookup_invoice</code> - <code>get_balance</code> - <code>get_info</code></p>"},{"location":"concepts/nips/#relay-operations","title":"Relay Operations","text":""},{"location":"concepts/nips/#nip-11-relay-information-document","title":"NIP-11: Relay Information Document","text":"<p>Relays provide metadata about their capabilities.</p> <pre><code>{\n  \"name\": \"My Relay\",\n  \"description\": \"A Nostr relay\",\n  \"pubkey\": \"relay-pubkey\",\n  \"contact\": \"admin@relay.com\",\n  \"supported_nips\": [1, 2, 9, 11, 15, 16, 20, 22],\n  \"software\": \"strfry\",\n  \"version\": \"0.9.6\",\n  \"limitation\": {\n    \"max_message_length\": 16384,\n    \"max_subscriptions\": 300,\n    \"max_limit\": 5000,\n    \"auth_required\": false,\n    \"payment_required\": false\n  }\n}\n</code></pre>"},{"location":"concepts/nips/#nip-42-authentication-of-clients-to-relays","title":"NIP-42: Authentication of clients to relays","text":"<p>Enables authenticated connections to relays.</p> <p>Authentication flow: 1. Relay sends AUTH challenge 2. Client signs challenge with private key 3. Relay verifies signature 4. Authenticated session established</p>"},{"location":"concepts/nips/#nip-50-search-capability","title":"NIP-50: Search Capability","text":"<p>Standardizes search functionality across relays.</p> <pre><code>{\n  \"kinds\": [1],\n  \"search\": \"nostr protocol\",\n  \"limit\": 20\n}\n</code></pre>"},{"location":"concepts/nips/#advanced-features","title":"Advanced Features","text":""},{"location":"concepts/nips/#nip-26-delegated-event-signing-unrecommended","title":"NIP-26: Delegated Event Signing (Unrecommended)","text":"<p>\u26a0\ufe0f Note: Adds complexity for little gain</p> <p>Allows delegation of signing authority to other keys.</p>"},{"location":"concepts/nips/#nip-44-encrypted-payloads-versioned","title":"NIP-44: Encrypted Payloads (Versioned)","text":"<p>Improved encryption standard for sensitive data.</p> <p>Version 2 features: - ChaCha20-Poly1305 encryption - HMAC authentication - Versioned format for upgrades</p>"},{"location":"concepts/nips/#nip-59-gift-wrap","title":"NIP-59: Gift Wrap","text":"<p>Advanced encryption pattern for maximum privacy.</p> <p>Layers: 1. Rumor: The actual event content 2. Seal: Encrypted rumor with metadata 3. Gift Wrap: Public event containing the seal</p>"},{"location":"concepts/nips/#nip-65-relay-list-metadata","title":"NIP-65: Relay List Metadata","text":"<p>Users publish their preferred relays.</p> <pre><code>{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://relay1.com\"],\n    [\"r\", \"wss://relay2.com\", \"write\"],\n    [\"r\", \"wss://relay3.com\", \"read\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/nips/#specialized-applications","title":"Specialized Applications","text":""},{"location":"concepts/nips/#nip-15-nostr-marketplace","title":"NIP-15: Nostr Marketplace","text":"<p>E-commerce on Nostr.</p> <p>Product listing (Kind 30017): <pre><code>{\n  \"kind\": 30017,\n  \"tags\": [\n    [\"d\", \"product-id\"],\n    [\"title\", \"Product Name\"],\n    [\"price\", \"100\", \"USD\"],\n    [\"location\", \"New York, NY\"]\n  ],\n  \"content\": \"{\\\"name\\\":\\\"Product\\\",\\\"description\\\":\\\"...\\\"}\"\n}\n</code></pre></p>"},{"location":"concepts/nips/#nip-52-calendar-events","title":"NIP-52: Calendar Events","text":"<p>Event planning and scheduling.</p> <p>Time-based event (Kind 31923): <pre><code>{\n  \"kind\": 31923,\n  \"tags\": [\n    [\"d\", \"event-id\"],\n    [\"title\", \"Nostr Meetup\"],\n    [\"start\", \"1234567890\"],\n    [\"end\", \"1234571490\"],\n    [\"location\", \"San Francisco\"]\n  ]\n}\n</code></pre></p>"},{"location":"concepts/nips/#nip-53-live-activities","title":"NIP-53: Live Activities","text":"<p>Real-time streaming and live events.</p> <p>Live event (Kind 30311): <pre><code>{\n  \"kind\": 30311,\n  \"tags\": [\n    [\"d\", \"stream-id\"],\n    [\"title\", \"Live Coding Session\"],\n    [\"streaming\", \"https://stream.example.com\"],\n    [\"status\", \"live\"]\n  ]\n}\n</code></pre></p>"},{"location":"concepts/nips/#development-and-management","title":"Development and Management","text":""},{"location":"concepts/nips/#nip-34-git-stuff","title":"NIP-34: git stuff","text":"<p>Git repository management on Nostr.</p> <p>Repository announcement (Kind 30617): <pre><code>{\n  \"kind\": 30617,\n  \"tags\": [\n    [\"d\", \"repo-id\"],\n    [\"name\", \"my-project\"],\n    [\"clone\", \"https://github.com/user/repo\"],\n    [\"web\", \"https://github.com/user/repo\"]\n  ]\n}\n</code></pre></p>"},{"location":"concepts/nips/#nip-90-data-vending-machines","title":"NIP-90: Data Vending Machines","text":"<p>Decentralized computing services.</p> <p>Job request (Kind 5000-5999): <pre><code>{\n  \"kind\": 5000,\n  \"tags\": [\n    [\"i\", \"input-data\"],\n    [\"output\", \"text/plain\"],\n    [\"relays\", \"wss://relay.com\"]\n  ],\n  \"content\": \"Please analyze this data\"\n}\n</code></pre></p>"},{"location":"concepts/nips/#complete-nip-reference","title":"Complete NIP Reference","text":"<p>Based on the protocol document, here are all current NIPs:</p>"},{"location":"concepts/nips/#core-protocol","title":"Core Protocol","text":"<ul> <li>NIP-01: Basic protocol flow description</li> <li>NIP-02: Follow List</li> <li>NIP-03: OpenTimestamps Attestations for Events</li> <li>NIP-04: Encrypted Direct Message (deprecated)</li> <li>NIP-05: Mapping Nostr keys to DNS-based internet identifiers</li> <li>NIP-06: Basic key derivation from mnemonic seed phrase</li> <li>NIP-07: window.nostr capability for web browsers</li> <li>NIP-08: Handling Mentions (deprecated)</li> <li>NIP-09: Event Deletion Request</li> <li>NIP-10: Text Notes and Threads</li> <li>NIP-11: Relay Information Document</li> <li>NIP-13: Proof of Work</li> <li>NIP-14: Subject tag in text events</li> <li>NIP-15: Nostr Marketplace</li> </ul>"},{"location":"concepts/nips/#communication-social","title":"Communication &amp; Social","text":"<ul> <li>NIP-17: Private Direct Messages</li> <li>NIP-18: Reposts</li> <li>NIP-19: bech32-encoded entities</li> <li>NIP-21: nostr: URI scheme</li> <li>NIP-22: Comment</li> <li>NIP-23: Long-form Content</li> <li>NIP-24: Extra metadata fields and tags</li> <li>NIP-25: Reactions</li> <li>NIP-26: Delegated Event Signing (unrecommended)</li> <li>NIP-27: Text Note References</li> <li>NIP-28: Public Chat</li> </ul>"},{"location":"concepts/nips/#advanced-features_1","title":"Advanced Features","text":"<ul> <li>NIP-29: Relay-based Groups</li> <li>NIP-30: Custom Emoji</li> <li>NIP-31: Dealing with Unknown Events</li> <li>NIP-32: Labeling</li> <li>NIP-34: git stuff</li> <li>NIP-35: Torrents</li> <li>NIP-36: Sensitive Content</li> <li>NIP-37: Draft Events</li> <li>NIP-38: User Statuses</li> <li>NIP-39: External Identities in Profiles</li> <li>NIP-40: Expiration Timestamp</li> </ul>"},{"location":"concepts/nips/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>NIP-42: Authentication of clients to relays</li> <li>NIP-44: Encrypted Payloads (Versioned)</li> <li>NIP-45: Counting results</li> <li>NIP-46: Nostr Remote Signing</li> <li>NIP-47: Nostr Wallet Connect</li> <li>NIP-48: Proxy Tags</li> <li>NIP-49: Private Key Encryption</li> </ul>"},{"location":"concepts/nips/#discovery-search","title":"Discovery &amp; Search","text":"<ul> <li>NIP-50: Search Capability</li> <li>NIP-51: Lists</li> <li>NIP-52: Calendar Events</li> <li>NIP-53: Live Activities</li> <li>NIP-54: Wiki</li> <li>NIP-55: Android Signer Application</li> <li>NIP-56: Reporting</li> <li>NIP-57: Lightning Zaps</li> <li>NIP-58: Badges</li> <li>NIP-59: Gift Wrap</li> </ul>"},{"location":"concepts/nips/#specialized-applications_1","title":"Specialized Applications","text":"<ul> <li>NIP-60: Cashu Wallet</li> <li>NIP-61: Nutzaps</li> <li>NIP-62: Request to Vanish</li> <li>NIP-64: Chess (PGN)</li> <li>NIP-65: Relay List Metadata</li> <li>NIP-66: Relay Discovery and Liveness Monitoring</li> <li>NIP-68: Picture-first feeds</li> <li>NIP-69: Peer-to-peer Order events</li> <li>NIP-70: Protected Events</li> <li>NIP-71: Video Events</li> <li>NIP-72: Moderated Communities</li> <li>NIP-73: External Content IDs</li> <li>NIP-75: Zap Goals</li> <li>NIP-77: Negentropy Syncing</li> <li>NIP-78: Application-specific data</li> <li>NIP-7D: Threads</li> <li>NIP-84: Highlights</li> </ul>"},{"location":"concepts/nips/#infrastructure-tools","title":"Infrastructure &amp; Tools","text":"<ul> <li>NIP-86: Relay Management API</li> <li>NIP-88: Polls</li> <li>NIP-89: Recommended Application Handlers</li> <li>NIP-90: Data Vending Machines</li> <li>NIP-92: Media Attachments</li> <li>NIP-94: File Metadata</li> <li>NIP-96: HTTP File Storage Integration</li> <li>NIP-98: HTTP Auth</li> <li>NIP-99: Classified Listings</li> </ul>"},{"location":"concepts/nips/#nip-status-and-development","title":"NIP Status and Development","text":""},{"location":"concepts/nips/#status-levels","title":"Status Levels","text":"<ul> <li>Draft: Under active development, subject to changes</li> <li>Proposed: Stable specification, ready for implementation  </li> <li>Final: Widely implemented and stable</li> <li>Deprecated: No longer recommended</li> </ul>"},{"location":"concepts/nips/#development-process","title":"Development Process","text":"<ol> <li>Proposal: Identify need and write initial specification</li> <li>Discussion: Community review and feedback</li> <li>Implementation: Prototype and test</li> <li>Adoption: Multiple implementations and usage</li> <li>Finalization: Specification stabilizes</li> </ol>"},{"location":"concepts/nips/#contributing-to-nips","title":"Contributing to NIPs","text":"<p>How to contribute: - Join discussions on GitHub and Telegram - Propose improvements to existing NIPs - Submit new NIPs for missing functionality - Implement and test proposed specifications - Provide feedback on draft NIPs</p> <p>NIP writing guidelines: - Be specific and unambiguous - Include examples and test cases - Consider security implications - Ensure backward compatibility when possible - Follow existing formatting conventions</p>"},{"location":"concepts/nips/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"concepts/nips/#for-client-developers","title":"For Client Developers","text":"<p>Minimum viable client: - NIP-01 (Basic protocol) - NIP-02 (Contact lists) - NIP-19 (Bech32 encoding) - NIP-25 (Reactions)</p> <p>Enhanced client: - NIP-10 (Text note references) - NIP-17 (Private messages) - NIP-23 (Long-form content) - NIP-57 (Lightning zaps)</p> <p>Advanced client: - NIP-42 (Relay authentication) - NIP-50 (Search) - NIP-65 (Relay lists) - Application-specific NIPs</p>"},{"location":"concepts/nips/#for-relay-operators","title":"For Relay Operators","text":"<p>Basic relay: - NIP-01 (Basic protocol) - NIP-11 (Relay information) - NIP-20 (Command results)</p> <p>Enhanced relay: - NIP-42 (Authentication) - NIP-50 (Search) - NIP-65 (Relay metadata)</p>"},{"location":"concepts/nips/#testing-nip-compatibility","title":"Testing NIP Compatibility","text":""},{"location":"concepts/nips/#client-testing","title":"Client Testing","text":"<pre><code>// Check which NIPs a client supports\nconst supportedNIPs = client.getSupportedNIPs()\nconsole.log('Supported NIPs:', supportedNIPs)\n\n// Test specific functionality\nif (supportedNIPs.includes(57)) {\n  // Client supports zaps\n  enableZapFeatures()\n}\n</code></pre>"},{"location":"concepts/nips/#relay-testing","title":"Relay Testing","text":"<pre><code># Query relay information\ncurl -H \"Accept: application/nostr+json\" https://relay.example.com\n\n# Check supported NIPs\n{\n  \"supported_nips\": [1, 2, 9, 11, 15, 16, 20, 22, 33, 40]\n}\n</code></pre>"},{"location":"concepts/nips/#resources","title":"Resources","text":"<ul> <li>NIPs Repository: github.com/nostr-protocol/nips</li> <li>NIP Discussion: Telegram</li> <li>Implementation Examples: github.com/nostr-protocol/nostr</li> <li>NIP Status Tracker: nips.nostr.com</li> </ul> <p>Stay Updated</p> <p>NIPs are constantly evolving. Follow the GitHub repository and join community discussions to stay informed about new developments and proposals.</p> <p>Implementation Strategy</p> <p>Start with core NIPs (1, 2, 19) and gradually add more advanced features. Focus on interoperability and user experience over feature completeness.</p>"},{"location":"concepts/nips/#next-steps","title":"Next Steps","text":"<p>Now that you understand NIPs, explore:</p> <ul> <li>Relays and Communication - How NIPs work in practice</li> <li>Building Applications - Implementing NIPs in code</li> <li>Advanced Features - Specialized NIPs for your use case</li> </ul>"},{"location":"concepts/nostr-fundamentals/","title":"Nostr Fundamentals: What Does Nostr Stand For?","text":"<p>Nostr stands for \"Notes and Other Stuff Transmitted by Relays\" - a simple yet powerful protocol for decentralized social networking and communication.</p>"},{"location":"concepts/nostr-fundamentals/#breaking-down-the-acronym","title":"Breaking Down the Acronym","text":""},{"location":"concepts/nostr-fundamentals/#n-notes","title":"N - Notes","text":"<p>The primary content type in Nostr. Notes are short messages, similar to tweets, that users publish to share thoughts, updates, and information.</p>"},{"location":"concepts/nostr-fundamentals/#o-other-stuff","title":"O - Other Stuff","text":"<p>Nostr isn't limited to just text notes. \"Other stuff\" includes: - Images and media - Long-form articles - Direct messages - Reactions and likes - Lightning payments (zaps) - Live events and streams - Marketplace listings - And much more...</p>"},{"location":"concepts/nostr-fundamentals/#t-transmitted","title":"T - Transmitted","text":"<p>Data flows through the network via a simple, standardized protocol using WebSockets and JSON.</p>"},{"location":"concepts/nostr-fundamentals/#b-by","title":"B - By","text":"<p>The preposition connecting the transmission method to the infrastructure.</p>"},{"location":"concepts/nostr-fundamentals/#r-relays","title":"R - Relays","text":"<p>The servers that store and forward messages. Unlike traditional social media, no single entity controls all relays.</p>"},{"location":"concepts/nostr-fundamentals/#core-philosophy","title":"Core Philosophy","text":""},{"location":"concepts/nostr-fundamentals/#censorship-resistance","title":"\ud83d\udd13 Censorship Resistance","text":"<p>No single point of control means no single point of failure or censorship.</p>"},{"location":"concepts/nostr-fundamentals/#user-ownership","title":"\ud83d\udd11 User Ownership","text":"<p>Your identity and data belong to you, not to a platform.</p>"},{"location":"concepts/nostr-fundamentals/#interoperability","title":"\ud83c\udf10 Interoperability","text":"<p>All clients can communicate with each other through the same protocol.</p>"},{"location":"concepts/nostr-fundamentals/#simplicity","title":"\u26a1 Simplicity","text":"<p>The protocol is intentionally simple, making it easy to implement and understand.</p>"},{"location":"concepts/nostr-fundamentals/#how-nostr-works-the-big-picture","title":"How Nostr Works: The Big Picture","text":"<pre><code>graph TB\n    A[User with Keys] --&gt; B[Nostr Client]\n    B --&gt; C[Sign Events]\n    C --&gt; D[Send to Relays]\n    D --&gt; E[Relay 1]\n    D --&gt; F[Relay 2]\n    D --&gt; G[Relay 3]\n    E --&gt; H[Other Users]\n    F --&gt; H\n    G --&gt; H\n    H --&gt; I[Read Events]\n    I --&gt; J[Display in Client]</code></pre>"},{"location":"concepts/nostr-fundamentals/#1-identity-layer","title":"1. Identity Layer","text":"<ul> <li>Users generate cryptographic key pairs</li> <li>Public key = your identity</li> <li>Private key = your signature authority</li> </ul>"},{"location":"concepts/nostr-fundamentals/#2-content-layer","title":"2. Content Layer","text":"<ul> <li>Everything is an \"event\" (note, reaction, profile update, etc.)</li> <li>Events are signed with your private key</li> <li>Events have standardized formats (defined by NIPs)</li> </ul>"},{"location":"concepts/nostr-fundamentals/#3-network-layer","title":"3. Network Layer","text":"<ul> <li>Events are sent to multiple relays</li> <li>Relays store and forward events</li> <li>Clients connect to relays to read/write events</li> </ul>"},{"location":"concepts/nostr-fundamentals/#4-application-layer","title":"4. Application Layer","text":"<ul> <li>Clients provide user interfaces</li> <li>Different clients can have different features</li> <li>All clients can interoperate through the protocol</li> </ul>"},{"location":"concepts/nostr-fundamentals/#key-concepts","title":"Key Concepts","text":""},{"location":"concepts/nostr-fundamentals/#events","title":"Events","text":"<p>Everything in Nostr is an \"event\" - a JSON object with specific fields:</p> <pre><code>{\n  \"id\": \"unique-event-identifier\",\n  \"pubkey\": \"author-public-key\", \n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"cryptographic-signature\"\n}\n</code></pre>"},{"location":"concepts/nostr-fundamentals/#event-kinds","title":"Event Kinds","text":"<p>Different types of content have different \"kind\" numbers:</p> <ul> <li>Kind 0: User metadata (profile info)</li> <li>Kind 1: Text notes (like tweets)</li> <li>Kind 3: Contact lists (who you follow)</li> <li>Kind 4: Encrypted direct messages</li> <li>Kind 7: Reactions (likes, etc.)</li> <li>And many more...</li> </ul>"},{"location":"concepts/nostr-fundamentals/#cryptographic-identity","title":"Cryptographic Identity","text":"<p>Your identity is your public key:</p> <pre><code>npub1xyz... (human-readable format)\n</code></pre> <p>Your private key is your password: <pre><code>nsec1abc... (keep this secret!)\n</code></pre></p>"},{"location":"concepts/nostr-fundamentals/#relays","title":"Relays","text":"<p>Servers that: - Store events temporarily or permanently - Forward events to connected clients - Can have their own policies and rules - Are operated by different entities</p>"},{"location":"concepts/nostr-fundamentals/#what-makes-nostr-different","title":"What Makes Nostr Different?","text":""},{"location":"concepts/nostr-fundamentals/#traditional-social-media","title":"Traditional Social Media","text":"<p><pre><code>User \u2192 Platform \u2192 Other Users\n</code></pre> - Platform controls everything - Single point of failure - Platform owns your data - Platform can censor or ban</p>"},{"location":"concepts/nostr-fundamentals/#nostr","title":"Nostr","text":"<p><pre><code>User \u2192 Multiple Relays \u2192 Other Users\n</code></pre> - No central control - Multiple paths for data - You own your identity and data - Censorship requires coordinated effort</p>"},{"location":"concepts/nostr-fundamentals/#nostr-vs-other-protocols","title":"Nostr vs Other Protocols","text":""},{"location":"concepts/nostr-fundamentals/#vs-mastodonactivitypub","title":"vs Mastodon/ActivityPub","text":"<ul> <li>Nostr: Simple, cryptographic identity, relay-based</li> <li>Mastodon: Complex, server-based identity, federation</li> </ul>"},{"location":"concepts/nostr-fundamentals/#vs-bitcoin","title":"vs Bitcoin","text":"<ul> <li>Nostr: Communication protocol, uses similar cryptography</li> <li>Bitcoin: Money protocol, proof-of-work consensus</li> </ul>"},{"location":"concepts/nostr-fundamentals/#vs-email","title":"vs Email","text":"<ul> <li>Nostr: Real-time, public by default, cryptographic identity</li> <li>Email: Store-and-forward, private by default, domain-based identity</li> </ul>"},{"location":"concepts/nostr-fundamentals/#the-nostr-ecosystem","title":"The Nostr Ecosystem","text":""},{"location":"concepts/nostr-fundamentals/#clients-user-interfaces","title":"Clients (User Interfaces)","text":"<ul> <li>Damus (iOS) - Native mobile experience</li> <li>Amethyst (Android) - Feature-rich Android client  </li> <li>Iris (Web) - Browser-based client</li> <li>Nostrudel (Web) - Advanced web client</li> <li>Primal (Multi-platform) - Caching and discovery</li> </ul>"},{"location":"concepts/nostr-fundamentals/#relays-infrastructure","title":"Relays (Infrastructure)","text":"<ul> <li>Public relays - Open to everyone</li> <li>Private relays - Restricted access</li> <li>Paid relays - Premium features</li> <li>Specialized relays - Specific content types</li> </ul>"},{"location":"concepts/nostr-fundamentals/#tools-and-services","title":"Tools and Services","text":"<ul> <li>Lightning integration - Bitcoin payments</li> <li>Media hosting - Image and video storage</li> <li>Search engines - Content discovery</li> <li>Analytics - Network insights</li> </ul>"},{"location":"concepts/nostr-fundamentals/#benefits-of-nostr","title":"Benefits of Nostr","text":""},{"location":"concepts/nostr-fundamentals/#for-users","title":"For Users","text":"<ul> <li>Own your identity - No platform can take it away</li> <li>Choose your experience - Pick clients that suit you</li> <li>Avoid censorship - Multiple relays provide redundancy</li> <li>Portable social graph - Take your followers anywhere</li> </ul>"},{"location":"concepts/nostr-fundamentals/#for-developers","title":"For Developers","text":"<ul> <li>Simple protocol - Easy to implement</li> <li>No API keys - Direct relay access</li> <li>Innovation freedom - Build any features you want</li> <li>Interoperability - Works with all other clients</li> </ul>"},{"location":"concepts/nostr-fundamentals/#for-society","title":"For Society","text":"<ul> <li>Decentralization - Reduces big tech power</li> <li>Free speech - Harder to censor globally</li> <li>Innovation - Permissionless development</li> <li>Resilience - No single point of failure</li> </ul>"},{"location":"concepts/nostr-fundamentals/#common-misconceptions","title":"Common Misconceptions","text":""},{"location":"concepts/nostr-fundamentals/#nostr-is-just-another-twitter-clone","title":"\u274c \"Nostr is just another Twitter clone\"","text":"<p>\u2705 Nostr is a protocol that can support many types of applications, not just social media.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-completely-anonymous","title":"\u274c \"Nostr is completely anonymous\"","text":"<p>\u2705 Nostr provides pseudonymity through public keys, but additional privacy measures may be needed.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-only-for-bitcoin-people","title":"\u274c \"Nostr is only for Bitcoin people\"","text":"<p>\u2705 While Bitcoin integration is popular, Nostr is useful for anyone wanting decentralized communication.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-too-technical-for-normal-users","title":"\u274c \"Nostr is too technical for normal users\"","text":"<p>\u2705 While the underlying protocol is technical, user-friendly clients make it accessible to everyone.</p>"},{"location":"concepts/nostr-fundamentals/#getting-started-with-nostr","title":"Getting Started with Nostr","text":""},{"location":"concepts/nostr-fundamentals/#1-choose-a-client","title":"1. Choose a Client","text":"<p>Pick a user-friendly client like Damus (iOS), Amethyst (Android), or Iris (web).</p>"},{"location":"concepts/nostr-fundamentals/#2-generate-keys","title":"2. Generate Keys","text":"<p>Most clients will generate keys for you automatically.</p>"},{"location":"concepts/nostr-fundamentals/#3-set-up-profile","title":"3. Set Up Profile","text":"<p>Add your name, bio, and profile picture.</p>"},{"location":"concepts/nostr-fundamentals/#4-find-people","title":"4. Find People","text":"<p>Follow interesting accounts and join conversations.</p>"},{"location":"concepts/nostr-fundamentals/#5-start-posting","title":"5. Start Posting","text":"<p>Share your thoughts and engage with the community.</p>"},{"location":"concepts/nostr-fundamentals/#the-future-of-nostr","title":"The Future of Nostr","text":""},{"location":"concepts/nostr-fundamentals/#short-term","title":"Short Term","text":"<ul> <li>Better user experience</li> <li>More client features</li> <li>Improved relay infrastructure</li> <li>Enhanced privacy options</li> </ul>"},{"location":"concepts/nostr-fundamentals/#long-term","title":"Long Term","text":"<ul> <li>Integration with other protocols</li> <li>New application types beyond social media</li> <li>Global adoption as communication standard</li> <li>Economic layers and monetization</li> </ul>"},{"location":"concepts/nostr-fundamentals/#technical-deep-dive","title":"Technical Deep Dive","text":""},{"location":"concepts/nostr-fundamentals/#protocol-simplicity","title":"Protocol Simplicity","text":"<p>Nostr's power comes from its simplicity:</p> <pre><code>// The entire protocol in pseudocode\nfunction publishEvent(event, relays) {\n  const signedEvent = sign(event, privateKey)\n  relays.forEach(relay =&gt; relay.send(signedEvent))\n}\n\nfunction subscribeToEvents(filter, relays) {\n  relays.forEach(relay =&gt; {\n    relay.subscribe(filter, (event) =&gt; {\n      if (verify(event.signature, event.pubkey)) {\n        displayEvent(event)\n      }\n    })\n  })\n}\n</code></pre>"},{"location":"concepts/nostr-fundamentals/#cryptographic-foundation","title":"Cryptographic Foundation","text":"<ul> <li>Schnorr signatures (same as Bitcoin)</li> <li>secp256k1 elliptic curve</li> <li>SHA-256 hashing</li> <li>NIP-19 encoding for human-readable keys</li> </ul>"},{"location":"concepts/nostr-fundamentals/#resources-for-learning-more","title":"Resources for Learning More","text":""},{"location":"concepts/nostr-fundamentals/#official-documentation","title":"Official Documentation","text":"<ul> <li>Nostr Protocol</li> <li>NIPs Repository</li> </ul>"},{"location":"concepts/nostr-fundamentals/#community","title":"Community","text":"<ul> <li>Nostr Telegram</li> <li>Reddit r/nostr</li> <li>Nostr on Nostr</li> </ul>"},{"location":"concepts/nostr-fundamentals/#development","title":"Development","text":"<ul> <li>Awesome Nostr</li> <li>Nostr Tools</li> <li>Developer Chat</li> </ul> <p>Nostr's Vision</p> <p>\"The simplest open protocol that is able to create a censorship-resistant global 'social' network once and for all.\" - fiatjaf (Nostr creator)</p> <p>Remember</p> <p>Nostr is not just a social network - it's a communication protocol that can power many different types of applications. The social media use case is just the beginning! </p>"},{"location":"concepts/relays/","title":"Relays: The Infrastructure of Nostr","text":"<p>Learning Objectives</p> <p>After this lesson, you'll understand:</p> <ul> <li>What relays are and how they work</li> <li>The relay-client communication protocol</li> <li>Different types of relays and their purposes</li> <li>How to choose and manage relays</li> <li>Relay policies and limitations</li> </ul>"},{"location":"concepts/relays/#what-are-relays","title":"What are Relays?","text":"<p>Relays are the servers that form the backbone of the Nostr network. They store, forward, and serve events to clients. Unlike traditional social media where one company controls all the servers, Nostr's relay system is decentralized - anyone can run a relay.</p>"},{"location":"concepts/relays/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Simple servers: Store and forward JSON events</li> <li>WebSocket-based: Real-time bidirectional communication</li> <li>No complex logic: Focus on data storage and delivery</li> <li>Interchangeable: Clients can use any relay</li> <li>Independently operated: Different people run different relays</li> </ul>"},{"location":"concepts/relays/#how-relays-work","title":"How Relays Work","text":""},{"location":"concepts/relays/#basic-functions","title":"Basic Functions","text":"<ol> <li>Accept events from clients</li> <li>Store events (temporarily or permanently)</li> <li>Forward events to subscribed clients</li> <li>Filter requests based on client queries</li> <li>Enforce policies (rate limiting, content rules, etc.)</li> </ol>"},{"location":"concepts/relays/#relay-client-communication","title":"Relay-Client Communication","text":"<p>Communication happens over WebSocket connections using simple JSON messages:</p> <pre><code>graph TB\n    A[Client] &lt;--&gt;|WebSocket| B[Relay]\n    B --&gt; C[Event Storage]\n    B --&gt; D[Other Clients]\n    A --&gt; E[Publish Events]\n    A --&gt; F[Subscribe to Events]\n    A --&gt; G[Query Events]</code></pre>"},{"location":"concepts/relays/#message-types","title":"Message Types","text":""},{"location":"concepts/relays/#client-to-relay-messages","title":"Client to Relay Messages","text":""},{"location":"concepts/relays/#event-publishing-events","title":"EVENT - Publishing Events","text":"<pre><code>[\"EVENT\", {\n  \"id\": \"event-id\",\n  \"pubkey\": \"author-pubkey\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"signature\"\n}]\n</code></pre>"},{"location":"concepts/relays/#req-subscribing-to-events","title":"REQ - Subscribing to Events","text":"<pre><code>[\"REQ\", \"subscription-id\", {\n  \"kinds\": [1],\n  \"authors\": [\"pubkey1\", \"pubkey2\"],\n  \"since\": 1234567890,\n  \"limit\": 100\n}]\n</code></pre>"},{"location":"concepts/relays/#close-closing-subscriptions","title":"CLOSE - Closing Subscriptions","text":"<pre><code>[\"CLOSE\", \"subscription-id\"]\n</code></pre>"},{"location":"concepts/relays/#auth-authentication","title":"AUTH - Authentication","text":"<pre><code>[\"AUTH\", {\n  \"id\": \"challenge-event-id\",\n  \"pubkey\": \"client-pubkey\",\n  \"created_at\": 1234567890,\n  \"kind\": 22242,\n  \"tags\": [[\"challenge\", \"challenge-string\"]],\n  \"content\": \"\",\n  \"sig\": \"signature\"\n}]\n</code></pre>"},{"location":"concepts/relays/#count-requesting-event-counts","title":"COUNT - Requesting Event Counts","text":"<pre><code>[\"COUNT\", \"subscription-id\", {\n  \"kinds\": [1],\n  \"authors\": [\"pubkey\"]\n}]\n</code></pre>"},{"location":"concepts/relays/#relay-to-client-messages","title":"Relay to Client Messages","text":""},{"location":"concepts/relays/#event-sending-events","title":"EVENT - Sending Events","text":"<pre><code>[\"EVENT\", \"subscription-id\", {\n  \"id\": \"event-id\",\n  \"pubkey\": \"author-pubkey\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"signature\"\n}]\n</code></pre>"},{"location":"concepts/relays/#eose-end-of-stored-events","title":"EOSE - End of Stored Events","text":"<pre><code>[\"EOSE\", \"subscription-id\"]\n</code></pre>"},{"location":"concepts/relays/#ok-event-acceptance-response","title":"OK - Event Acceptance Response","text":"<pre><code>[\"OK\", \"event-id\", true, \"\"]\n[\"OK\", \"event-id\", false, \"blocked: content policy violation\"]\n</code></pre>"},{"location":"concepts/relays/#closed-subscription-closed","title":"CLOSED - Subscription Closed","text":"<pre><code>[\"CLOSED\", \"subscription-id\", \"rate-limited: too many subscriptions\"]\n</code></pre>"},{"location":"concepts/relays/#notice-human-readable-messages","title":"NOTICE - Human-Readable Messages","text":"<pre><code>[\"NOTICE\", \"This relay requires authentication\"]\n</code></pre>"},{"location":"concepts/relays/#auth-authentication-challenge","title":"AUTH - Authentication Challenge","text":"<pre><code>[\"AUTH\", \"challenge-string\"]\n</code></pre>"},{"location":"concepts/relays/#count-event-count-response","title":"COUNT - Event Count Response","text":"<pre><code>[\"COUNT\", \"subscription-id\", {\"count\": 42}]\n</code></pre>"},{"location":"concepts/relays/#relay-information-document-nip-11","title":"Relay Information Document (NIP-11)","text":"<p>Relays can provide metadata about their capabilities:</p> <pre><code>curl -H \"Accept: application/nostr+json\" https://relay.example.com\n</code></pre> <pre><code>{\n  \"name\": \"My Nostr Relay\",\n  \"description\": \"A relay for the Nostr community\",\n  \"pubkey\": \"relay-admin-pubkey\",\n  \"contact\": \"admin@relay.example.com\",\n  \"supported_nips\": [1, 2, 9, 11, 12, 15, 16, 20, 22],\n  \"software\": \"strfry\",\n  \"version\": \"0.9.6\",\n  \"limitation\": {\n    \"max_message_length\": 16384,\n    \"max_subscriptions\": 300,\n    \"max_limit\": 5000,\n    \"max_subid_length\": 100,\n    \"max_event_tags\": 100,\n    \"max_content_length\": 8196,\n    \"min_pow_difficulty\": 0,\n    \"auth_required\": false,\n    \"payment_required\": false,\n    \"restricted_writes\": false\n  },\n  \"relay_countries\": [\"US\", \"CA\"],\n  \"language_tags\": [\"en\", \"en-419\"],\n  \"tags\": [\"sfw-only\", \"bitcoin-only\"],\n  \"posting_policy\": \"https://relay.example.com/policy\"\n}\n</code></pre>"},{"location":"concepts/relays/#key-information-fields","title":"Key Information Fields","text":""},{"location":"concepts/relays/#basic-info","title":"Basic Info","text":"<ul> <li><code>name</code>: Human-readable relay name</li> <li><code>description</code>: Detailed information about the relay</li> <li><code>pubkey</code>: Admin's public key for contact</li> <li><code>contact</code>: Alternative contact method</li> <li><code>software</code>: Relay implementation name</li> <li><code>version</code>: Software version</li> </ul>"},{"location":"concepts/relays/#capabilities","title":"Capabilities","text":"<ul> <li><code>supported_nips</code>: Which NIPs are implemented</li> <li><code>limitation</code>: Technical limits and requirements</li> <li><code>relay_countries</code>: Legal jurisdictions</li> <li><code>language_tags</code>: Primary languages</li> <li><code>tags</code>: Content policies and focus areas</li> </ul>"},{"location":"concepts/relays/#types-of-relays","title":"Types of Relays","text":""},{"location":"concepts/relays/#by-access-model","title":"By Access Model","text":""},{"location":"concepts/relays/#public-relays","title":"Public Relays","text":"<ul> <li>Open to everyone</li> <li>No registration required</li> <li>May have rate limits</li> <li>Examples: <code>relay.damus.io</code>, <code>nos.lol</code></li> </ul>"},{"location":"concepts/relays/#private-relays","title":"Private Relays","text":"<ul> <li>Restricted access</li> <li>Invitation or whitelist only</li> <li>Often for specific communities</li> <li>Examples: Family relays, corporate relays</li> </ul>"},{"location":"concepts/relays/#paid-relays","title":"Paid Relays","text":"<ul> <li>Require payment for access</li> <li>Better spam protection</li> <li>Often higher reliability</li> <li>May offer premium features</li> </ul>"},{"location":"concepts/relays/#by-purpose","title":"By Purpose","text":""},{"location":"concepts/relays/#general-purpose","title":"General Purpose","text":"<ul> <li>Accept all kinds of events</li> <li>Serve broad communities</li> <li>Most common type</li> </ul>"},{"location":"concepts/relays/#specialized-relays","title":"Specialized Relays","text":"<ul> <li>Focus on specific event kinds</li> <li>Examples:</li> <li>Media relays (images, videos)</li> <li>Long-form content relays</li> <li>Lightning zap relays</li> <li>Marketplace relays</li> </ul>"},{"location":"concepts/relays/#personal-relays","title":"Personal Relays","text":"<ul> <li>Run by individuals</li> <li>Store personal backup</li> <li>Share with friends/family</li> <li>Complete data control</li> </ul>"},{"location":"concepts/relays/#by-retention-policy","title":"By Retention Policy","text":""},{"location":"concepts/relays/#archive-relays","title":"Archive Relays","text":"<ul> <li>Store events permanently</li> <li>Historical data preservation</li> <li>May charge for long-term storage</li> </ul>"},{"location":"concepts/relays/#ephemeral-relays","title":"Ephemeral Relays","text":"<ul> <li>Short-term storage</li> <li>Focus on real-time communication</li> <li>Lower storage costs</li> </ul>"},{"location":"concepts/relays/#filtered-relays","title":"Filtered Relays","text":"<ul> <li>Selective storage</li> <li>Content moderation</li> <li>Topic-specific focus</li> </ul>"},{"location":"concepts/relays/#running-your-own-relay","title":"Running Your Own Relay","text":""},{"location":"concepts/relays/#why-run-a-relay","title":"Why Run a Relay?","text":""},{"location":"concepts/relays/#personal-benefits","title":"Personal Benefits","text":"<ul> <li>Complete data control</li> <li>Custom policies</li> <li>Data backup and preservation</li> <li>Privacy and security</li> <li>No dependence on third parties</li> </ul>"},{"location":"concepts/relays/#community-benefits","title":"Community Benefits","text":"<ul> <li>Support network decentralization</li> <li>Provide service to community</li> <li>Enable free speech</li> <li>Reduce censorship risks</li> </ul>"},{"location":"concepts/relays/#popular-relay-software","title":"Popular Relay Software","text":""},{"location":"concepts/relays/#strfry","title":"strfry","text":"<ul> <li>High-performance C++ implementation</li> <li>Efficient storage and indexing</li> <li>Production-ready</li> <li>Active development</li> </ul> <pre><code># Install strfry\ngit clone https://github.com/hoytech/strfry.git\ncd strfry\nmake setup-golpe\nmake -j4\n</code></pre>"},{"location":"concepts/relays/#nostream","title":"nostream","text":"<ul> <li>TypeScript/Node.js implementation</li> <li>Easy to modify and extend</li> <li>Good for development</li> <li>PostgreSQL backend</li> </ul> <pre><code># Install nostream\ngit clone https://github.com/Cameri/nostream.git\ncd nostream\nnpm install\nnpm run build\n</code></pre>"},{"location":"concepts/relays/#khatru","title":"khatru","text":"<ul> <li>Go implementation</li> <li>Simple and lightweight</li> <li>Easy to deploy</li> <li>Good performance</li> </ul> <pre><code># Install khatru\ngo install github.com/fiatjaf/khatru@latest\n</code></pre>"},{"location":"concepts/relays/#relay-configuration","title":"Relay Configuration","text":""},{"location":"concepts/relays/#basic-configuration","title":"Basic Configuration","text":"<pre><code># strfry.conf\ndb = \"./strfry-db/\"\nbind = \"0.0.0.0:7777\"\nnofiles = 1000000\n\nrelay:\n  name: \"My Personal Relay\"\n  description: \"A relay for my friends and family\"\n  pubkey: \"your-pubkey-here\"\n  contact: \"admin@myrelay.com\"\n\nrejectFilters:\n  - kinds: []\n    authors: []\n    tags:\n      \"#t\": [\"spam\", \"inappropriate\"]\n</code></pre>"},{"location":"concepts/relays/#access-control","title":"Access Control","text":"<pre><code># Authentication required\nauth:\n  required: true\n  whitelist:\n    - \"pubkey1\"\n    - \"pubkey2\"\n\n# Payment required\npayment:\n  required: true\n  amount: 1000  # sats per month\n  bolt11: \"payment-address\"\n</code></pre>"},{"location":"concepts/relays/#hosting-options","title":"Hosting Options","text":""},{"location":"concepts/relays/#self-hosted","title":"Self-Hosted","text":"<ul> <li>Complete control</li> <li>Custom hardware</li> <li>Network requirements</li> <li>Maintenance responsibility</li> </ul>"},{"location":"concepts/relays/#vpscloud","title":"VPS/Cloud","text":"<ul> <li>Professional hosting</li> <li>Managed infrastructure</li> <li>Scalable resources</li> <li>Geographic distribution</li> </ul>"},{"location":"concepts/relays/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM ubuntu:22.04\n\n# Install dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    git \\\n    pkg-config\n\n# Clone and build strfry\nRUN git clone https://github.com/hoytech/strfry.git\nWORKDIR /strfry\nRUN make setup-golpe &amp;&amp; make -j4\n\n# Configure and run\nCOPY strfry.conf .\nEXPOSE 7777\nCMD [\"./strfry\", \"relay\"]\n</code></pre>"},{"location":"concepts/relays/#next-steps","title":"Next Steps","text":"<p>Now that you understand relays, explore:</p> <ul> <li>Events and Messages - What relays store and forward</li> <li>Building Applications - How to work with relays in code</li> <li>Advanced Topics - Specialized relay features</li> </ul> <p>Getting Started</p> <p>Start by understanding how to use relays as a client, then experiment with running your own relay for learning. Consider the community and economic factors when deciding whether to run a public relay.</p>"},{"location":"concepts/zaps/","title":"Understanding Zaps","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What zaps are and why they're revolutionary</li> <li>How zaps work technically (NIP-57)</li> <li>Different types of zaps and their use cases</li> <li>The economics and incentives zaps create</li> <li>Privacy considerations with zaps</li> </ul>"},{"location":"concepts/zaps/#what-are-zaps","title":"What Are Zaps?","text":"<p>Zaps are instant Bitcoin payments sent over the Lightning Network that are cryptographically tied to Nostr events. They represent a fundamental shift from traditional social media \"likes\" to value-for-value interactions.</p> <p>Value-for-Value</p> <p>Instead of giving away your attention for free to advertisers, zaps let you directly support creators and signal quality content with real economic value.</p>"},{"location":"concepts/zaps/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>\u26a1 Instant: Payments settle in milliseconds</li> <li>\ud83d\udd12 Cryptographically Verified: Tied to specific Nostr events</li> <li>\ud83d\udcb0 Micro-payments: Can be as small as 1 satoshi (0.00000001 BTC)</li> <li>\ud83c\udf0d Global: Work anywhere in the world</li> <li>\ud83d\udd13 Permissionless: No intermediaries or gatekeepers</li> </ul>"},{"location":"concepts/zaps/#how-zaps-work-nip-57","title":"How Zaps Work (NIP-57)","text":"<p>Zaps are defined by NIP-57 (Nostr Implementation Possibility 57) and involve a sophisticated dance between your Nostr client, Lightning wallet, and the recipient's Lightning service.</p>"},{"location":"concepts/zaps/#the-zap-flow","title":"The Zap Flow","text":"<pre><code>sequenceDiagram\n    participant User as You\n    participant Client as Nostr Client\n    participant Wallet as Lightning Wallet\n    participant LNURL as Recipient LNURL\n    participant Relay as Nostr Relay\n\n    User-&gt;&gt;Client: Click Zap on post\n    Client-&gt;&gt;LNURL: Request zap endpoint\n    LNURL--&gt;&gt;Client: Return payment request template\n    Client-&gt;&gt;Wallet: Generate invoice for amount\n    Wallet--&gt;&gt;Client: Lightning invoice\n    Client-&gt;&gt;LNURL: Send invoice + Nostr event\n    LNURL-&gt;&gt;LNURL: Process payment\n    LNURL-&gt;&gt;Relay: Publish zap receipt (kind 9735)\n    Relay--&gt;&gt;Client: Zap receipt appears\n    Client-&gt;&gt;User: Show zap confirmation</code></pre>"},{"location":"concepts/zaps/#technical-components","title":"Technical Components","text":"<p>1. Lightning Address - Human-readable identifier (like email) - Example: <code>alice@getalby.com</code> - Resolves to LNURL-pay endpoint</p> <p>2. LNURL-pay - Protocol for requesting Lightning payments - Handles the payment request generation - Returns payment confirmation</p> <p>3. Zap Request (Kind 9734) - Nostr event that describes the intended zap - Contains recipient, amount, and optional message - Signed by the sender's private key</p> <p>4. Zap Receipt (Kind 9735) - Proof that payment was made - Published by recipient's Lightning service - Contains payment preimage as proof</p>"},{"location":"concepts/zaps/#types-of-zaps","title":"Types of Zaps","text":""},{"location":"concepts/zaps/#regular-zaps","title":"Regular Zaps","text":"<p>Standard zaps that appear publicly on posts:</p> <pre><code>{\n  \"kind\": 9735,\n  \"content\": \"Great post! \u26a1\",\n  \"tags\": [\n    [\"bolt11\", \"lnbc...\"],\n    [\"description\", \"...\"],\n    [\"p\", \"recipient_pubkey\"],\n    [\"e\", \"event_id\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/zaps/#anonymous-zaps","title":"Anonymous Zaps","text":"<p>Zaps without revealing the sender's identity: - Payment is made but sender info is hidden - Useful for privacy-conscious users - Still cryptographically verifiable</p>"},{"location":"concepts/zaps/#private-zaps","title":"Private Zaps","text":"<p>Zaps that don't appear publicly: - Only sender and recipient know about them - No public zap receipt published - Maximum privacy</p>"},{"location":"concepts/zaps/#zap-goals","title":"Zap Goals","text":"<p>Crowdfunding mechanism using zaps: - Set a target amount for a project - Community can zap towards the goal - Transparent progress tracking</p>"},{"location":"concepts/zaps/#the-economics-of-zaps","title":"The Economics of Zaps","text":""},{"location":"concepts/zaps/#micro-economics","title":"Micro-Economics","text":"<p>Zaps enable micro-transactions that weren't possible before:</p> <ul> <li>1 sat = ~$0.0003 (varies with Bitcoin price)</li> <li>21 sats = Popular \"Bitcoin number\" </li> <li>100 sats = Meaningful appreciation</li> <li>1,000 sats = Strong support</li> <li>10,000+ sats = Significant contribution</li> </ul>"},{"location":"concepts/zaps/#creator-incentives","title":"Creator Incentives","text":"<p>Quality Content Rises - Good content gets zapped more - Creators earn directly from their audience - No need for advertising or sponsorships</p> <p>Immediate Feedback - Instant economic signal of content value - More meaningful than likes or hearts - Encourages thoughtful posting</p> <p>Global Monetization - Anyone, anywhere can earn Bitcoin - No geographic restrictions - No minimum payout thresholds</p>"},{"location":"concepts/zaps/#network-effects","title":"Network Effects","text":"<p>Value Flows to Value - Bitcoin naturally flows to valuable content - Creates positive feedback loops - Rewards genuine contribution over engagement farming</p> <p>Spam Reduction - Small cost to interact reduces spam - Economic incentive for quality - Self-regulating community standards</p>"},{"location":"concepts/zaps/#zap-etiquette-and-culture","title":"Zap Etiquette and Culture","text":""},{"location":"concepts/zaps/#common-zap-amounts","title":"Common Zap Amounts","text":"Amount Meaning Use Case 1 sat Acknowledgment \"I saw this\" 21 sats Bitcoin appreciation Standard like 100 sats Good content Quality post 500 sats Great content Excellent post 1,000+ sats Exceptional Outstanding work 10,000+ sats Support Major contribution"},{"location":"concepts/zaps/#when-to-zap","title":"When to Zap","text":"<p>\u2705 Good Times to Zap: - Content that taught you something - Posts that made you laugh - Helpful answers to questions - Original research or insights - Supporting creators you appreciate</p> <p>\u274c Avoid Zapping: - Content you disagree with (unless constructive) - Spam or low-effort posts - Just to get attention - Your own posts (generally frowned upon)</p>"},{"location":"concepts/zaps/#zap-messages","title":"Zap Messages","text":"<p>Many zaps include short messages: - Keep them positive and constructive - Emoji are popular (\u26a1\ud83d\ude80\ud83d\udd25\ud83d\udc9c) - Brief explanations of why you zapped - Encouragement for creators</p>"},{"location":"concepts/zaps/#privacy-considerations","title":"Privacy Considerations","text":""},{"location":"concepts/zaps/#whats-public","title":"What's Public","text":"<ul> <li>Zap amount (usually)</li> <li>Recipient (always)</li> <li>Associated post (if applicable)</li> <li>Zap message (if included)</li> </ul>"},{"location":"concepts/zaps/#what-can-be-private","title":"What Can Be Private","text":"<ul> <li>Sender identity (with anonymous zaps)</li> <li>Payment details (Lightning privacy)</li> <li>Exact timing (some obfuscation possible)</li> </ul>"},{"location":"concepts/zaps/#privacy-tips","title":"Privacy Tips","text":"<ul> <li>Use different Lightning addresses for different purposes</li> <li>Consider anonymous zaps for sensitive topics</li> <li>Be aware that payment patterns can be analyzed</li> <li>Lightning payments are more private than on-chain Bitcoin</li> </ul>"},{"location":"concepts/zaps/#setting-up-zaps","title":"Setting Up Zaps","text":""},{"location":"concepts/zaps/#requirements","title":"Requirements","text":"<ol> <li>Lightning Wallet (Alby, Wallet of Satoshi, etc.)</li> <li>Lightning Address (yourname@getalby.com)</li> <li>Nostr Client that supports zaps</li> <li>Some Bitcoin to send zaps</li> </ol>"},{"location":"concepts/zaps/#configuration-steps","title":"Configuration Steps","text":"<ol> <li>Set up Lightning wallet (see Wallet Setup Guide)</li> <li>Add Lightning address to Nostr profile</li> <li>Test with small zaps to yourself or friends</li> <li>Start zapping content you appreciate</li> </ol>"},{"location":"concepts/zaps/#advanced-zap-features","title":"Advanced Zap Features","text":""},{"location":"concepts/zaps/#zap-splits","title":"Zap Splits","text":"<p>Some clients support splitting zaps: - Send to multiple recipients - Useful for collaborations - Automatic revenue sharing</p>"},{"location":"concepts/zaps/#recurring-zaps","title":"Recurring Zaps","text":"<p>Subscription-like zaps: - Regular payments to creators - Automated support - Patreon-like functionality</p>"},{"location":"concepts/zaps/#conditional-zaps","title":"Conditional Zaps","text":"<p>Smart contract-like features: - Zaps that unlock at certain conditions - Goal-based releases - Time-locked payments</p>"},{"location":"concepts/zaps/#troubleshooting-zaps","title":"Troubleshooting Zaps","text":""},{"location":"concepts/zaps/#common-issues","title":"Common Issues","text":"<p>\"Zap failed to send\" - Check wallet balance - Verify Lightning address is correct - Try smaller amount - Check internet connection</p> <p>\"No zap button visible\" - Recipient may not have Lightning address set - Client may not support zaps - Check if zaps are enabled in settings</p> <p>\"Zap not appearing\" - May take a few seconds to process - Check if using compatible relays - Refresh the client</p>"},{"location":"concepts/zaps/#best-practices","title":"Best Practices","text":"<ul> <li>Start with small amounts while learning</li> <li>Keep some Bitcoin in your Lightning wallet</li> <li>Test zaps with friends first</li> <li>Monitor your spending</li> </ul>"},{"location":"concepts/zaps/#the-future-of-zaps","title":"The Future of Zaps","text":""},{"location":"concepts/zaps/#emerging-trends","title":"Emerging Trends","text":"<ul> <li>Zap-to-earn games and applications</li> <li>Algorithmic zapping based on preferences</li> <li>Cross-platform zaps beyond Nostr</li> <li>Integration with traditional payments</li> </ul>"},{"location":"concepts/zaps/#potential-developments","title":"Potential Developments","text":"<ul> <li>Stable coin zaps for price stability</li> <li>Programmable zaps with smart contracts</li> <li>Zap analytics for creators</li> <li>Enterprise zap solutions</li> </ul>"},{"location":"concepts/zaps/#impact-on-social-media","title":"Impact on Social Media","text":"<p>Zaps represent a fundamental shift in how we think about social media:</p>"},{"location":"concepts/zaps/#from-attention-economy-to-value-economy","title":"From Attention Economy to Value Economy","text":"<ul> <li>Traditional: Your attention is the product sold to advertisers</li> <li>Zaps: Your attention has direct economic value you control</li> </ul>"},{"location":"concepts/zaps/#from-engagement-farming-to-quality-content","title":"From Engagement Farming to Quality Content","text":"<ul> <li>Traditional: Optimize for clicks, views, time spent</li> <li>Zaps: Optimize for genuine value and appreciation</li> </ul>"},{"location":"concepts/zaps/#from-platform-lock-in-to-creator-freedom","title":"From Platform Lock-in to Creator Freedom","text":"<ul> <li>Traditional: Platform controls monetization and can ban you</li> <li>Zaps: Direct peer-to-peer payments, no intermediaries</li> </ul>"},{"location":"concepts/zaps/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What makes zaps different from traditional social media \"likes\"?</li> <li>What is NIP-57 and why is it important?</li> <li>What are the three types of zaps in terms of privacy?</li> <li>How do zaps change the incentives for content creators?</li> </ol> Answers <ol> <li>Zaps involve real Bitcoin payments that provide economic value, while likes are free and provide no direct value to creators</li> <li>NIP-57 is the Nostr Implementation Possibility that defines how zaps work technically, ensuring interoperability between clients and wallets</li> <li>Regular zaps (public), anonymous zaps (payment visible but sender hidden), and private zaps (completely private)</li> <li>Zaps create direct economic incentives for quality content, allowing creators to earn immediately from their audience without relying on advertising or platform monetization</li> </ol>      Start Building \u2192"},{"location":"getting-started/nostr-tools/","title":"Development Tools and Infrastructure","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>Essential development tools for Nostr protocol implementation</li> <li>Command-line utilities for network analysis and debugging</li> <li>Programming libraries and frameworks for different languages</li> <li>Infrastructure monitoring and relay management tools</li> </ul>"},{"location":"getting-started/nostr-tools/#development-ecosystem-overview","title":"Development Ecosystem Overview","text":"<p>The Nostr development ecosystem consists of multiple tool categories designed for different aspects of protocol implementation, from client development to network infrastructure management. Understanding these tools enables efficient development workflows and robust system deployment.</p>"},{"location":"getting-started/nostr-tools/#protocol-implementation-libraries","title":"Protocol Implementation Libraries","text":""},{"location":"getting-started/nostr-tools/#javascripttypescript-ecosystem","title":"JavaScript/TypeScript Ecosystem","text":""},{"location":"getting-started/nostr-tools/#nostr-tools","title":"nostr-tools","text":"<p>Primary Features: - Core protocol implementation with event creation, validation, and signing - WebSocket relay communication management - Cryptographic key generation and management utilities - NIP implementation support for protocol extensions</p> <p>Installation and Basic Usage: <pre><code>npm install nostr-tools\n</code></pre></p> <pre><code>import { generatePrivateKey, getPublicKey, finishEvent, relayInit } from 'nostr-tools'\n\n// Key generation and management\nconst privateKey = generatePrivateKey()\nconst publicKey = getPublicKey(privateKey)\n\n// Event creation and signing\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [[\"t\", \"nostr\"], [\"t\", \"development\"]],\n  content: 'Protocol implementation example'\n}, privateKey)\n\n// Relay communication\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\nrelay.publish(event)\n</code></pre>"},{"location":"getting-started/nostr-tools/#ndk-nostr-development-kit","title":"NDK (Nostr Development Kit)","text":"<p>Advanced Features: - Higher-level abstractions for complex application development - Built-in caching and optimization mechanisms - Multi-relay coordination and failover handling - Enhanced developer experience with TypeScript support</p> <pre><code>npm install @nostr-dev-kit/ndk\n</code></pre> <pre><code>import NDK from '@nostr-dev-kit/ndk'\n\nconst ndk = new NDK({\n  explicitRelayUrls: ['wss://relay.damus.io', 'wss://nos.lol'],\n  outboxRelayUrls: ['wss://purplepag.es'],\n  enableOutboxModel: true\n})\n\nawait ndk.connect()\n\nconst note = new NDKEvent(ndk)\nnote.kind = 1\nnote.content = \"Advanced protocol implementation\"\nawait note.publish()\n</code></pre>"},{"location":"getting-started/nostr-tools/#python-implementation","title":"Python Implementation","text":""},{"location":"getting-started/nostr-tools/#python-nostr","title":"python-nostr","text":"<p>Core Capabilities: - Complete protocol implementation with cryptographic operations - Relay management and connection pooling - Event validation and network communication - Integration with existing Python infrastructure</p> <pre><code>pip install nostr\n</code></pre> <pre><code>from nostr.key import PrivateKey\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\nimport time\n\n# Cryptographic key management\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\n\n# Event creation and signing\nevent = Event(\n    kind=1,\n    content=\"Python protocol implementation\",\n    created_at=int(time.time()),\n    tags=[[\"t\", \"nostr\"], [\"t\", \"python\"]]\n)\nprivate_key.sign_event(event)\n\n# Network communication\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.publish_event(event)\n</code></pre>"},{"location":"getting-started/nostr-tools/#rust-implementation","title":"Rust Implementation","text":""},{"location":"getting-started/nostr-tools/#nostr-sdk","title":"nostr-sdk","text":"<p>Performance Features: - High-performance implementation with memory safety - Cross-platform compatibility with foreign function interfaces - Comprehensive NIP support and protocol compliance - Integration with Rust's async ecosystem</p> <pre><code>[dependencies]\nnostr-sdk = \"0.29\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    let keys = Keys::generate();\n    let client = Client::new(&amp;keys);\n\n    client.add_relay(\"wss://relay.damus.io\", None).await?;\n    client.connect().await;\n\n    let event = EventBuilder::new_text_note(\"Rust implementation\", &amp;[])\n        .to_event(&amp;keys)?;\n\n    client.send_event(event).await?;\n    Ok(())\n}\n</code></pre>"},{"location":"getting-started/nostr-tools/#command-line-utilities","title":"Command-Line Utilities","text":""},{"location":"getting-started/nostr-tools/#nak-nostr-army-knife","title":"nak (Nostr Army Knife)","text":"<p>Operational Capabilities: - Event creation, signing, and publishing from command line - Relay querying and subscription management - Key generation and format conversion utilities - Network debugging and analysis tools</p> <p>Installation: <pre><code>go install github.com/fiatjaf/nak@latest\n</code></pre></p> <p>Core Operations: <pre><code># Key generation and management\nnak key generate\nnak key --npub npub1... # Convert to hex format\n\n# Event operations\nnak event --content \"Command line event\" --kind 1\nnak req -k 1 --limit 10 wss://relay.damus.io\n\n# Network analysis\nnak decode nevent1... # Decode Nostr entities\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#nostril","title":"nostril","text":"<p>Event Publishing Utility: - Lightweight event creation and publishing - Simple integration with shell scripts and automation - Direct relay communication without client overhead</p> <pre><code># Install\ngo install github.com/fiatjaf/nostril@latest\n\n# Create and publish events\nnostril --content \"Direct event publishing\" --sec &lt;private-key&gt;\nnostril --dm &lt;pubkey&gt; --content \"Direct message\" --sec &lt;private-key&gt;\n</code></pre>"},{"location":"getting-started/nostr-tools/#network-analysis-and-monitoring","title":"Network Analysis and Monitoring","text":""},{"location":"getting-started/nostr-tools/#relay-discovery-and-testing","title":"Relay Discovery and Testing","text":""},{"location":"getting-started/nostr-tools/#nostrwatch","title":"nostr.watch","text":"<p>Network Monitoring: - Real-time relay status and performance metrics - Geographic distribution analysis - Protocol compliance verification - Network topology visualization</p> <p>Integration Example: <pre><code># Automated relay health checking\ncurl -s https://api.nostr.watch/v1/online | jq '.[]' | head -10\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#nostrband","title":"nostr.band","text":"<p>Network Analytics: - Event search and analysis across the network - User activity patterns and statistics - Content discovery and trending analysis - Protocol usage metrics</p>"},{"location":"getting-started/nostr-tools/#development-and-debugging-tools","title":"Development and Debugging Tools","text":""},{"location":"getting-started/nostr-tools/#relay-testing-infrastructure","title":"Relay Testing Infrastructure","text":"<pre><code># Install relay testing tools\ngo install github.com/fiatjaf/relay-benchmark@latest\n\n# Performance testing\nrelay-benchmark --relay wss://relay.damus.io --connections 50 --duration 60s\n\n# Functionality testing\nnak req --limit 1 wss://relay.damus.io # Basic connectivity test\n</code></pre>"},{"location":"getting-started/nostr-tools/#practical-exercise-tool-integration-laboratory","title":"Practical Exercise: Tool Integration Laboratory","text":"<p>Development Environment Setup</p> <p>Objective: Configure a complete development environment for Nostr protocol work</p> <p>Phase 1: Environment Preparation 1. Install programming language runtimes (Node.js, Python, Go, Rust) 2. Configure package managers and dependency management 3. Set up version control and development workflows 4. Install command-line utilities (nak, nostril)</p> <p>Phase 2: Library Integration Testing 1. Implement basic event creation in multiple languages 2. Test relay communication and event publishing 3. Verify cryptographic operations and key management 4. Compare performance characteristics across implementations</p> <p>Phase 3: Network Analysis Exercise 1. Use nak to query different relays and analyze response patterns 2. Monitor relay performance using available tools 3. Analyze event patterns and network activity 4. Document relay capabilities and limitations</p>"},{"location":"getting-started/nostr-tools/#advanced-development-tools","title":"Advanced Development Tools","text":""},{"location":"getting-started/nostr-tools/#browser-extensions-for-development","title":"Browser Extensions for Development","text":""},{"location":"getting-started/nostr-tools/#nos2x","title":"nos2x","text":"<p>Key Management Features: - Secure private key storage in browser environment - NIP-07 event signing capabilities - Permission management for web applications - Development testing and debugging support</p>"},{"location":"getting-started/nostr-tools/#alby","title":"Alby","text":"<p>Comprehensive Development Platform: - Lightning Network integration for testing - Advanced key management with multiple accounts - Developer APIs for application integration - Testing environment for zap functionality</p>"},{"location":"getting-started/nostr-tools/#infrastructure-development","title":"Infrastructure Development","text":""},{"location":"getting-started/nostr-tools/#relay-implementation-tools","title":"Relay Implementation Tools","text":"<p>Strfry Development: <pre><code># Clone and build relay software\ngit clone https://github.com/hoytech/strfry.git\ncd strfry\ngit submodule update --init\nmake setup-golpe\nmake -j4\n\n# Configuration and testing\n./strfry relay # Start relay\n./strfry export --since=1day # Data export\n</code></pre></p> <p>Nostream Development: <pre><code># Node.js relay implementation\ngit clone https://github.com/Cameri/nostream.git\ncd nostream\nnpm install\nnpm run build\nnpm start\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#event-analysis-and-debugging","title":"Event Analysis and Debugging","text":""},{"location":"getting-started/nostr-tools/#event-structure-validation","title":"Event Structure Validation","text":"<p>Automated Testing Framework: <pre><code>// Event validation testing\nimport { validateEvent, verifySignature } from 'nostr-tools'\n\nfunction testEventValidation(event) {\n  const isValid = validateEvent(event)\n  const sigValid = verifySignature(event)\n\n  return {\n    structureValid: isValid,\n    signatureValid: sigValid,\n    timestamp: new Date(event.created_at * 1000),\n    kind: event.kind,\n    contentLength: event.content.length\n  }\n}\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#network-protocol-analysis","title":"Network Protocol Analysis","text":"<p>Traffic Monitoring: <pre><code># WebSocket traffic analysis\nwscat -c wss://relay.damus.io\n# Send: [\"REQ\", \"sub1\", {\"kinds\": [1], \"limit\": 5}]\n\n# Protocol compliance testing\nnak req -k 1 --limit 1 wss://relay.damus.io | jq '.[]'\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#performance-optimization-tools","title":"Performance Optimization Tools","text":""},{"location":"getting-started/nostr-tools/#relay-performance-analysis","title":"Relay Performance Analysis","text":"<p>Metrics Collection: - Connection establishment latency - Event processing throughput - Query response times - Resource utilization patterns</p> <p>Benchmarking Framework: <pre><code># Comprehensive relay testing\nrelay-benchmark \\\n  --relay wss://relay.damus.io \\\n  --connections 100 \\\n  --events-per-second 10 \\\n  --duration 300s \\\n  --output results.json\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#client-performance-testing","title":"Client Performance Testing","text":"<p>Load Testing Implementation: <pre><code>// Client performance testing\nasync function loadTest(relayUrls, eventCount) {\n  const clients = relayUrls.map(url =&gt; relayInit(url))\n  await Promise.all(clients.map(c =&gt; c.connect()))\n\n  const startTime = Date.now()\n\n  for (let i = 0; i &lt; eventCount; i++) {\n    const event = createTestEvent(i)\n    await Promise.all(clients.map(c =&gt; c.publish(event)))\n  }\n\n  const duration = Date.now() - startTime\n  return { eventsPerSecond: eventCount / (duration / 1000) }\n}\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#security-and-compliance-tools","title":"Security and Compliance Tools","text":""},{"location":"getting-started/nostr-tools/#key-security-analysis","title":"Key Security Analysis","text":"<p>Cryptographic Validation: <pre><code># Key security verification\ndef validate_key_security(private_key_hex):\n    \"\"\"Validate private key entropy and security properties\"\"\"\n    key_bytes = bytes.fromhex(private_key_hex)\n\n    # Entropy analysis\n    entropy = calculate_entropy(key_bytes)\n\n    # Format validation\n    valid_format = len(key_bytes) == 32\n\n    # Weak key detection\n    is_weak = check_weak_patterns(key_bytes)\n\n    return {\n        'entropy': entropy,\n        'valid_format': valid_format,\n        'is_secure': entropy &gt; 7.0 and valid_format and not is_weak\n    }\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#protocol-compliance-testing","title":"Protocol Compliance Testing","text":"<p>NIP Compliance Verification: <pre><code># Automated NIP compliance testing\nfor relay in $(cat relay_list.txt); do\n  echo \"Testing $relay\"\n  nak req -k 0 --limit 1 $relay &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"NIP-01: \u2713\" || echo \"NIP-01: \u2717\"\n  # Additional NIP tests...\ndone\n</code></pre></p>"},{"location":"getting-started/nostr-tools/#next-steps","title":"Next Steps","text":"<p>Mastering development tools and infrastructure components enables effective participation in Nostr protocol development. Understanding the ecosystem prepares you for advanced implementation work and network infrastructure deployment.</p>      Relay Infrastructure Deployment \u2192"},{"location":"getting-started/nostr-tools/#technical-proficiency-assessment","title":"Technical Proficiency Assessment","text":"<p>Development Tools Mastery</p> <ol> <li>What are the key differences between nostr-tools and NDK for JavaScript development?</li> <li>How do command-line utilities like nak facilitate protocol debugging and analysis?</li> <li>What performance considerations apply when choosing between different language implementations?</li> <li>How can relay testing tools inform infrastructure deployment decisions?</li> </ol> Technical Analysis <ol> <li>nostr-tools provides core protocol primitives, while NDK offers higher-level abstractions with built-in optimization and multi-relay coordination</li> <li>Command-line utilities enable direct protocol interaction for testing, debugging, and automation without the overhead of full client implementations</li> <li>Performance considerations include memory usage, cryptographic operation speed, concurrency models, and integration complexity with existing infrastructure</li> <li>Relay testing tools provide critical metrics on throughput, latency, compliance, and reliability that inform capacity planning, geographic distribution, and redundancy strategies for production deployments</li> </ol>"},{"location":"getting-started/relay-setup/","title":"Relay Infrastructure Deployment","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>Relay architecture and operational requirements</li> <li>Installation and configuration procedures for production deployment</li> <li>Security hardening and performance optimization techniques</li> <li>Monitoring, maintenance, and scaling strategies</li> </ul>"},{"location":"getting-started/relay-setup/#relay-infrastructure-overview","title":"Relay Infrastructure Overview","text":"<p>Nostr relays serve as the foundational infrastructure for the decentralized protocol, providing event storage, retrieval, and distribution services. Operating a relay contributes to network resilience while offering control over data persistence and access policies.</p> <p>Understanding relay deployment enables participation in protocol infrastructure and supports advanced use cases including private networks, content curation, and specialized services.</p>"},{"location":"getting-started/relay-setup/#deployment-architecture-considerations","title":"Deployment Architecture Considerations","text":""},{"location":"getting-started/relay-setup/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/relay-setup/#minimum-production-specifications","title":"Minimum Production Specifications","text":"<ul> <li>CPU: 2+ cores with modern instruction set support</li> <li>Memory: 4GB RAM minimum, 8GB+ recommended for higher throughput</li> <li>Storage: 50GB+ SSD with expansion capability for event database growth</li> <li>Network: Reliable internet connection with adequate bandwidth allocation</li> <li>Operating System: Linux distribution with current security updates</li> </ul>"},{"location":"getting-started/relay-setup/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Database storage grows approximately 1-10GB per month depending on relay policies</li> <li>Network bandwidth requirements scale with user count and activity patterns</li> <li>CPU utilization correlates with event validation and cryptographic operations</li> <li>Memory usage depends on connection concurrency and caching strategies</li> </ul>"},{"location":"getting-started/relay-setup/#software-architecture-options","title":"Software Architecture Options","text":""},{"location":"getting-started/relay-setup/#strfry-c-implementation","title":"Strfry (C++ Implementation)","text":"<p>Technical Characteristics: - High-performance implementation optimized for throughput and latency - LMDB database backend providing ACID compliance and crash resistance - Minimal resource footprint with efficient memory management - Plugin architecture for custom event filtering and policy enforcement</p> <p>Operational Benefits: - Proven stability under high-load conditions - Comprehensive administrative tooling for database management - Active development with regular security and performance updates - Extensive deployment documentation and community support</p>"},{"location":"getting-started/relay-setup/#nostream-typescriptnodejs","title":"Nostream (TypeScript/Node.js)","text":"<p>Technical Characteristics: - JavaScript ecosystem integration with extensive library support - PostgreSQL or SQLite database options for different deployment scales - Built-in payment processing and Lightning Network integration - Modular architecture supporting custom plugins and extensions</p> <p>Operational Benefits: - Familiar development environment for web developers - Comprehensive API endpoints for monitoring and administration - Advanced features including analytics and user management - Docker containerization support for simplified deployment</p>"},{"location":"getting-started/relay-setup/#production-deployment-strfry-implementation","title":"Production Deployment: Strfry Implementation","text":""},{"location":"getting-started/relay-setup/#system-preparation","title":"System Preparation","text":"<p>Server Provisioning: <pre><code># System updates and security hardening\napt update &amp;&amp; apt upgrade -y\napt install -y ufw fail2ban unattended-upgrades\n\n# Firewall configuration\nufw default deny incoming\nufw default allow outgoing\nufw allow ssh\nufw allow 80/tcp\nufw allow 443/tcp\nufw enable\n\n# Create dedicated system user\nuseradd -r -s /bin/false -d /opt/strfry strfry\nmkdir -p /opt/strfry\nchown strfry:strfry /opt/strfry\n</code></pre></p> <p>Dependency Installation: <pre><code># Build dependencies\napt install -y git build-essential libtool autotools-dev automake \\\npkg-config libssl-dev libevent-dev bsdmainutils python3 \\\nnginx certbot python3-certbot-nginx\n\n# Performance optimization libraries\napt install -y libjemalloc2 libjemalloc-dev\n</code></pre></p>"},{"location":"getting-started/relay-setup/#strfry-compilation-and-installation","title":"Strfry Compilation and Installation","text":"<p>Source Code Preparation: <pre><code>cd /opt/strfry\nsudo -u strfry git clone https://github.com/hoytech/strfry.git .\nsudo -u strfry git submodule update --init\n</code></pre></p> <p>Build Configuration: <pre><code># Configure build environment\nsudo -u strfry make setup-golpe\n\n# Compile with optimizations\nsudo -u strfry make -j$(nproc) CXXFLAGS=\"-O3 -march=native\"\n\n# Verify build integrity\nsudo -u strfry ./strfry --version\n</code></pre></p>"},{"location":"getting-started/relay-setup/#configuration-management","title":"Configuration Management","text":"<p>Primary Configuration File (<code>/opt/strfry/strfry.conf</code>): <pre><code># Database configuration\ndb = \"/opt/strfry/data/strfry-db/\"\n\ndbParams {\n    maxreaders = 512\n    mapsize = 1TB\n}\n\n# Network configuration\nrelay {\n    bind = \"127.0.0.1\"\n    port = 7777\n    nofiles = 65536\n\n    # Performance tuning\n    maxWebsocketPayloadSize = 131072\n    autoPingSeconds = 30\n    enableTcpKeepalive = true\n    queryTimesliceBudgetMicroseconds = 5000\n\n    # Rate limiting\n    maxFilterLimit = 1000\n    maxSubsPerConnection = 50\n\n    # Relay metadata (NIP-11)\n    info {\n        name = \"Production Nostr Relay\"\n        description = \"High-performance Nostr relay infrastructure\"\n        pubkey = \"&lt;relay_operator_pubkey&gt;\"\n        contact = \"admin@relay.example.com\"\n        supported_nips = [1, 2, 9, 11, 12, 15, 16, 20, 22]\n        software = \"strfry\"\n        version = \"0.9.6\"\n    }\n}\n\n# Event filtering and validation\nevents {\n    maxEventSize = 65536\n    rejectEventsNewerThanSeconds = 900\n    rejectEventsOlderThanSeconds = 31536000\n    rejectEphemeralEventsOlderThanSeconds = 60\n    maxNumTags = 1000\n    maxTagValSize = 1024\n}\n\n# Write policy configuration\nwritePolicy {\n    plugin = \"/opt/strfry/write-policy.sh\"\n}\n</code></pre></p> <p>Write Policy Implementation (<code>/opt/strfry/write-policy.sh</code>): <pre><code>#!/bin/bash\n\n# Read event from stdin\nevent=$(cat)\n\n# Extract event properties for analysis\nkind=$(echo \"$event\" | jq -r '.kind')\npubkey=$(echo \"$event\" | jq -r '.pubkey')\ncontent=$(echo \"$event\" | jq -r '.content')\n\n# Basic content filtering\nif echo \"$content\" | grep -qi \"spam\\|scam\\|malware\"; then\n    echo '{\"action\": \"reject\", \"msg\": \"Content policy violation\"}'\n    exit 0\nfi\n\n# Rate limiting by pubkey (implement with external storage)\n# rate_limit_check \"$pubkey\" || {\n#     echo '{\"action\": \"reject\", \"msg\": \"Rate limit exceeded\"}'\n#     exit 0\n# }\n\n# Accept compliant events\necho '{\"action\": \"accept\"}'\n</code></pre></p>"},{"location":"getting-started/relay-setup/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":"<p>Nginx Configuration (<code>/etc/nginx/sites-available/nostr-relay</code>): <pre><code>upstream strfry_backend {\n    server 127.0.0.1:7777;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name relay.example.com;\n\n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name relay.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/relay.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/relay.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Performance optimization\n    keepalive_timeout 65;\n    keepalive_requests 1000;\n\n    # WebSocket proxy configuration\n    location / {\n        proxy_pass http://strfry_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Timeout configuration\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n\n        # Buffer configuration\n        proxy_buffering off;\n        proxy_request_buffering off;\n    }\n\n    # NIP-11 relay information\n    location = / {\n        add_header Content-Type application/nostr+json;\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods \"GET, POST, OPTIONS\";\n        add_header Access-Control-Allow-Headers \"Content-Type\";\n\n        if ($http_accept ~* \"application/nostr\\+json\") {\n            proxy_pass http://strfry_backend;\n        }\n\n        # Default response for web browsers\n        return 200 '{\"name\":\"Production Nostr Relay\",\"description\":\"High-performance relay infrastructure\",\"supported_nips\":[1,2,9,11,12,15,16,20,22],\"software\":\"strfry\",\"version\":\"0.9.6\"}';\n    }\n}\n</code></pre></p>"},{"location":"getting-started/relay-setup/#ssl-certificate-management","title":"SSL Certificate Management","text":"<p>Let's Encrypt Configuration: <pre><code># Initial certificate generation\ncertbot --nginx -d relay.example.com --email admin@example.com --agree-tos\n\n# Automatic renewal configuration\ncat &gt; /etc/cron.d/certbot &lt;&lt; EOF\n0 12 * * * root certbot renew --quiet --post-hook \"systemctl reload nginx\"\nEOF\n</code></pre></p>"},{"location":"getting-started/relay-setup/#system-service-configuration","title":"System Service Configuration","text":"<p>Systemd Service Unit (<code>/etc/systemd/system/strfry.service</code>): <pre><code>[Unit]\nDescription=Strfry Nostr Relay\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=strfry\nGroup=strfry\nWorkingDirectory=/opt/strfry\nExecStart=/opt/strfry/strfry relay\nRestart=always\nRestartSec=5\nStandardOutput=journal\nStandardError=journal\n\n# Security hardening\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/strfry/data\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=4096\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Service Management: <pre><code># Enable and start service\nsystemctl daemon-reload\nsystemctl enable strfry\nsystemctl start strfry\n\n# Verify operation\nsystemctl status strfry\njournalctl -u strfry -f\n</code></pre></p>"},{"location":"getting-started/relay-setup/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"getting-started/relay-setup/#performance-monitoring","title":"Performance Monitoring","text":"<p>System Metrics Collection: <pre><code># Install monitoring tools\napt install -y htop iotop nethogs\n\n# Database size monitoring\ndu -sh /opt/strfry/data/strfry-db/\n\n# Connection monitoring\nss -tuln | grep :7777\nnetstat -an | grep :443 | wc -l\n</code></pre></p> <p>Application Metrics: <pre><code># Relay statistics\n/opt/strfry/strfry export --count\n\n# Event analysis\n/opt/strfry/strfry export --since=1hour | jq '.kind' | sort | uniq -c\n\n# Performance testing\necho '[\"REQ\",\"test\",{\"kinds\":[1],\"limit\":10}]' | websocat wss://relay.example.com\n</code></pre></p>"},{"location":"getting-started/relay-setup/#database-maintenance","title":"Database Maintenance","text":"<p>Routine Maintenance Operations: <pre><code># Database compaction\nsystemctl stop strfry\nsudo -u strfry /opt/strfry/strfry compact\nsystemctl start strfry\n\n# Backup procedures\nsudo -u strfry /opt/strfry/strfry export &gt; backup-$(date +%Y%m%d).jsonl\ntar -czf backup-$(date +%Y%m%d).tar.gz /opt/strfry/data/\n\n# Database verification\nsudo -u strfry /opt/strfry/strfry verify\n</code></pre></p>"},{"location":"getting-started/relay-setup/#security-hardening","title":"Security Hardening","text":"<p>Access Control Implementation: <pre><code># Fail2ban configuration for WebSocket abuse\ncat &gt; /etc/fail2ban/jail.d/strfry.conf &lt;&lt; EOF\n[strfry]\nenabled = true\nport = 443\nfilter = strfry\nlogpath = /var/log/nginx/access.log\nmaxretry = 10\nbantime = 3600\nfindtime = 600\nEOF\n\n# Rate limiting at nginx level\n# Add to nginx configuration:\n# limit_req_zone $binary_remote_addr zone=websocket:10m rate=10r/s;\n# limit_req zone=websocket burst=20 nodelay;\n</code></pre></p> <p>Network Security: <pre><code># DDoS protection configuration\necho 'net.core.rmem_default = 262144' &gt;&gt; /etc/sysctl.conf\necho 'net.core.rmem_max = 16777216' &gt;&gt; /etc/sysctl.conf\necho 'net.core.wmem_default = 262144' &gt;&gt; /etc/sysctl.conf\necho 'net.core.wmem_max = 16777216' &gt;&gt; /etc/sysctl.conf\nsysctl -p\n</code></pre></p>"},{"location":"getting-started/relay-setup/#practical-exercise-relay-deployment-laboratory","title":"Practical Exercise: Relay Deployment Laboratory","text":"<p>Production Relay Implementation</p> <p>Objective: Deploy and configure a production-ready Nostr relay</p> <p>Phase 1: Infrastructure Setup 1. Provision VPS with appropriate specifications 2. Complete security hardening and system preparation 3. Install and configure all required dependencies 4. Implement monitoring and logging infrastructure</p> <p>Phase 2: Relay Configuration 1. Compile and install Strfry with optimizations 2. Configure relay policies and operational parameters 3. Implement reverse proxy with SSL termination 4. Create systemd service for process management</p> <p>Phase 3: Testing and Validation 1. Verify WebSocket connectivity and protocol compliance 2. Test event publishing and retrieval functionality 3. Validate SSL certificate configuration and renewal 4. Perform load testing and performance optimization</p> <p>Phase 4: Operational Procedures 1. Implement backup and recovery procedures 2. Configure monitoring and alerting systems 3. Document maintenance procedures and troubleshooting 4. Establish security update and patch management processes</p>"},{"location":"getting-started/relay-setup/#scaling-and-optimization","title":"Scaling and Optimization","text":""},{"location":"getting-started/relay-setup/#performance-optimization","title":"Performance Optimization","text":"<p>Database Tuning: <pre><code># Advanced LMDB configuration\ndbParams {\n    maxreaders = 1024\n    mapsize = 5TB\n\n    # Memory mapping optimization\n    mdb_env_set_mapsize = 5497558138880  # 5TB in bytes\n    mdb_env_set_maxdbs = 16\n}\n</code></pre></p> <p>Connection Optimization: <pre><code>relay {\n    # Increase connection limits\n    nofiles = 131072\n    maxSubsPerConnection = 100\n\n    # Optimize query performance\n    queryTimesliceBudgetMicroseconds = 10000\n    maxFilterLimit = 2000\n\n    # Network tuning\n    autoPingSeconds = 25\n    enableTcpKeepalive = true\n}\n</code></pre></p>"},{"location":"getting-started/relay-setup/#horizontal-scaling-strategies","title":"Horizontal Scaling Strategies","text":"<p>Load Balancing Configuration: <pre><code>upstream strfry_cluster {\n    least_conn;\n    server 10.0.1.10:7777 weight=3;\n    server 10.0.1.11:7777 weight=3;\n    server 10.0.1.12:7777 weight=2;\n\n    keepalive 64;\n}\n</code></pre></p> <p>Database Replication: <pre><code># Master-slave replication setup\n/opt/strfry/strfry sync --source wss://master-relay.example.com \\\n                        --target /opt/strfry/data/strfry-db/\n</code></pre></p>"},{"location":"getting-started/relay-setup/#troubleshooting-and-diagnostics","title":"Troubleshooting and Diagnostics","text":""},{"location":"getting-started/relay-setup/#common-issues-and-resolution","title":"Common Issues and Resolution","text":"<p>Connection Problems: <pre><code># WebSocket connectivity testing\nwscat -c wss://relay.example.com\n\n# SSL certificate validation\nopenssl s_client -connect relay.example.com:443 -servername relay.example.com\n\n# Network connectivity analysis\ntcptraceroute relay.example.com 443\n</code></pre></p> <p>Performance Issues: <pre><code># Resource utilization analysis\nhtop\niotop -a\niostat -x 1\n\n# Database performance monitoring\n/opt/strfry/strfry stats\nlmdb_stat /opt/strfry/data/strfry-db/\n</code></pre></p> <p>Event Processing Problems: <pre><code># Event validation testing\necho '{\"id\":\"test\",\"pubkey\":\"test\",\"created_at\":1234567890,\"kind\":1,\"tags\":[],\"content\":\"test\",\"sig\":\"test\"}' | /opt/strfry/strfry import\n\n# Write policy debugging\necho '{\"kind\":1,\"content\":\"test content\"}' | /opt/strfry/write-policy.sh\n</code></pre></p>"},{"location":"getting-started/relay-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/relay-setup/#custom-event-filtering","title":"Custom Event Filtering","text":"<p>Advanced Write Policy: <pre><code>#!/bin/bash\n\nevent=$(cat)\n\n# Extract event metadata\nkind=$(echo \"$event\" | jq -r '.kind')\npubkey=$(echo \"$event\" | jq -r '.pubkey')\ncreated_at=$(echo \"$event\" | jq -r '.created_at')\ncontent=$(echo \"$event\" | jq -r '.content')\n\n# Timestamp validation\ncurrent_time=$(date +%s)\ntime_diff=$((current_time - created_at))\n\nif [ $time_diff -gt 300 ] || [ $time_diff -lt -60 ]; then\n    echo '{\"action\": \"reject\", \"msg\": \"Invalid timestamp\"}'\n    exit 0\nfi\n\n# Content length validation\ncontent_length=${#content}\nif [ $content_length -gt 10000 ]; then\n    echo '{\"action\": \"reject\", \"msg\": \"Content too long\"}'\n    exit 0\nfi\n\n# Whitelist/blacklist implementation\nif grep -q \"$pubkey\" /opt/strfry/blacklist.txt; then\n    echo '{\"action\": \"reject\", \"msg\": \"Blocked user\"}'\n    exit 0\nfi\n\necho '{\"action\": \"accept\"}'\n</code></pre></p>"},{"location":"getting-started/relay-setup/#analytics-and-reporting","title":"Analytics and Reporting","text":"<p>Event Analytics Implementation: <pre><code># Daily event statistics\n/opt/strfry/strfry export --since=1day | \\\njq -r '[.kind, .pubkey[0:8]] | @csv' | \\\nsort | uniq -c | sort -nr &gt; daily-stats.txt\n\n# User activity analysis\n/opt/strfry/strfry export --since=1week | \\\njq -r '.pubkey' | sort | uniq -c | sort -nr | head -20\n</code></pre></p>"},{"location":"getting-started/relay-setup/#next-steps","title":"Next Steps","text":"<p>Successful relay deployment provides hands-on experience with Nostr infrastructure and prepares you for advanced protocol development. Understanding operational requirements enables effective contribution to network infrastructure and specialized service development.</p>      Advanced Protocol Concepts \u2192"},{"location":"getting-started/relay-setup/#infrastructure-mastery-assessment","title":"Infrastructure Mastery Assessment","text":"<p>Relay Operations Proficiency</p> <ol> <li>What are the critical considerations for relay database configuration and optimization?</li> <li>How do write policies enable content moderation while maintaining decentralization principles?</li> <li>What security measures are essential for production relay deployment?</li> <li>How can relay operators balance performance, scalability, and resource costs?</li> </ol> Infrastructure Analysis <ol> <li>Database configuration must balance storage efficiency, query performance, and concurrent access patterns while ensuring data integrity and crash resistance</li> <li>Write policies provide programmatic content filtering at the relay level, allowing operators to implement custom rules while users retain the ability to choose relays that align with their preferences</li> <li>Security measures include system hardening, network protection, SSL/TLS encryption, access control, monitoring, and regular security updates to protect against various attack vectors</li> <li>Performance optimization requires careful tuning of database parameters, connection limits, caching strategies, and hardware resources while implementing cost-effective scaling strategies</li> </ol>"},{"location":"getting-started/wallet-setup/","title":"Lightning Wallet Integration","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>The role of Lightning Network in the Nostr ecosystem</li> <li>Different wallet architectures and their security implications</li> <li>How to configure Lightning integration with Nostr clients</li> <li>Best practices for key management and operational security</li> </ul>"},{"location":"getting-started/wallet-setup/#lightning-network-integration","title":"Lightning Network Integration","text":"<p>The Lightning Network provides instant, low-cost Bitcoin payments that enable new economic models within the Nostr protocol. Zaps - Lightning-powered micropayments - create direct value transfer between users, facilitating content monetization and network incentives.</p> <p>This integration transforms social interaction from engagement-based metrics to value-based transactions, enabling creators to receive immediate compensation for their contributions.</p>"},{"location":"getting-started/wallet-setup/#wallet-architecture-types","title":"Wallet Architecture Types","text":""},{"location":"getting-started/wallet-setup/#custodial-wallets","title":"Custodial Wallets","text":"<p>Technical Characteristics: - Private keys managed by service provider - Simplified user experience with reduced technical complexity - Immediate availability without channel management requirements - Centralized counterparty risk</p> <p>Implementation Considerations: - Lower barrier to entry for new users - Regulatory compliance requirements for service providers - Potential for account restrictions or service termination - Simplified backup and recovery processes</p>"},{"location":"getting-started/wallet-setup/#non-custodial-wallets","title":"Non-Custodial Wallets","text":"<p>Technical Characteristics: - User-controlled private key management - Direct Lightning Network node operation or trusted node connection - Channel liquidity management requirements - Enhanced privacy and sovereignty</p> <p>Implementation Considerations: - Increased technical complexity and user responsibility - Backup and recovery procedures critical for fund security - Channel management and liquidity considerations - Greater resistance to external control or censorship</p>"},{"location":"getting-started/wallet-setup/#wallet-selection-matrix","title":"Wallet Selection Matrix","text":"Criteria Custodial Solutions Non-Custodial Solutions Security Model Trust-based Self-sovereign Key Management Service provider User responsibility Technical Complexity Low Medium to High Privacy Level Limited Enhanced Availability High Variable Regulatory Risk Higher Lower"},{"location":"getting-started/wallet-setup/#recommended-implementations","title":"Recommended Implementations","text":""},{"location":"getting-started/wallet-setup/#web-based-integration-alby","title":"Web-Based Integration: Alby","text":"<p>Technical Specifications: - Browser extension with WebLN protocol support - NIP-07 compliance for Nostr event signing - Built-in Lightning node connectivity - OAuth-style authorization for web applications</p> <p>Integration Process: 1. Install browser extension from official distribution channels 2. Complete account creation and backup phrase documentation 3. Configure Lightning node connectivity (custodial or self-hosted) 4. Enable NIP-07 permissions for Nostr applications</p>"},{"location":"getting-started/wallet-setup/#mobile-solutions","title":"Mobile Solutions","text":""},{"location":"getting-started/wallet-setup/#wallet-of-satoshi-custodial","title":"Wallet of Satoshi (Custodial)","text":"<p>Technical Features: - Simplified Lightning Network abstraction - Instant payment processing - Lightning address support (LNURL-pay) - Minimal configuration requirements</p>"},{"location":"getting-started/wallet-setup/#phoenix-non-custodial","title":"Phoenix (Non-Custodial)","text":"<p>Technical Features: - Automatic channel management - ACINQ node infrastructure - On-chain backup mechanisms - Advanced fee management options</p>"},{"location":"getting-started/wallet-setup/#breez-non-custodial","title":"Breez (Non-Custodial)","text":"<p>Technical Features: - Built-in Lightning Service Provider (LSP) - Self-hosted node option - Podcast integration with streaming payments - Point-of-sale functionality</p>"},{"location":"getting-started/wallet-setup/#configuration-and-integration","title":"Configuration and Integration","text":""},{"location":"getting-started/wallet-setup/#lightning-address-setup","title":"Lightning Address Setup","text":"<p>Lightning addresses provide human-readable payment identifiers following the format <code>username@domain.com</code>. This abstraction simplifies the payment process while maintaining Lightning Network compatibility.</p> <p>Implementation Steps: 1. Obtain Lightning address from wallet provider 2. Configure address in Nostr client profile metadata 3. Verify payment functionality through test transactions 4. Monitor payment notifications and confirmations</p>"},{"location":"getting-started/wallet-setup/#nostr-client-configuration","title":"Nostr Client Configuration","text":"<p>Profile Metadata Configuration: <pre><code>{\n  \"kind\": 0,\n  \"content\": {\n    \"name\": \"User Name\",\n    \"about\": \"User description\",\n    \"picture\": \"https://example.com/avatar.jpg\",\n    \"lud16\": \"username@domain.com\"\n  }\n}\n</code></pre></p> <p>The <code>lud16</code> field contains the Lightning address, enabling automatic zap functionality across compatible Nostr clients.</p>"},{"location":"getting-started/wallet-setup/#practical-exercise-wallet-setup-and-testing","title":"Practical Exercise: Wallet Setup and Testing","text":"<p>Lightning Integration Laboratory</p> <p>Objective: Configure and test Lightning wallet integration with Nostr protocol</p> <p>Phase 1: Wallet Selection and Setup 1. Evaluate wallet options based on technical requirements and risk tolerance 2. Complete wallet installation and initial configuration 3. Document backup procedures and security measures 4. Fund wallet with minimal amount for testing purposes</p> <p>Phase 2: Nostr Integration 1. Configure Lightning address in Nostr client profile 2. Verify profile propagation across relay network 3. Test zap functionality with small amounts 4. Monitor transaction confirmations and notifications</p> <p>Phase 3: Operational Validation 1. Send test zaps to other users or yourself 2. Receive zaps and verify notification systems 3. Analyze transaction fees and processing times 4. Document any connectivity or reliability issues</p>"},{"location":"getting-started/wallet-setup/#security-implementation","title":"Security Implementation","text":""},{"location":"getting-started/wallet-setup/#key-management-best-practices","title":"Key Management Best Practices","text":"<p>Backup Procedures: - Document seed phrases using offline, physical storage - Verify backup integrity through recovery testing - Implement multi-location storage with appropriate security - Establish clear succession planning for fund recovery</p> <p>Operational Security: - Use dedicated devices for significant fund management - Implement strong authentication mechanisms - Regular security audits of connected applications - Monitor for unauthorized access or unusual activity</p>"},{"location":"getting-started/wallet-setup/#fund-management-strategies","title":"Fund Management Strategies","text":"<p>Risk Mitigation: - Maintain minimal balances in hot wallets for daily operations - Use cold storage for long-term fund security - Implement spending limits and approval processes - Regular fund movement to reduce exposure windows</p>"},{"location":"getting-started/wallet-setup/#payment-flow-architecture","title":"Payment Flow Architecture","text":"<pre><code>sequenceDiagram\n    participant User as Nostr User\n    participant Client as Nostr Client\n    participant Relay as Nostr Relay\n    participant Wallet as Lightning Wallet\n    participant LN as Lightning Network\n\n    User-&gt;&gt;Client: Initiate Zap\n    Client-&gt;&gt;Wallet: Request Invoice\n    Wallet-&gt;&gt;LN: Generate Payment Request\n    LN--&gt;&gt;Wallet: Return Invoice\n    Wallet--&gt;&gt;Client: Provide Invoice\n    Client-&gt;&gt;User: Display Payment Details\n    User-&gt;&gt;Wallet: Authorize Payment\n    Wallet-&gt;&gt;LN: Execute Payment\n    LN--&gt;&gt;Wallet: Payment Confirmation\n    Wallet--&gt;&gt;Client: Notify Success\n    Client-&gt;&gt;Relay: Publish Zap Event\n    Relay--&gt;&gt;Client: Confirm Event Storage</code></pre>"},{"location":"getting-started/wallet-setup/#economic-model-analysis","title":"Economic Model Analysis","text":""},{"location":"getting-started/wallet-setup/#value-transfer-mechanisms","title":"Value Transfer Mechanisms","text":"<p>Micropayment Economics: - Transaction costs approaching zero enable micro-value transfer - Direct creator compensation without platform intermediaries - Market-driven content valuation through payment amounts - Network effects from value-based engagement metrics</p> <p>Network Incentives: - Quality content receives proportional compensation - Spam reduction through payment requirements - Relay operator compensation through usage fees - Developer incentives through application monetization</p>"},{"location":"getting-started/wallet-setup/#troubleshooting-and-diagnostics","title":"Troubleshooting and Diagnostics","text":""},{"location":"getting-started/wallet-setup/#common-integration-issues","title":"Common Integration Issues","text":"<p>Connection Problems: - Verify wallet application permissions and authorizations - Check Lightning Network connectivity and channel status - Confirm Lightning address configuration and propagation - Test with different Nostr clients for compatibility verification</p> <p>Payment Failures: - Analyze Lightning Network routing and liquidity constraints - Verify recipient Lightning address validity and functionality - Check payment amount limits and wallet balance sufficiency - Monitor for temporary network congestion or connectivity issues</p> <p>Performance Optimization: - Configure optimal relay selections for payment notifications - Implement connection pooling for improved responsiveness - Cache Lightning invoices to reduce generation latency - Monitor payment success rates and failure patterns</p>"},{"location":"getting-started/wallet-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/wallet-setup/#custom-lightning-infrastructure","title":"Custom Lightning Infrastructure","text":"<p>Self-Hosted Solutions: - Lightning node deployment and management - Channel liquidity management strategies - Backup and monitoring system implementation - Integration with existing infrastructure and security systems</p> <p>Enterprise Considerations: - Multi-signature wallet configurations - Automated payment processing and reconciliation - Compliance and audit trail requirements - Scalability planning for high-volume operations</p>"},{"location":"getting-started/wallet-setup/#next-steps","title":"Next Steps","text":"<p>Lightning wallet integration enables participation in Nostr's value-based economy. Understanding the technical architecture and security considerations prepares you for advanced protocol development and deployment.</p>      Development Tools and Infrastructure \u2192"},{"location":"getting-started/wallet-setup/#technical-validation","title":"Technical Validation","text":"<p>Integration Comprehension Assessment</p> <ol> <li>What are the primary trade-offs between custodial and non-custodial wallet architectures?</li> <li>How does the Lightning address system simplify payment processes?</li> <li>What security considerations are critical for Lightning wallet operations?</li> <li>How do zaps change the economic incentives in social networking?</li> </ol> Technical Analysis <ol> <li>Custodial wallets trade security and sovereignty for simplicity, while non-custodial wallets provide full control at the cost of increased complexity and responsibility</li> <li>Lightning addresses abstract complex payment requests into human-readable identifiers, enabling seamless integration with existing communication protocols</li> <li>Key management, backup procedures, and operational security are fundamental to preventing fund loss and maintaining system integrity</li> <li>Direct value transfer creates immediate feedback loops between content quality and creator compensation, fundamentally altering engagement incentives</li> </ol>"},{"location":"getting-started/what-is-nostr/","title":"What is Nostr?","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What Nostr stands for and its core principles</li> <li>How Nostr differs from traditional social media platforms</li> <li>The fundamental components of the Nostr protocol</li> <li>The benefits of decentralized social networking</li> </ul>"},{"location":"getting-started/what-is-nostr/#introduction","title":"Introduction","text":"<p>Nostr stands for \"Notes and Other Stuff Transmitted by Relays.\" It is a simple, open protocol that enables global, decentralized, and censorship-resistant social networking.</p> <p>Unlike traditional social media platforms, Nostr operates without a central authority, giving users complete control over their identity and data through cryptographic key pairs.</p>"},{"location":"getting-started/what-is-nostr/#core-principles","title":"Core Principles","text":""},{"location":"getting-started/what-is-nostr/#decentralized-architecture","title":"Decentralized Architecture","text":"<p>Nostr operates on a network of independent relays rather than centralized servers, eliminating single points of failure and control.</p>"},{"location":"getting-started/what-is-nostr/#user-sovereignty","title":"User Sovereignty","text":"<p>Users maintain full ownership of their identity through cryptographic keys, ensuring no platform can ban or silence them permanently.</p>"},{"location":"getting-started/what-is-nostr/#protocol-simplicity","title":"Protocol Simplicity","text":"<p>The protocol prioritizes simplicity over complexity, making it reliable, performant, and easy to implement.</p>"},{"location":"getting-started/what-is-nostr/#censorship-resistance","title":"Censorship Resistance","text":"<p>The distributed nature of relays ensures that content cannot be globally censored by any single entity.</p>"},{"location":"getting-started/what-is-nostr/#protocol-architecture","title":"Protocol Architecture","text":"<pre><code>graph TB\n    User[\ud83d\udc64 User] --&gt;|publishes events| R1[\ud83d\udd04 Relay 1]\n    User --&gt;|publishes events| R2[\ud83d\udd04 Relay 2]\n    User --&gt;|publishes events| R3[\ud83d\udd04 Relay 3]\n\n    R1 --&gt;|distributes to| Follower[\ud83d\udc64 Follower]\n    R2 --&gt;|distributes to| Follower\n    R3 --&gt;|distributes to| OtherUsers[\ud83d\udc64 Other Users]\n\n    Follower --&gt;|publishes response| R1\n    Follower --&gt;|publishes response| R2\n\n    R1 --&gt;|delivers to| User\n    R2 --&gt;|delivers to| User\n\n    style User fill:#e1f5fe\n    style Follower fill:#e8f5e8\n    style OtherUsers fill:#e8f5e8\n    style R1 fill:#fff3e0\n    style R2 fill:#fff3e0\n    style R3 fill:#fff3e0</code></pre> <p>The protocol operates through the following process:</p> <ol> <li>Event Creation: Users create signed events using their private keys</li> <li>Relay Distribution: Events are sent to multiple relays for storage and distribution</li> <li>Content Discovery: Other users query relays to retrieve relevant events</li> <li>Network Interaction: Users can respond and interact, creating new events in the network</li> </ol>"},{"location":"getting-started/what-is-nostr/#protocol-components","title":"Protocol Components","text":""},{"location":"getting-started/what-is-nostr/#events","title":"Events","text":"<p>All content in Nostr is represented as events - JSON objects containing standardized fields:</p> <pre><code>{\n  \"id\": \"event_identifier_hash\",\n  \"pubkey\": \"author_public_key\", \n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Message content\",\n  \"sig\": \"cryptographic_signature\"\n}\n</code></pre> <p>Key Properties: - Immutable: Events cannot be modified after creation - Verifiable: Digital signatures ensure authenticity - Portable: Events work across all Nostr clients and relays</p>"},{"location":"getting-started/what-is-nostr/#relays","title":"Relays","text":"<p>Independent servers that store and forward events. Relay characteristics include:</p> <ul> <li>Autonomous Operation: Each relay operates independently with its own policies</li> <li>Configurable Filtering: Relays can implement custom content moderation rules</li> <li>Network Redundancy: Multiple relays provide fault tolerance and censorship resistance</li> <li>Simple Protocol: Relays implement a straightforward WebSocket-based API</li> </ul>"},{"location":"getting-started/what-is-nostr/#clients","title":"Clients","text":"<p>Applications that provide user interfaces for interacting with the Nostr protocol:</p> <ul> <li>Key Management: Secure generation, storage, and usage of cryptographic keys</li> <li>Multi-Relay Communication: Connect to multiple relays simultaneously for redundancy</li> <li>Event Processing: Create, sign, verify, and display events according to protocol specifications</li> <li>User Experience: Abstract protocol complexity behind intuitive interfaces</li> </ul>"},{"location":"getting-started/what-is-nostr/#technical-implementation","title":"Technical Implementation","text":""},{"location":"getting-started/what-is-nostr/#event-structure-and-validation","title":"Event Structure and Validation","text":"<p>Events must conform to specific validation rules:</p> Required FieldsValidation Process <pre><code>{\n  \"id\": \"32-byte lowercase hex of sha256 of serialized event data\",\n  \"pubkey\": \"32-byte lowercase hex of the public key\",\n  \"created_at\": \"unix timestamp in seconds\",\n  \"kind\": \"integer between 0 and 65535\",\n  \"tags\": \"array of arrays of strings\",\n  \"content\": \"arbitrary string\",\n  \"sig\": \"64-byte lowercase hex of signature\"\n}\n</code></pre> <pre><code>// Pseudocode for event validation\nfunction validateEvent(event) {\n  // 1. Verify required fields are present\n  if (!hasRequiredFields(event)) return false;\n\n  // 2. Verify ID matches content hash\n  if (event.id !== computeEventId(event)) return false;\n\n  // 3. Verify signature\n  if (!verifySignature(event.sig, event.id, event.pubkey)) return false;\n\n  // 4. Check timestamp validity\n  if (!isValidTimestamp(event.created_at)) return false;\n\n  return true;\n}\n</code></pre>"},{"location":"getting-started/what-is-nostr/#relay-communication-protocol","title":"Relay Communication Protocol","text":"<p>Relays implement a WebSocket-based protocol with three message types:</p> Message Type Purpose Format EVENT Publish events to relay <code>[\"EVENT\", &lt;event JSON&gt;]</code> REQ Request events from relay <code>[\"REQ\", &lt;subscription_id&gt;, &lt;filters...&gt;]</code> CLOSE Close subscription <code>[\"CLOSE\", &lt;subscription_id&gt;]</code>"},{"location":"getting-started/what-is-nostr/#architectural-comparison","title":"Architectural Comparison","text":"Aspect Traditional Platforms Nostr Protocol Identity Control Platform-owned accounts User-controlled cryptographic keys Data Storage Centralized databases Distributed relay network Content Moderation Platform-wide policies Per-relay policies with user choice Algorithm Control Proprietary, profit-driven Open, user-configurable Vendor Lock-in High switching costs Portable identity and data Single Point of Failure Platform infrastructure No global dependencies"},{"location":"getting-started/what-is-nostr/#hands-on-exercise-network-exploration","title":"Hands-On Exercise: Network Exploration","text":"<p>Protocol Analysis Exercise</p> <p>Objective: Examine real Nostr events to understand protocol structure</p> <p>Steps: 1. Visit nostr.band to explore the network 2. Search for recent events using hashtag <code>#nostr</code> 3. Click on individual events to examine their JSON structure 4. Identify the different event kinds and their purposes 5. Note the variety of relays being used across the network</p> <p>Analysis Questions: - How many different event kinds can you identify? - What patterns do you notice in the tag structures? - How do public keys and signatures provide identity verification?</p>"},{"location":"getting-started/what-is-nostr/#protocol-benefits-and-trade-offs","title":"Protocol Benefits and Trade-offs","text":"<p>Protocol Advantages</p> <p>Decentralization Benefits</p> <ul> <li>\u2705 Elimination of single points of failure or control</li> <li>\u2705 Resistance to censorship and platform manipulation</li> <li>\u2705 User ownership of identity and data</li> <li>\u2705 Competitive ecosystem of clients and services</li> </ul> <p>Technical Advantages</p> <ul> <li>\u2705 Simple, well-defined protocol specification</li> <li>\u2705 Cryptographic security and verification</li> <li>\u2705 Extensible design through NIPs (Nostr Implementation Possibilities)</li> <li>\u2705 Low barrier to entry for developers and relay operators</li> </ul> <p>Technical Considerations</p> <p>Current Limitations</p> <ul> <li>\u26a0\ufe0f Key management complexity for average users</li> <li>\u26a0\ufe0f Potential for spam without centralized filtering</li> <li>\u26a0\ufe0f Relay discovery and selection challenges</li> <li>\u26a0\ufe0f Limited built-in privacy features for metadata</li> </ul> <p>Scalability Considerations</p> <ul> <li>\u26a0\ufe0f Relay storage and bandwidth requirements</li> <li>\u26a0\ufe0f Event verification computational overhead</li> <li>\u26a0\ufe0f Network effects and adoption challenges</li> </ul>"},{"location":"getting-started/what-is-nostr/#nips-protocol-extensions","title":"NIPs: Protocol Extensions","text":"<p>Nostr Implementation Possibilities (NIPs) define protocol extensions and standards:</p> NIP Title Purpose NIP-01 Basic protocol flow Core event and relay specifications NIP-02 Contact list and petnames Following and contact management NIP-04 Encrypted direct messages Private communication NIP-05 DNS-based verification Human-readable identifiers NIP-09 Event deletion Content removal mechanisms NIP-11 Relay information document Relay metadata and policies"},{"location":"getting-started/what-is-nostr/#practical-exercise-event-analysis","title":"Practical Exercise: Event Analysis","text":"<p>Technical Deep Dive</p> <p>Task: Analyze the structure of different Nostr event types</p> <p>Instructions: 1. Use a Nostr client or web interface to examine events 2. Document the differences between event kinds (0, 1, 3, 7) 3. Analyze tag usage patterns across different event types 4. Verify event signatures using available tools</p> <p>Expected Outcomes: - Understanding of event structure variations - Recognition of tag-based metadata patterns - Appreciation for cryptographic verification mechanisms</p>"},{"location":"getting-started/what-is-nostr/#next-steps","title":"Next Steps","text":"<p>Understanding Nostr's foundational architecture prepares you for implementing practical applications. The protocol's simplicity enables rapid development while its cryptographic foundations ensure security and user sovereignty.</p>      Lightning Wallet Integration \u2192"},{"location":"getting-started/what-is-nostr/#knowledge-verification","title":"Knowledge Verification","text":"<p>Technical Comprehension Check</p> <ol> <li>What are the three fundamental components of the Nostr protocol?</li> <li>How does event verification work in Nostr?</li> <li>What distinguishes Nostr relays from traditional social media servers?</li> <li>Why is the protocol designed around simple JSON events?</li> </ol> Technical Answers <ol> <li>Events (content data structures), Relays (storage and distribution infrastructure), and Clients (user interface applications)</li> <li>Digital signatures using cryptographic key pairs verify event authenticity, while content hashing ensures integrity</li> <li>Relays operate independently with individual policies, creating a distributed network without central control points</li> <li>JSON simplicity ensures broad compatibility, easy parsing, and straightforward protocol implementation across different programming languages</li> </ol>"},{"location":"tutorials/relay-communication/","title":"Relay Communication","text":"<p>What You'll Learn</p> <p>In this tutorial, you'll master:</p> <ul> <li>How Nostr relays work and their role in the network</li> <li>WebSocket communication patterns</li> <li>Subscription filters and real-time updates</li> <li>Publishing events to multiple relays</li> <li>Handling connection failures and retries</li> <li>Relay selection strategies</li> </ul> <p>Prerequisites</p> <ul> <li>Understanding of Nostr events</li> <li>Basic WebSocket knowledge</li> <li>JavaScript async/await patterns</li> </ul>"},{"location":"tutorials/relay-communication/#understanding-relays","title":"Understanding Relays","text":"<p>Relays are the backbone of the Nostr network. They're simple servers that:</p> <ul> <li>Store events submitted by clients</li> <li>Serve events to clients based on filters</li> <li>Relay events between clients in real-time</li> <li>Maintain no user accounts - just events</li> </ul> <p>Think of relays as smart databases that speak a common protocol.</p>"},{"location":"tutorials/relay-communication/#the-relay-protocol","title":"The Relay Protocol","text":"<p>Nostr uses WebSockets for real-time communication between clients and relays. All messages are JSON arrays with specific formats:</p>"},{"location":"tutorials/relay-communication/#client-to-relay-messages","title":"Client to Relay Messages","text":"Message Type Format Purpose <code>EVENT</code> <code>[\"EVENT\", &lt;event&gt;]</code> Publish an event <code>REQ</code> <code>[\"REQ\", &lt;sub_id&gt;, &lt;filters&gt;...]</code> Subscribe to events <code>CLOSE</code> <code>[\"CLOSE\", &lt;sub_id&gt;]</code> Close a subscription <code>AUTH</code> <code>[\"AUTH\", &lt;event&gt;]</code> Authenticate with relay <code>COUNT</code> <code>[\"COUNT\", &lt;sub_id&gt;, &lt;filters&gt;...]</code> Count matching events"},{"location":"tutorials/relay-communication/#relay-to-client-messages","title":"Relay to Client Messages","text":"Message Type Format Purpose <code>EVENT</code> <code>[\"EVENT\", &lt;sub_id&gt;, &lt;event&gt;]</code> Send event to client <code>EOSE</code> <code>[\"EOSE\", &lt;sub_id&gt;]</code> End of stored events <code>OK</code> <code>[\"OK\", &lt;event_id&gt;, &lt;true\\|false&gt;, &lt;message&gt;]</code> Event publish result <code>NOTICE</code> <code>[\"NOTICE\", &lt;message&gt;]</code> Human-readable message <code>CLOSED</code> <code>[\"CLOSED\", &lt;sub_id&gt;, &lt;message&gt;]</code> Subscription closed <code>AUTH</code> <code>[\"AUTH\", &lt;challenge&gt;]</code> Authentication challenge <code>COUNT</code> <code>[\"COUNT\", &lt;sub_id&gt;, &lt;count&gt;]</code> Event count response"},{"location":"tutorials/relay-communication/#connecting-to-relays","title":"Connecting to Relays","text":"<p>Let's start with a basic relay connection:</p> Basic Connection <pre><code>import { relayInit } from 'nostr-tools'\n\nasync function connectToRelay(url) {\n    const relay = relayInit(url)\n\n    relay.on('connect', () =&gt; {\n        console.log(`Connected to ${url}`)\n    })\n\n    relay.on('error', () =&gt; {\n        console.error(`Failed to connect to ${url}`)\n    })\n\n    relay.on('disconnect', () =&gt; {\n        console.log(`Disconnected from ${url}`)\n    })\n\n    try {\n        await relay.connect()\n        return relay\n    } catch (error) {\n        console.error('Connection failed:', error)\n        throw error\n    }\n}\n\n// Usage\nconst relay = await connectToRelay('wss://relay.damus.io')\n</code></pre>"},{"location":"tutorials/relay-communication/#best-practices","title":"Best Practices","text":"<p>Relay Communication Best Practices</p> <ol> <li>Use Multiple Relays: Never rely on a single relay</li> <li>Handle Failures Gracefully: Always have fallback mechanisms</li> <li>Monitor Health: Track relay performance and switch when needed</li> <li>Deduplicate Events: Handle the same event from multiple relays</li> <li>Limit Subscriptions: Don't overload relays with too many filters</li> <li>Close Unused Subscriptions: Clean up when done</li> <li>Respect Rate Limits: Check relay info for limitations</li> </ol> <p>Common Pitfalls</p> <ul> <li>Not handling disconnections: Relays can go offline</li> <li>Forgetting to unsubscribe: Can lead to memory leaks</li> <li>Too many concurrent subscriptions: Can overwhelm clients</li> <li>Ignoring relay limitations: Check max_subscriptions and other limits</li> <li>Not validating events: Always verify signatures and format</li> </ul>"},{"location":"tutorials/relay-communication/#next-steps","title":"Next Steps","text":"<p>Now you can explore:</p> <ul> <li>Understanding Events</li> </ul>      \u0019\u0010 Previous: Understanding Events"},{"location":"tutorials/simple-client/","title":"Building a Simple Nostr Client","text":"<p>What You'll Build</p> <p>In this tutorial, you'll create a basic Nostr client that can:</p> <ul> <li>Generate and manage cryptographic keys</li> <li>Connect to Nostr relays</li> <li>Publish text notes</li> <li>Subscribe to and display events</li> <li>Handle user interactions</li> </ul> <p>Prerequisites</p> <ul> <li>Basic JavaScript knowledge</li> <li>Understanding of Nostr fundamentals</li> <li>Node.js installed on your system</li> </ul>"},{"location":"tutorials/simple-client/#project-setup","title":"Project Setup","text":"<p>Let's start by creating a new project and installing the necessary dependencies.</p>"},{"location":"tutorials/simple-client/#1-initialize-the-project","title":"1. Initialize the Project","text":"<pre><code>mkdir my-nostr-client\ncd my-nostr-client\nnpm init -y\n</code></pre>"},{"location":"tutorials/simple-client/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install nostr-tools\nnpm install --save-dev vite\n</code></pre>"},{"location":"tutorials/simple-client/#3-create-project-structure","title":"3. Create Project Structure","text":"<pre><code>my-nostr-client/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 main.js\n\u251c\u2500\u2500 style.css\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"tutorials/simple-client/#building-the-html-interface","title":"Building the HTML Interface","text":"<p>Create a simple but functional interface:</p> index.htmlstyle.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Nostr Client&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;header&gt;\n            &lt;h1&gt;\ud83d\ude80 My Nostr Client&lt;/h1&gt;\n            &lt;div class=\"connection-status\" id=\"status\"&gt;Disconnected&lt;/div&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;!-- Key Management Section --&gt;\n            &lt;section class=\"key-section\"&gt;\n                &lt;h2&gt;\ud83d\udd11 Your Identity&lt;/h2&gt;\n                &lt;div class=\"key-display\"&gt;\n                    &lt;label&gt;Public Key (npub):&lt;/label&gt;\n                    &lt;input type=\"text\" id=\"pubkey\" readonly&gt;\n                    &lt;button id=\"generate-keys\"&gt;Generate New Keys&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/section&gt;\n\n            &lt;!-- Compose Section --&gt;\n            &lt;section class=\"compose-section\"&gt;\n                &lt;h2&gt;\u270d\ufe0f Compose Note&lt;/h2&gt;\n                &lt;textarea id=\"note-content\" placeholder=\"What's on your mind?\"&gt;&lt;/textarea&gt;\n                &lt;button id=\"publish-note\"&gt;Publish Note&lt;/button&gt;\n            &lt;/section&gt;\n\n            &lt;!-- Feed Section --&gt;\n            &lt;section class=\"feed-section\"&gt;\n                &lt;h2&gt;\ud83d\udcf0 Global Feed&lt;/h2&gt;\n                &lt;div id=\"feed\"&gt;&lt;/div&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader {\n    background: white;\n    padding: 20px;\n    border-radius: 12px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nh1 {\n    color: #667eea;\n    font-size: 2rem;\n}\n\n.connection-status {\n    padding: 8px 16px;\n    border-radius: 20px;\n    font-weight: 600;\n    font-size: 0.9rem;\n}\n\n.connection-status.connected {\n    background: #10b981;\n    color: white;\n}\n\n.connection-status.disconnected {\n    background: #ef4444;\n    color: white;\n}\n\nsection {\n    background: white;\n    padding: 20px;\n    border-radius: 12px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n}\n\nh2 {\n    margin-bottom: 15px;\n    color: #374151;\n}\n\n.key-display {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\ninput, textarea {\n    padding: 12px;\n    border: 2px solid #e5e7eb;\n    border-radius: 8px;\n    font-size: 14px;\n    transition: border-color 0.3s;\n}\n\ninput:focus, textarea:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\n#pubkey {\n    flex: 1;\n    min-width: 300px;\n    font-family: monospace;\n    font-size: 12px;\n}\n\n#note-content {\n    width: 100%;\n    min-height: 100px;\n    resize: vertical;\n    margin-bottom: 10px;\n}\n\nbutton {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 8px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n\nbutton:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n}\n\nbutton:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.note {\n    background: #f9fafb;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    padding: 15px;\n    margin-bottom: 10px;\n}\n\n.note-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n    font-size: 0.9rem;\n    color: #6b7280;\n}\n\n.note-author {\n    font-family: monospace;\n    font-weight: 600;\n}\n\n.note-content {\n    line-height: 1.6;\n    white-space: pre-wrap;\n}\n\n.loading {\n    text-align: center;\n    color: #6b7280;\n    font-style: italic;\n}\n</code></pre>"},{"location":"tutorials/simple-client/#implementing-the-javascript-logic","title":"Implementing the JavaScript Logic","text":"<p>Now let's build the core functionality:</p> main.js <pre><code>import { \n    generatePrivateKey, \n    getPublicKey, \n    finishEvent, \n    relayInit,\n    nip19\n} from 'nostr-tools'\n\nclass NostrClient {\n    constructor() {\n        this.privateKey = null\n        this.publicKey = null\n        this.relays = []\n        this.connectedRelays = new Set()\n\n        this.initializeElements()\n        this.setupEventListeners()\n        this.loadOrGenerateKeys()\n        this.connectToRelays()\n    }\n\n    initializeElements() {\n        this.elements = {\n            status: document.getElementById('status'),\n            pubkey: document.getElementById('pubkey'),\n            generateKeys: document.getElementById('generate-keys'),\n            noteContent: document.getElementById('note-content'),\n            publishNote: document.getElementById('publish-note'),\n            feed: document.getElementById('feed')\n        }\n    }\n\n    setupEventListeners() {\n        this.elements.generateKeys.addEventListener('click', () =&gt; {\n            this.generateNewKeys()\n        })\n\n        this.elements.publishNote.addEventListener('click', () =&gt; {\n            this.publishNote()\n        })\n\n        // Enable publishing with Ctrl+Enter\n        this.elements.noteContent.addEventListener('keydown', (e) =&gt; {\n            if (e.ctrlKey &amp;&amp; e.key === 'Enter') {\n                this.publishNote()\n            }\n        })\n    }\n\n    loadOrGenerateKeys() {\n        // Try to load existing keys from localStorage\n        const savedPrivateKey = localStorage.getItem('nostr-private-key')\n\n        if (savedPrivateKey) {\n            this.privateKey = savedPrivateKey\n            this.publicKey = getPublicKey(savedPrivateKey)\n        } else {\n            this.generateNewKeys()\n        }\n\n        this.updateKeyDisplay()\n    }\n\n    generateNewKeys() {\n        this.privateKey = generatePrivateKey()\n        this.publicKey = getPublicKey(this.privateKey)\n\n        // Save to localStorage\n        localStorage.setItem('nostr-private-key', this.privateKey)\n\n        this.updateKeyDisplay()\n        this.showNotification('New keys generated! \ud83c\udf89')\n    }\n\n    updateKeyDisplay() {\n        if (this.publicKey) {\n            const npub = nip19.npubEncode(this.publicKey)\n            this.elements.pubkey.value = npub\n        }\n    }\n\n    async connectToRelays() {\n        const relayUrls = [\n            'wss://relay.damus.io',\n            'wss://nos.lol',\n            'wss://relay.snort.social'\n        ]\n\n        this.updateStatus('Connecting...')\n\n        for (const url of relayUrls) {\n            try {\n                const relay = relayInit(url)\n\n                relay.on('connect', () =&gt; {\n                    console.log(`Connected to ${url}`)\n                    this.connectedRelays.add(url)\n                    this.updateConnectionStatus()\n                    this.subscribeToFeed(relay)\n                })\n\n                relay.on('error', () =&gt; {\n                    console.log(`Failed to connect to ${url}`)\n                    this.connectedRelays.delete(url)\n                    this.updateConnectionStatus()\n                })\n\n                await relay.connect()\n                this.relays.push(relay)\n\n            } catch (error) {\n                console.error(`Error connecting to ${url}:`, error)\n            }\n        }\n    }\n\n    updateConnectionStatus() {\n        const connectedCount = this.connectedRelays.size\n        if (connectedCount &gt; 0) {\n            this.updateStatus(`Connected to ${connectedCount} relays`, 'connected')\n        } else {\n            this.updateStatus('Disconnected', 'disconnected')\n        }\n    }\n\n    updateStatus(message, className = '') {\n        this.elements.status.textContent = message\n        this.elements.status.className = `connection-status ${className}`\n    }\n\n    subscribeToFeed(relay) {\n        const sub = relay.sub([\n            {\n                kinds: [1], // Text notes\n                limit: 20\n            }\n        ])\n\n        sub.on('event', (event) =&gt; {\n            this.addEventToFeed(event)\n        })\n    }\n\n    addEventToFeed(event) {\n        const noteElement = this.createNoteElement(event)\n\n        // Add to top of feed\n        if (this.elements.feed.firstChild) {\n            this.elements.feed.insertBefore(noteElement, this.elements.feed.firstChild)\n        } else {\n            this.elements.feed.appendChild(noteElement)\n        }\n\n        // Limit feed to 50 notes\n        while (this.elements.feed.children.length &gt; 50) {\n            this.elements.feed.removeChild(this.elements.feed.lastChild)\n        }\n    }\n\n    createNoteElement(event) {\n        const noteDiv = document.createElement('div')\n        noteDiv.className = 'note'\n\n        const date = new Date(event.created_at * 1000)\n        const timeString = date.toLocaleString()\n\n        // Truncate public key for display\n        const shortPubkey = event.pubkey.slice(0, 8) + '...' + event.pubkey.slice(-8)\n\n        noteDiv.innerHTML = `\n            &lt;div class=\"note-header\"&gt;\n                &lt;span class=\"note-author\"&gt;${shortPubkey}&lt;/span&gt;\n                &lt;span class=\"note-time\"&gt;${timeString}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"note-content\"&gt;${this.escapeHtml(event.content)}&lt;/div&gt;\n        `\n\n        return noteDiv\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div')\n        div.textContent = text\n        return div.innerHTML\n    }\n\n    async publishNote() {\n        const content = this.elements.noteContent.value.trim()\n\n        if (!content) {\n            this.showNotification('Please enter some content!', 'error')\n            return\n        }\n\n        if (this.connectedRelays.size === 0) {\n            this.showNotification('Not connected to any relays!', 'error')\n            return\n        }\n\n        try {\n            this.elements.publishNote.disabled = true\n            this.elements.publishNote.textContent = 'Publishing...'\n\n            const event = finishEvent({\n                kind: 1,\n                created_at: Math.floor(Date.now() / 1000),\n                tags: [],\n                content: content,\n            }, this.privateKey)\n\n            // Publish to all connected relays\n            const publishPromises = this.relays.map(relay =&gt; {\n                if (relay.status === 1) { // Connected\n                    return relay.publish(event)\n                }\n            })\n\n            await Promise.allSettled(publishPromises)\n\n            this.elements.noteContent.value = ''\n            this.showNotification('Note published! \ud83c\udf89')\n\n        } catch (error) {\n            console.error('Error publishing note:', error)\n            this.showNotification('Failed to publish note', 'error')\n        } finally {\n            this.elements.publishNote.disabled = false\n            this.elements.publishNote.textContent = 'Publish Note'\n        }\n    }\n\n    showNotification(message, type = 'success') {\n        // Create notification element\n        const notification = document.createElement('div')\n        notification.className = `notification ${type}`\n        notification.textContent = message\n\n        // Style the notification\n        Object.assign(notification.style, {\n            position: 'fixed',\n            top: '20px',\n            right: '20px',\n            padding: '12px 20px',\n            borderRadius: '8px',\n            color: 'white',\n            fontWeight: '600',\n            zIndex: '1000',\n            transform: 'translateX(100%)',\n            transition: 'transform 0.3s ease'\n        })\n\n        if (type === 'error') {\n            notification.style.background = '#ef4444'\n        } else {\n            notification.style.background = '#10b981'\n        }\n\n        document.body.appendChild(notification)\n\n        // Animate in\n        setTimeout(() =&gt; {\n            notification.style.transform = 'translateX(0)'\n        }, 100)\n\n        // Remove after 3 seconds\n        setTimeout(() =&gt; {\n            notification.style.transform = 'translateX(100%)'\n            setTimeout(() =&gt; {\n                document.body.removeChild(notification)\n            }, 300)\n        }, 3000)\n    }\n}\n\n// Initialize the client when the page loads\ndocument.addEventListener('DOMContentLoaded', () =&gt; {\n    new NostrClient()\n})\n</code></pre>"},{"location":"tutorials/simple-client/#adding-development-scripts","title":"Adding Development Scripts","text":"<p>Update your <code>package.json</code> to include development scripts:</p> <pre><code>{\n  \"name\": \"my-nostr-client\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"nostr-tools\": \"^1.17.0\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.4.0\"\n  }\n}\n</code></pre>"},{"location":"tutorials/simple-client/#running-your-client","title":"Running Your Client","text":"<p>Start the development server:</p> <pre><code>npm run dev\n</code></pre> <p>Open your browser to <code>http://localhost:5173</code> and you should see your Nostr client!</p>"},{"location":"tutorials/simple-client/#testing-your-client","title":"Testing Your Client","text":"<p>Try These Features</p> <ol> <li>Generate Keys: Click \"Generate New Keys\" to create a new identity</li> <li>Publish a Note: Write something in the text area and click \"Publish Note\"</li> <li>View Feed: Watch as notes from other users appear in the global feed</li> <li>Keyboard Shortcut: Use Ctrl+Enter to quickly publish notes</li> </ol>"},{"location":"tutorials/simple-client/#understanding-the-code","title":"Understanding the Code","text":""},{"location":"tutorials/simple-client/#key-management","title":"Key Management","text":"<pre><code>// Generate a new private key\nconst privateKey = generatePrivateKey()\n\n// Derive the public key\nconst publicKey = getPublicKey(privateKey)\n\n// Encode as npub for display\nconst npub = nip19.npubEncode(publicKey)\n</code></pre>"},{"location":"tutorials/simple-client/#event-creation","title":"Event Creation","text":"<pre><code>const event = finishEvent({\n    kind: 1,              // Text note\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],             // No tags for simple notes\n    content: \"Hello Nostr!\",\n}, privateKey)\n</code></pre>"},{"location":"tutorials/simple-client/#relay-communication","title":"Relay Communication","text":"<pre><code>// Connect to relay\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\n\n// Subscribe to events\nconst sub = relay.sub([{ kinds: [1], limit: 20 }])\nsub.on('event', handleEvent)\n\n// Publish event\nawait relay.publish(event)\n</code></pre>"},{"location":"tutorials/simple-client/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've built a working Nostr client. Here are some ideas for enhancements:</p> <p>Enhancement Ideas</p> <ul> <li>User Profiles: Display user metadata and avatars</li> <li>Replies: Implement threaded conversations</li> <li>Reactions: Add like/dislike functionality</li> <li>Media: Support image and video uploads</li> <li>Search: Add content and user search</li> <li>Relay Management: Let users add/remove relays</li> </ul>"},{"location":"tutorials/simple-client/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <p>Connection Problems - Check if relays are online - Try different relay URLs - Check browser console for errors</p> <p>Publishing Fails - Ensure you have valid keys - Check relay connection status - Verify content isn't empty</p>      \u2190 Previous: Creating a Bot         Next: Advanced Features \u2192"},{"location":"tutorials/understanding-events/","title":"Understanding Nostr Events","text":"<p>What You'll Learn</p> <p>In this tutorial, you'll understand:</p> <ul> <li>What Nostr events are and how they work</li> <li>Event structure and required fields</li> <li>Different types of events (kinds)</li> <li>How to create, sign, and verify events</li> <li>Event tags and their purposes</li> </ul> <p>Prerequisites</p> <ul> <li>Basic understanding of Nostr fundamentals</li> <li>Basic JavaScript knowledge</li> <li>Understanding of cryptographic signatures</li> </ul>"},{"location":"tutorials/understanding-events/#what-is-a-nostr-event","title":"What is a Nostr Event?","text":"<p>A Nostr event is the fundamental unit of data in the Nostr protocol. Everything that happens on Nostr - from posting a note to following someone - is represented as an event. Think of events as immutable, cryptographically signed messages that can be shared across the network.</p>"},{"location":"tutorials/understanding-events/#event-structure","title":"Event Structure","text":"<p>Every Nostr event follows a standardized JSON structure with specific required fields:</p> <pre><code>{\n  \"id\": \"4376c65d2f232afbe9b882a35baa4f6fe8667c4e684749af565f981833ed6a65\",\n  \"pubkey\": \"6e468422dfb74a5738702a8823b9b28168abab8655faacb6853cd0ee15deee93\",\n  \"created_at\": 1673347337,\n  \"kind\": 1,\n  \"tags\": [\n    [\"e\", \"5c83da77af1dec6d7289834998ad7aafbd9e2191396d75ec3cc27f5a77226f36\"],\n    [\"p\", \"f7234bd4c1394dda46d09f35bd384dd30cc552ad5541990f98844fb06676e9ca\"]\n  ],\n  \"content\": \"Hello Nostr! This is my first note.\",\n  \"sig\": \"908a15e46fb4d8675bab026fc230a0e3542bfade63da02d542fb78b2a8513fcd0092619a2c8c1221e581946e0191f2af505250431fcc808d5210a7d8e858c3e\"\n}\n</code></pre>"},{"location":"tutorials/understanding-events/#required-fields","title":"Required Fields","text":"<p>Let's break down each field:</p> Field Type Description <code>id</code> string 32-byte hex-encoded SHA256 hash of the serialized event <code>pubkey</code> string 32-byte hex-encoded public key of the event creator <code>created_at</code> number Unix timestamp in seconds <code>kind</code> number Event type identifier (0-65535) <code>tags</code> array Array of tag arrays for metadata and references <code>content</code> string Arbitrary content string <code>sig</code> string 64-byte hex signature of the event hash"},{"location":"tutorials/understanding-events/#creating-your-first-event","title":"Creating Your First Event","text":"<p>Let's create a simple text note event step by step:</p> JavaScriptAlternative (using finishEvent) <pre><code>import { \n    generatePrivateKey, \n    getPublicKey, \n    finishEvent,\n    getEventHash,\n    signEvent \n} from 'nostr-tools'\n\n// Generate keys (in practice, you'd load existing keys)\nconst privateKey = generatePrivateKey()\nconst publicKey = getPublicKey(privateKey)\n\n// Create the unsigned event\nconst unsignedEvent = {\n    kind: 1,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],\n    content: \"Hello Nostr! This is my first event.\",\n    pubkey: publicKey\n}\n\n// Calculate the event ID and sign it\nconst eventId = getEventHash(unsignedEvent)\nconst signature = signEvent(unsignedEvent, privateKey)\n\n// Complete event\nconst signedEvent = {\n    ...unsignedEvent,\n    id: eventId,\n    sig: signature\n}\n\nconsole.log('Created event:', signedEvent)\n</code></pre> <pre><code>import { generatePrivateKey, getPublicKey, finishEvent } from 'nostr-tools'\n\nconst privateKey = generatePrivateKey()\nconst publicKey = getPublicKey(privateKey)\n\n// finishEvent handles ID calculation and signing automatically\nconst event = finishEvent({\n    kind: 1,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],\n    content: \"Hello Nostr! This is my first event.\"\n}, privateKey)\n\nconsole.log('Created event:', event)\n</code></pre>"},{"location":"tutorials/understanding-events/#event-serialization","title":"Event Serialization","text":"<p>The event ID is calculated by hashing a specific serialized representation of the event. This ensures that any modification to the event will result in a different ID.</p> <pre><code>// The serialization format is a JSON array:\nconst serializedEvent = JSON.stringify([\n    0,                    // Reserved (always 0)\n    publicKey,           // Public key as hex string\n    createdAt,           // Unix timestamp as number\n    kind,                // Event kind as number\n    tags,                // Tags as array of arrays\n    content              // Content as string\n])\n\n// The ID is the SHA256 hash of this serialized data\nconst eventId = sha256(serializedEvent)\n</code></pre> <p>Serialization Rules</p> <p>When serializing events for ID calculation:</p> <ul> <li>Use UTF-8 encoding</li> <li>No whitespace or formatting</li> <li>Escape these characters in content: <code>\\n</code>, <code>\\\"</code>, <code>\\\\</code>, <code>\\r</code>, <code>\\t</code>, <code>\\b</code>, <code>\\f</code></li> </ul>"},{"location":"tutorials/understanding-events/#event-kinds","title":"Event Kinds","text":"<p>Event kinds determine how clients should interpret and display events. Here are the most common ones:</p>"},{"location":"tutorials/understanding-events/#regular-events-stored-by-relays","title":"Regular Events (Stored by Relays)","text":"Kind Name Description NIP 0 User Metadata Profile information NIP-01 1 Short Text Note Twitter-like posts NIP-01 3 Follow List Who a user follows NIP-02 4 Encrypted Direct Message Private messages NIP-04 5 Event Deletion Request Request to delete events NIP-09 6 Repost Share another event NIP-18 7 Reaction Like/dislike events NIP-25"},{"location":"tutorials/understanding-events/#replaceable-events-latest-overwrites-previous","title":"Replaceable Events (Latest Overwrites Previous)","text":"Kind Name Description NIP 10000 Mute List Blocked users NIP-51 10001 Pin List Pinned events NIP-51 10002 Relay List User's relays NIP-65"},{"location":"tutorials/understanding-events/#addressable-events-replaceable-with-identifier","title":"Addressable Events (Replaceable with Identifier)","text":"Kind Name Description NIP 30000 Follow Sets Named follow lists NIP-51 30001 Generic Lists Categorized lists NIP-51 30023 Long-form Content Blog posts/articles NIP-23"},{"location":"tutorials/understanding-events/#working-with-tags","title":"Working with Tags","text":"<p>Tags provide metadata and create relationships between events. They're arrays where the first element is the tag name:</p>"},{"location":"tutorials/understanding-events/#common-tag-types","title":"Common Tag Types","text":"<pre><code>// Reference another event\n[\"e\", \"event_id\", \"relay_url\", \"marker\"]\n\n// Reference a user\n[\"p\", \"pubkey\", \"relay_url\", \"petname\"]\n\n// Hashtag\n[\"t\", \"bitcoin\"]\n\n// Content identifier\n[\"d\", \"my-article-slug\"]\n\n// Subject/title\n[\"subject\", \"My Article Title\"]\n</code></pre>"},{"location":"tutorials/understanding-events/#example-creating-a-reply","title":"Example: Creating a Reply","text":"<pre><code>const replyEvent = finishEvent({\n    kind: 1,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [\n        [\"e\", originalEventId, \"\", \"reply\"],     // Reply to this event\n        [\"p\", originalAuthorPubkey]              // Notify the author\n    ],\n    content: \"Thanks for sharing this!\"\n}, privateKey)\n</code></pre>"},{"location":"tutorials/understanding-events/#example-profile-metadata","title":"Example: Profile Metadata","text":"<pre><code>const profileEvent = finishEvent({\n    kind: 0,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],\n    content: JSON.stringify({\n        name: \"Alice\",\n        about: \"Bitcoin developer and privacy advocate\",\n        picture: \"https://example.com/alice.jpg\",\n        nip05: \"alice@example.com\"\n    })\n}, privateKey)\n</code></pre>"},{"location":"tutorials/understanding-events/#event-validation","title":"Event Validation","text":"<p>When receiving events, always validate them:</p> Basic ValidationAdvanced Validation <pre><code>import { verifySignature, getEventHash } from 'nostr-tools'\n\nfunction validateEvent(event) {\n    // Check required fields\n    const requiredFields = ['id', 'pubkey', 'created_at', 'kind', 'tags', 'content', 'sig']\n    for (const field of requiredFields) {\n        if (!(field in event)) {\n            return false\n        }\n    }\n\n    // Verify the ID matches the content\n    const calculatedId = getEventHash(event)\n    if (calculatedId !== event.id) {\n        return false\n    }\n\n    // Verify the signature\n    if (!verifySignature(event)) {\n        return false\n    }\n\n    return true\n}\n\n// Usage\nif (validateEvent(receivedEvent)) {\n    console.log('Event is valid!')\n} else {\n    console.log('Invalid event received')\n}\n</code></pre> <pre><code>function validateEventAdvanced(event) {\n    // Basic validation\n    if (!validateEvent(event)) {\n        return { valid: false, error: 'Basic validation failed' }\n    }\n\n    // Check timestamp (not too far in future/past)\n    const now = Math.floor(Date.now() / 1000)\n    const oneDay = 24 * 60 * 60\n\n    if (event.created_at &gt; now + oneDay) {\n        return { valid: false, error: 'Event too far in the future' }\n    }\n\n    if (event.created_at &lt; now - (365 * oneDay)) {\n        return { valid: false, error: 'Event too old' }\n    }\n\n    // Check kind is valid\n    if (event.kind &lt; 0 || event.kind &gt; 65535) {\n        return { valid: false, error: 'Invalid kind' }\n    }\n\n    // Check pubkey format\n    if (!/^[0-9a-f]{64}$/.test(event.pubkey)) {\n        return { valid: false, error: 'Invalid pubkey format' }\n    }\n\n    return { valid: true }\n}\n</code></pre>"},{"location":"tutorials/understanding-events/#event-broadcasting","title":"Event Broadcasting","text":"<p>Once you have a valid event, you can broadcast it to relays:</p> <pre><code>import { relayInit } from 'nostr-tools'\n\nasync function broadcastEvent(event, relayUrls) {\n    const results = []\n\n    for (const url of relayUrls) {\n        try {\n            const relay = relayInit(url)\n            await relay.connect()\n\n            const pub = relay.publish(event)\n\n            pub.on('ok', () =&gt; {\n                console.log(`Published to ${url}`)\n                results.push({ url, success: true })\n            })\n\n            pub.on('failed', (reason) =&gt; {\n                console.log(`Failed to publish to ${url}: ${reason}`)\n                results.push({ url, success: false, reason })\n            })\n\n        } catch (error) {\n            console.error(`Error with ${url}:`, error)\n            results.push({ url, success: false, error: error.message })\n        }\n    }\n\n    return results\n}\n\n// Usage\nconst relays = [\n    'wss://relay.damus.io',\n    'wss://nos.lol',\n    'wss://relay.snort.social'\n]\n\nawait broadcastEvent(myEvent, relays)\n</code></pre>"},{"location":"tutorials/understanding-events/#practical-exercise","title":"Practical Exercise","text":"<p>Let's build a simple event creator and validator:</p> Event CreatorTest It Out <pre><code>class EventCreator {\n    constructor(privateKey) {\n        this.privateKey = privateKey\n        this.publicKey = getPublicKey(privateKey)\n    }\n\n    createTextNote(content, replyTo = null) {\n        const tags = []\n\n        if (replyTo) {\n            tags.push(['e', replyTo.id, '', 'reply'])\n            tags.push(['p', replyTo.pubkey])\n        }\n\n        return finishEvent({\n            kind: 1,\n            created_at: Math.floor(Date.now() / 1000),\n            tags,\n            content\n        }, this.privateKey)\n    }\n\n    createProfile(profile) {\n        return finishEvent({\n            kind: 0,\n            created_at: Math.floor(Date.now() / 1000),\n            tags: [],\n            content: JSON.stringify(profile)\n        }, this.privateKey)\n    }\n\n    createReaction(targetEvent, reaction = '+') {\n        return finishEvent({\n            kind: 7,\n            created_at: Math.floor(Date.now() / 1000),\n            tags: [\n                ['e', targetEvent.id],\n                ['p', targetEvent.pubkey]\n            ],\n            content: reaction\n        }, this.privateKey)\n    }\n}\n\n// Usage\nconst creator = new EventCreator(myPrivateKey)\n\nconst note = creator.createTextNote(\"Hello Nostr!\")\nconst profile = creator.createProfile({\n    name: \"Alice\",\n    about: \"Nostr developer\"\n})\nconst reaction = creator.createReaction(someEvent, '\ud83d\ude80')\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Event Creator&lt;/title&gt;\n    &lt;script type=\"module\"&gt;\n        import { generatePrivateKey, getPublicKey, finishEvent } from 'https://unpkg.com/nostr-tools@1.17.0/lib/esm/index.js'\n\n        const privateKey = generatePrivateKey()\n        const publicKey = getPublicKey(privateKey)\n\n        document.getElementById('create-note').onclick = () =&gt; {\n            const content = document.getElementById('note-content').value\n\n            const event = finishEvent({\n                kind: 1,\n                created_at: Math.floor(Date.now() / 1000),\n                tags: [],\n                content\n            }, privateKey)\n\n            document.getElementById('output').textContent = JSON.stringify(event, null, 2)\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Event Creator&lt;/h1&gt;\n    &lt;textarea id=\"note-content\" placeholder=\"Enter your note...\"&gt;&lt;/textarea&gt;&lt;br&gt;\n    &lt;button id=\"create-note\"&gt;Create Event&lt;/button&gt;\n    &lt;pre id=\"output\"&gt;&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/understanding-events/#understanding-event-flow","title":"Understanding Event Flow","text":"<p>Here's how events flow through the Nostr network:</p> <pre><code>graph LR\n    A[Create Event] --&gt; B[Sign Event]\n    B --&gt; C[Validate Event]\n    C --&gt; D[Broadcast to Relays]\n    D --&gt; E[Relay Stores Event]\n    E --&gt; F[Other Clients Subscribe]\n    F --&gt; G[Clients Receive Event]\n    G --&gt; H[Validate &amp; Display]</code></pre>"},{"location":"tutorials/understanding-events/#best-practices","title":"Best Practices","text":"<p>Event Creation Best Practices</p> <ol> <li>Always validate events before broadcasting</li> <li>Use appropriate kinds for different content types</li> <li>Include relevant tags for discoverability</li> <li>Keep content reasonable - some relays have size limits</li> <li>Use proper timestamps - not too far in past/future</li> <li>Handle failures gracefully when broadcasting</li> </ol> <p>Security Considerations</p> <ul> <li>Never share your private key</li> <li>Always verify signatures on received events</li> <li>Be cautious with events from unknown sources</li> <li>Validate all event fields before processing</li> </ul>"},{"location":"tutorials/understanding-events/#next-steps","title":"Next Steps","text":"<p>Now that you understand events, you can:</p> <ul> <li>Learn about relay communication</li> </ul>      \u2190 Previous: Simple Client         Next: Relay Communication \u2192"},{"location":"es/","title":"\u00bfPor qu\u00e9 LearnNostr?","text":"<ul> <li> <p> Identidad Digital Verdadera</p> <p>Posee tu identidad con llaves criptogr\u00e1ficas. Ninguna autoridad central puede eliminar tu cuenta, censurar tu contenido o controlar tu presencia digital.</p> <p> Aprende sobre las Llaves</p> </li> <li> <p> Resistente a la Censura</p> <p>Construido sobre una red descentralizada de rel\u00e9s que ninguna entidad singular controla. Tu voz no puede ser silenciada por corporaciones o gobiernos.</p> <p> Comenzar</p> </li> <li> <p> Integraci\u00f3n Lightning</p> <p>Pagos Bitcoin sin fricciones a trav\u00e9s de la integraci\u00f3n con Lightning Network. Env\u00eda y recibe valor instant\u00e1neamente a trav\u00e9s del protocolo.</p> <p> Construir Aplicaciones</p> </li> </ul> <p> Comienza Aqu\u00ed: Fundamentos del Protocolo</p> <p>\u00bfNuevo en Nostr? Comienza con lo b\u00e1sico. Aprende qu\u00e9 hace a Nostr diferente de las plataformas sociales tradicionales y entiende los conceptos centrales que impulsan este protocolo descentralizado.</p> <p>Lo que aprender\u00e1s:</p> <p>\u2022 Arquitectura y principios de dise\u00f1o del protocolo \u2022 Descentralizaci\u00f3n vs. plataformas centralizadas \u2022 Terminolog\u00eda y conceptos b\u00e1sicos</p> <p> Comenzar a Aprender</p> <p> Domina: Identidad y Seguridad</p> <p>Habilidades Esenciales. Profundiza en las llaves criptogr\u00e1ficas, firmas digitales y gesti\u00f3n de identidad. Estos conceptos son fundamentales para todo lo que construir\u00e1s en Nostr.</p> <p>Lo que aprender\u00e1s:</p> <p>\u2022 Criptograf\u00eda de llaves p\u00fablicas/privadas \u2022 Identidad digital y firmas \u2022 Mejores pr\u00e1cticas de seguridad</p> <p> Dominar Llaves</p> <p> Construye: Tu Primera Aplicaci\u00f3n</p> <p>Desarrollo Pr\u00e1ctico. Lleva la teor\u00eda a la pr\u00e1ctica construyendo aplicaciones Nostr reales. Aprende a conectarte a rel\u00e9s, publicar eventos y crear experiencias interactivas.</p> <p>Lo que construir\u00e1s:</p> <p>\u2022 Cliente Nostr simple \u2022 Sistema de publicaci\u00f3n de eventos \u2022 Comunicaci\u00f3n con rel\u00e9s</p> <p> Comenzar a Construir</p> <p> Referencia: Definiciones Completas</p> <p>Recursos de Profundizaci\u00f3n. Accede a definiciones y explicaciones completas de todos los conceptos, protocolos y especificaciones t\u00e9cnicas de Nostr en una ubicaci\u00f3n organizada.</p> <p>Lo que encontrar\u00e1s:</p> <p>\u2022 Definiciones t\u00e9cnicas y explicaciones \u2022 Especificaciones del protocolo (NIPs) \u2022 Herramientas y librer\u00edas de desarrollo</p> <p> Explorar Definiciones</p>"},{"location":"es/#ruta-de-aprendizaje","title":"\ud83c\udfaf Ruta de Aprendizaje","text":"<p>Domina Nostr en 4 Pasos Progresivos \u2014 Desde entender los conceptos b\u00e1sicos hasta construir tus propias aplicaciones, esta ruta de aprendizaje guiada te llevar\u00e1 de principiante a desarrollador.</p>"},{"location":"es/#ejemplo-de-codigo","title":"Ejemplo de C\u00f3digo","text":"<p>Aqu\u00ed te mostramos c\u00f3mo publicar tu primer evento en la red Nostr:</p> JavaScriptPythonRust <pre><code>import { generatePrivateKey, getPublicKey, finishEvent, relayInit } from 'nostr-tools'\n\n// Genera tu identidad\nconst sk = generatePrivateKey()\nconst pk = getPublicKey(sk)\n\n// Crea un evento\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: '\u00a1Hola Nostr!',\n}, sk)\n\n// Publica en el rel\u00e9\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\nawait relay.publish(event)\n</code></pre> <pre><code>from nostr.key import PrivateKey\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\nimport time\n\n# Genera identidad\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\n\n# Crea evento\nevent = Event(\n    kind=1,\n    content=\"\u00a1Hola Nostr!\",\n    created_at=int(time.time())\n)\nprivate_key.sign_event(event)\n\n# Publica evento\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.publish_event(event)\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    // Genera llaves\n    let keys = Keys::generate();\n\n    // Conecta al rel\u00e9\n    let client = Client::new(&amp;keys);\n    client.add_relay(\"wss://relay.damus.io\", None).await?;\n    client.connect().await;\n\n    // Publica evento\n    let event = EventBuilder::new_text_note(\"\u00a1Hola Nostr!\", &amp;[])\n        .to_event(&amp;keys)?;\n\n    client.send_event(event).await?;\n    Ok(())\n}\n</code></pre>"},{"location":"es/definitions/","title":"Definiciones","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Definitions</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/support/","title":"Soporte","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Support</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/clients/","title":"Clientes","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Clients</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/events-and-messages/","title":"Eventos y Mensajes","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Events and Messages</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/keys/","title":"Llaves","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Keys</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/nips/","title":"NIPs","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: NIPs</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/nostr-fundamentals/","title":"Fundamentos de Nostr","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Nostr Fundamentals</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/relays/","title":"Rel\u00e9s","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Relays</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/concepts/zaps/","title":"Zaps","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Zaps</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/getting-started/nostr-tools/","title":"Herramientas de Nostr","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Nostr Tools</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/getting-started/relay-setup/","title":"Configuraci\u00f3n de Rel\u00e9","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Relay Setup</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/getting-started/wallet-setup/","title":"Configuraci\u00f3n de Billetera","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Wallet Setup</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/getting-started/what-is-nostr/","title":"\u00bfQu\u00e9 es Nostr?","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: What is Nostr?</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/tutorials/relay-communication/","title":"Comunicaci\u00f3n con Rel\u00e9s","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Relay Communication</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/tutorials/simple-client/","title":"Construir un Cliente Simple","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Build a Simple Client</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"},{"location":"es/tutorials/understanding-events/","title":"Entendiendo Eventos","text":"<p>Esta p\u00e1gina est\u00e1 siendo traducida al espa\u00f1ol.</p> <p>P\u00e1gina original en ingl\u00e9s: Understanding Events</p> <p>Esta traducci\u00f3n est\u00e1 en progreso. Visita la versi\u00f3n en ingl\u00e9s para el contenido completo.</p>"}]}