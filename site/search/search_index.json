{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why Learn Nostr?","text":"<ul> <li> <p> True Digital Identity</p> <p>Own your identity with cryptographic keys. No central authority can delete your account, censor your content, or control your digital presence.</p> <p> Learn About Keys</p> </li> <li> <p> Censorship Resistant</p> <p>Built on a decentralized network of relays that no single entity controls. Your voice can't be silenced by corporations or governments.</p> <p> Getting Started</p> </li> <li> <p> Lightning Integration</p> <p>Seamless Bitcoin payments through Lightning Network integration. Send and receive value instantly across the protocol.</p> <p> Build Applications</p> </li> </ul> <p> Start Here: Protocol Fundamentals</p> <p>New to Nostr? Begin with the basics. Learn what makes Nostr different from traditional social platforms and understand the core concepts that power this decentralized protocol.</p> <p>What you'll learn:</p> <p>\u2022 Protocol architecture and design principles \u2022 Decentralization vs. centralized platforms \u2022 Basic terminology and concepts</p> <p> Start Learning</p> <p> Master: Identity &amp; Security</p> <p>Essential Skills. Dive deep into cryptographic keys, digital signatures, and identity management. These concepts are fundamental to everything you'll build on Nostr.</p> <p>What you'll learn:</p> <p>\u2022 Public/private key cryptography \u2022 Digital identity and signatures \u2022 Security best practices</p> <p> Master Keys</p> <p> Build: Your First Application</p> <p>Hands-on Development. Put theory into practice by building real Nostr applications. Learn to connect to relays, publish events, and create interactive experiences.</p> <p>What you'll build:</p> <p>\u2022 Simple Nostr client \u2022 Event publishing system \u2022 Relay communication</p> <p> Start Building</p> <p> Reference: Complete Definitions</p> <p>Deep Dive Resources. Access comprehensive definitions and explanations of all Nostr concepts, protocols, and technical specifications in one organized location.</p> <p>What you'll find:</p> <p>\u2022 Technical definitions and explanations \u2022 Protocol specifications (NIPs) \u2022 Development tools and libraries</p> <p> Browse Definitions</p>"},{"location":"#learning-path","title":"\ud83c\udfaf Learning Path","text":"<p>Master Nostr in 4 Progressive Steps \u2014 From understanding the basics to building your own applications, this guided learning path will take you from beginner to developer.</p>"},{"location":"#code-example","title":"Code Example","text":"<p>Here's how to publish your first event to the Nostr network:</p> JavaScriptPythonRust <pre><code>import { generatePrivateKey, getPublicKey, finishEvent, relayInit } from 'nostr-tools'\n\n// Generate your identity\nconst sk = generatePrivateKey()\nconst pk = getPublicKey(sk)\n\n// Create an event\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: 'Hello Nostr!',\n}, sk)\n\n// Publish to relay\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\nawait relay.publish(event)\n</code></pre> <pre><code>from nostr.key import PrivateKey\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\nimport time\n\n# Generate identity\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\n\n# Create event\nevent = Event(\n    kind=1,\n    content=\"Hello Nostr!\",\n    created_at=int(time.time())\n)\nprivate_key.sign_event(event)\n\n# Publish event\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.publish_event(event)\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    // Generate keys\n    let keys = Keys::generate();\n\n    // Connect to relay\n    let client = Client::new(&amp;keys);\n    client.add_relay(\"wss://relay.damus.io\", None).await?;\n    client.connect().await;\n\n    // Publish event\n    let event = EventBuilder::new_text_note(\"Hello Nostr!\", &amp;[])\n        .to_event(&amp;keys)?;\n\n    client.send_event(event).await?;\n    Ok(())\n}\n</code></pre>"},{"location":"definitions/","title":"Nostr Definitions: Complete Reference Guide","text":"<p>This comprehensive guide defines all essential Nostr concepts, protocols, and components in one place.</p>"},{"location":"definitions/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Protocol Fundamentals</li> <li>Keys and Identity</li> <li>Events and Messages</li> <li>Relays and Network</li> <li>Clients and Applications</li> <li>NIPs (Nostr Implementation Possibilities)</li> <li>Zaps and Lightning Integration</li> <li>Security and Privacy</li> <li>Development and Technical</li> </ul>"},{"location":"definitions/#protocol-fundamentals","title":"Protocol Fundamentals","text":""},{"location":"definitions/#nostr","title":"Nostr","text":"<p>\"Notes and Other Stuff Transmitted by Relays\" - A simple, open protocol for decentralized social networking and communication.</p>"},{"location":"definitions/#core-principles","title":"Core Principles","text":"<ul> <li>Decentralized: No central authority or single point of failure</li> <li>Censorship-resistant: Content cannot be universally censored</li> <li>Interoperable: All clients can communicate with each other</li> <li>User-owned: Users control their identity and data</li> <li>Simple: Easy to implement and understand</li> </ul>"},{"location":"definitions/#protocol-overview","title":"Protocol Overview","text":"<pre><code>graph TB\n    A[User with Keys] --&gt; B[Nostr Client]\n    B --&gt; C[Sign Events]\n    C --&gt; D[Send to Relays]\n    D --&gt; E[Other Users' Clients]\n    E --&gt; F[Verify Signatures]\n</code></pre>"},{"location":"definitions/#keys-and-identity","title":"Keys and Identity","text":""},{"location":"definitions/#private-key","title":"Private Key","text":"<p>Your secret cryptographic key that: - Controls your entire Nostr identity - Signs all your events and messages - Cannot be recovered if lost - Must be kept absolutely secure</p> <p>Format Examples: <pre><code>Hex: 5c0c523f52a5b6fad39ed2403092df8cebc36318b39383bca6c00808626fab3a\nnsec: nsec1ts8y20636km0450n6fqrxyktmrhtcd0cvwucnw6xvqygsp6wlv62q4ew66q\n</code></pre></p>"},{"location":"definitions/#public-key","title":"Public Key","text":"<p>Your public identity on Nostr: - Derived mathematically from your private key - Serves as your unique identifier - Can be shared freely - Used by others to verify your signatures</p> <p>Format Examples: <pre><code>Hex: 48d54b934bb2767a2980a4e6b2ee5ff86e3a4102b1e3f71c95e66bb06a1e7ff6\nnpub: npub1frw5hw6tkfm85t2qpfnty0hllrhkx5gzk83lw8y4uehmq6s70lmqqrr9nv\n</code></pre></p>"},{"location":"definitions/#key-security-best-practices","title":"Key Security Best Practices","text":"<ul> <li>Never share your private key</li> <li>Use hardware wallets when possible</li> <li>Keep multiple secure backups</li> <li>Use different keys for different purposes</li> <li>Consider key rotation strategies</li> </ul>"},{"location":"definitions/#events-and-messages","title":"Events and Messages","text":""},{"location":"definitions/#event-structure","title":"Event Structure","text":"<p>All Nostr data is transmitted as events with this structure:</p> <pre><code>{\n  \"id\": \"event-id-hash\",\n  \"pubkey\": \"author-public-key\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Event content\",\n  \"sig\": \"cryptographic-signature\"\n}\n</code></pre>"},{"location":"definitions/#event-kinds-common-types","title":"Event Kinds (Common Types)","text":""},{"location":"definitions/#basic-events","title":"Basic Events","text":"<ul> <li>Kind 0: User Metadata (profile information)</li> <li>Kind 1: Text Note (like a tweet)</li> <li>Kind 2: Recommend Relay</li> <li>Kind 3: Contact List (following list)</li> <li>Kind 4: Encrypted Direct Message</li> <li>Kind 5: Event Deletion Request</li> <li>Kind 6: Repost</li> <li>Kind 7: Reaction (like/dislike)</li> </ul>"},{"location":"definitions/#advanced-events","title":"Advanced Events","text":"<ul> <li>Kind 9735: Zap Receipt</li> <li>Kind 30023: Long-form Article</li> <li>Kind 40: Channel Creation</li> <li>Kind 41: Channel Metadata</li> <li>Kind 42: Channel Message</li> </ul>"},{"location":"definitions/#tags","title":"Tags","text":"<p>Metadata attached to events for: - Mentioning users (<code>[\"p\", \"pubkey\"]</code>) - Referencing events (<code>[\"e\", \"event-id\"]</code>) - Adding hashtags (<code>[\"t\", \"hashtag\"]</code>) - Specifying relays (<code>[\"r\", \"relay-url\"]</code>)</p>"},{"location":"definitions/#relays-and-network","title":"Relays and Network","text":""},{"location":"definitions/#relay","title":"Relay","text":"<p>A server that: - Accepts events from clients - Stores events (temporarily or permanently) - Forwards events to subscribers - Implements filtering and policies - Communicates via WebSocket</p>"},{"location":"definitions/#how-relays-work","title":"How Relays Work","text":"<pre><code>sequenceDiagram\n    participant C1 as Client 1\n    participant R as Relay\n    participant C2 as Client 2\n\n    C1-&gt;&gt;R: Connect (WebSocket)\n    C2-&gt;&gt;R: Connect (WebSocket)\n    C1-&gt;&gt;R: Publish Event\n    R-&gt;&gt;R: Store Event\n    C2-&gt;&gt;R: Subscribe to Events\n    R-&gt;&gt;C2: Send Matching Events\n</code></pre>"},{"location":"definitions/#relay-types","title":"Relay Types","text":"<ul> <li>Public Relays: Open to all users</li> <li>Private Relays: Restricted access</li> <li>Paid Relays: Require payment for service</li> <li>Specialized Relays: Focus on specific content types</li> </ul>"},{"location":"definitions/#popular-relays","title":"Popular Relays","text":"<ul> <li><code>wss://relay.damus.io</code></li> <li><code>wss://nos.lol</code></li> <li><code>wss://relay.snort.social</code></li> <li><code>wss://nostr.wine</code></li> </ul>"},{"location":"definitions/#clients-and-applications","title":"Clients and Applications","text":""},{"location":"definitions/#nostr-client","title":"Nostr Client","text":"<p>An application that allows users to interact with the Nostr network by: - Managing cryptographic keys - Creating and signing events - Connecting to relays - Displaying content - Handling user interactions</p>"},{"location":"definitions/#client-types","title":"Client Types","text":""},{"location":"definitions/#web-clients","title":"Web Clients","text":"<ul> <li>Iris: Feature-rich web interface</li> <li>Snort: Fast, modern design</li> <li>Coracle: Privacy-focused</li> <li>Nostrudel: Developer-oriented</li> </ul>"},{"location":"definitions/#mobile-clients","title":"Mobile Clients","text":"<ul> <li>Damus (iOS): Native iOS experience</li> <li>Amethyst (Android): Feature-complete Android app</li> <li>Primal (iOS/Android): Algorithm-driven feeds</li> </ul>"},{"location":"definitions/#desktop-clients","title":"Desktop Clients","text":"<ul> <li>Gossip: Desktop client with advanced relay management</li> <li>More!: Cross-platform Tauri-based client</li> </ul>"},{"location":"definitions/#client-features","title":"Client Features","text":"<ul> <li>Timeline management</li> <li>Direct messaging</li> <li>Profile management</li> <li>Relay configuration</li> <li>Lightning integration</li> <li>Content filtering</li> </ul>"},{"location":"definitions/#nips-nostr-implementation-possibilities","title":"NIPs (Nostr Implementation Possibilities)","text":""},{"location":"definitions/#what-are-nips","title":"What are NIPs?","text":"<p>Technical specifications that define: - Protocol features and extensions - Event formats and structures - Client and relay behaviors - Cryptographic standards</p>"},{"location":"definitions/#essential-nips","title":"Essential NIPs","text":""},{"location":"definitions/#nip-01-basic-protocol-flow","title":"NIP-01: Basic Protocol Flow","text":"<p>The foundation - defines events, signatures, and communication.</p>"},{"location":"definitions/#nip-02-contact-list-and-petnames","title":"NIP-02: Contact List and Petnames","text":"<p>Following lists and user labeling.</p>"},{"location":"definitions/#nip-04-encrypted-direct-messages","title":"NIP-04: Encrypted Direct Messages","text":"<p>Private messaging between users.</p>"},{"location":"definitions/#nip-05-mapping-nostr-keys-to-dns","title":"NIP-05: Mapping Nostr Keys to DNS","text":"<p>Human-readable identifiers (name@domain.com).</p>"},{"location":"definitions/#nip-07-browser-extension-for-signing","title":"NIP-07: Browser Extension for Signing","text":"<p>Secure key management in browsers.</p>"},{"location":"definitions/#nip-09-event-deletion","title":"NIP-09: Event Deletion","text":"<p>Requesting deletion of previously published events.</p>"},{"location":"definitions/#nip-10-text-note-references","title":"NIP-10: Text Note References","text":"<p>Proper threading and reply structures.</p>"},{"location":"definitions/#nip-11-relay-information-document","title":"NIP-11: Relay Information Document","text":"<p>Relay capabilities and policies.</p>"},{"location":"definitions/#nip-57-lightning-zaps","title":"NIP-57: Lightning Zaps","text":"<p>Bitcoin micropayments integrated with Nostr.</p>"},{"location":"definitions/#nip-categories","title":"NIP Categories","text":"<ul> <li>Core: Essential for basic functionality</li> <li>Optional: Additional features</li> <li>Informational: Best practices and guidelines</li> <li>Experimental: Testing new ideas</li> </ul>"},{"location":"definitions/#zaps-and-lightning-integration","title":"Zaps and Lightning Integration","text":""},{"location":"definitions/#zap","title":"Zap","text":"<p>Instant Bitcoin payments over Lightning Network cryptographically tied to Nostr events.</p>"},{"location":"definitions/#key-features","title":"Key Features","text":"<ul> <li>\u26a1 Instant settlement (milliseconds)</li> <li>\ud83d\udd12 Cryptographically verified</li> <li>\ud83d\udcb0 Micro-payments (1+ satoshi)</li> <li>\ud83c\udf0d Global and permissionless</li> </ul>"},{"location":"definitions/#how-zaps-work-nip-57","title":"How Zaps Work (NIP-57)","text":"<pre><code>sequenceDiagram\n    participant User as You\n    participant Client as Nostr Client\n    participant Wallet as Lightning Wallet\n    participant LNURL as Recipient LNURL\n    participant Relay as Nostr Relay\n\n    User-&gt;&gt;Client: Click Zap\n    Client-&gt;&gt;LNURL: Request zap endpoint\n    LNURL--&gt;&gt;Client: Return payment template\n    Client-&gt;&gt;Wallet: Generate invoice\n    Wallet--&gt;&gt;Client: Lightning invoice\n    Client-&gt;&gt;LNURL: Send payment + event\n    LNURL-&gt;&gt;Relay: Publish zap receipt\n    Relay--&gt;&gt;Client: Show confirmation\n</code></pre>"},{"location":"definitions/#zap-types","title":"Zap Types","text":"<ul> <li>Public Zaps: Visible to everyone</li> <li>Private Zaps: Only sender and recipient know</li> <li>Anonymous Zaps: No sender identification</li> </ul>"},{"location":"definitions/#lnurl","title":"LNURL","text":"<p>Lightning Network URL - enables seamless Lightning payments through simple URLs.</p>"},{"location":"definitions/#security-and-privacy","title":"Security and Privacy","text":""},{"location":"definitions/#cryptographic-security","title":"Cryptographic Security","text":"<ul> <li>ECDSA: Elliptic Curve Digital Signature Algorithm</li> <li>secp256k1: Same curve used by Bitcoin</li> <li>SHA-256: Hashing algorithm for event IDs</li> </ul>"},{"location":"definitions/#privacy-considerations","title":"Privacy Considerations","text":"<ul> <li>Public by Default: Most content is publicly visible</li> <li>Metadata Leakage: Timing and relay data can reveal information</li> <li>IP Privacy: Use Tor for enhanced anonymity</li> <li>Key Rotation: Regular key changes for enhanced security</li> </ul>"},{"location":"definitions/#best-practices","title":"Best Practices","text":"<ul> <li>Use reputable clients</li> <li>Verify software integrity</li> <li>Keep keys secure</li> <li>Understand data permanence</li> <li>Use multiple relays</li> </ul>"},{"location":"definitions/#development-and-technical","title":"Development and Technical","text":""},{"location":"definitions/#event-id-calculation","title":"Event ID Calculation","text":"<pre><code>function getEventId(event) {\n  const serialized = JSON.stringify([\n    0,\n    event.pubkey,\n    event.created_at,\n    event.kind,\n    event.tags,\n    event.content\n  ])\n  return sha256(utf8Encoder.encode(serialized))\n}\n</code></pre>"},{"location":"definitions/#signature-verification","title":"Signature Verification","text":"<p>Events are signed using the private key and verified using the public key to ensure authenticity.</p>"},{"location":"definitions/#websocket-communication","title":"WebSocket Communication","text":"<pre><code>// Connect to relay\nconst relay = new WebSocket('wss://relay.example.com')\n\n// Subscribe to events\nrelay.send(JSON.stringify(['REQ', subscriptionId, filter]))\n\n// Publish event\nrelay.send(JSON.stringify(['EVENT', signedEvent]))\n</code></pre>"},{"location":"definitions/#filters","title":"Filters","text":"<p>Query relays for specific events: <pre><code>{\n  \"ids\": [\"event-id\"],\n  \"authors\": [\"pubkey\"],\n  \"kinds\": [1],\n  \"since\": 1234567890,\n  \"until\": 1234567890,\n  \"limit\": 100\n}\n</code></pre></p>"},{"location":"definitions/#glossary-quick-reference","title":"Glossary Quick Reference","text":"Term Definition Nostr Notes and Other Stuff Transmitted by Relays NIP Nostr Implementation Possibility npub Public key in bech32 format nsec Private key in bech32 format Relay Server that stores and forwards Nostr events Event Basic unit of data in Nostr Kind Event type identifier Zap Lightning payment tied to a Nostr event LNURL Lightning Network URL protocol Tag Metadata attached to events Filter Query parameters for relay subscriptions <p>This definitions guide is a living document. As Nostr evolves, new concepts and refinements will be added. </p>"},{"location":"support/","title":"Support LearnNostr","text":"<p>Help Keep This Resource Free</p> <p>LearnNostr is a community-driven educational platform. Your support helps us maintain and expand this comprehensive Nostr learning resource for everyone.</p>"},{"location":"support/#support-learnnostr_1","title":"\u26a1 Support LearnNostr","text":"<p>Show your appreciation for LearnNostr with Bitcoin zaps! Every contribution helps keep this educational resource free and growing.</p> \u26a1 10ksats $3 \u26a1 16ksats $5 \u26a1 33ksats $10 \u26a1 66ksats $20 0/280      \u26a1 Send Zap 0 sats"},{"location":"concepts/clients/","title":"Understanding Nostr Clients","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What Nostr clients are and their role in the ecosystem</li> <li>Different types of clients and their features</li> <li>How clients interact with relays and manage keys</li> <li>Popular client options and how to choose one</li> </ul>"},{"location":"concepts/clients/#what-is-a-nostr-client","title":"What is a Nostr Client?","text":"<p>A Nostr client is an application that allows users to interact with the Nostr network. Think of it as your window into the decentralized social web - it's how you create posts, read content, manage your identity, and connect with others.</p> <p>Unlike traditional social media where you're locked into one app (like Twitter or Facebook), Nostr clients are interoperable. You can switch between different clients while keeping the same identity and data.</p>"},{"location":"concepts/clients/#core-functions-of-clients","title":"Core Functions of Clients","text":""},{"location":"concepts/clients/#1-key-management","title":"1. Key Management","text":"<ul> <li>Generate new cryptographic key pairs</li> <li>Store private keys securely (or integrate with external key managers)</li> <li>Sign events with your private key</li> <li>Verify signatures from other users</li> </ul>"},{"location":"concepts/clients/#2-event-creation","title":"2. Event Creation","text":"<ul> <li>Compose different types of content (text notes, reactions, reposts)</li> <li>Format content with proper metadata and tags</li> <li>Sign events cryptographically</li> <li>Publish to selected relays</li> </ul>"},{"location":"concepts/clients/#3-relay-communication","title":"3. Relay Communication","text":"<ul> <li>Connect to multiple relays simultaneously</li> <li>Subscribe to event feeds and filters</li> <li>Fetch historical events and user profiles</li> <li>Manage relay lists and preferences</li> </ul>"},{"location":"concepts/clients/#4-content-display","title":"4. Content Display","text":"<ul> <li>Parse and display events in user-friendly formats</li> <li>Handle different event types (notes, reactions, profiles)</li> <li>Organize content (timelines, threads, notifications)</li> <li>Filter content based on user preferences</li> </ul>"},{"location":"concepts/clients/#types-of-nostr-clients","title":"Types of Nostr Clients","text":""},{"location":"concepts/clients/#web-clients","title":"Web Clients","text":"<p>Browser-based applications that run in your web browser.</p> <p>Examples: - Iris - Feature-rich web client with social features - Snort - Fast, modern web interface - Nostrgram - Instagram-like photo sharing - Coracle - Minimalist, privacy-focused client</p> <p>Pros: - \u2705 No installation required - \u2705 Cross-platform compatibility - \u2705 Easy to try different clients</p> <p>Cons: - \u274c Limited key storage options - \u274c Dependent on browser security - \u274c May have performance limitations</p>"},{"location":"concepts/clients/#mobile-apps","title":"Mobile Apps","text":"<p>Native applications for smartphones and tablets.</p> <p>Examples: - Damus (iOS) - Popular, user-friendly iOS client - Amethyst (Android) - Feature-rich Android client - Nostros (Android) - Open-source Android client - Plebstr (iOS/Android) - Simple, beginner-friendly</p> <p>Pros: - \u2705 Native performance and UX - \u2705 Push notifications - \u2705 Better key storage options - \u2705 Offline capabilities</p> <p>Cons: - \u274c Platform-specific - \u274c App store restrictions - \u274c Installation required</p>"},{"location":"concepts/clients/#desktop-applications","title":"Desktop Applications","text":"<p>Native applications for computers.</p> <p>Examples: - Gossip - Rust-based desktop client - More TBD - Desktop client ecosystem is growing</p> <p>Pros: - \u2705 Full-featured experience - \u2705 Better key management - \u2705 Advanced power-user features - \u2705 No browser limitations</p> <p>Cons: - \u274c Platform-specific builds - \u274c Larger download/install - \u274c Less portable</p>"},{"location":"concepts/clients/#specialized-clients","title":"Specialized Clients","text":"<p>Purpose-built for specific use cases.</p> <p>Examples: - Habla - Long-form content publishing - Zap.stream - Live streaming - Nostrudel - Advanced power-user features - Satellite - Minimalist text-only</p>"},{"location":"concepts/clients/#how-clients-work","title":"How Clients Work","text":"<pre><code>graph TB\n    U[User] --&gt;|interacts with| C[Client]\n    C --&gt;|manages| K[Private Keys]\n    C --&gt;|creates &amp; signs| E[Events]\n    C --&gt;|connects to| R1[Relay 1]\n    C --&gt;|connects to| R2[Relay 2]\n    C --&gt;|connects to| R3[Relay 3]\n\n    R1 --&gt;|delivers events| C\n    R2 --&gt;|delivers events| C\n    R3 --&gt;|delivers events| C\n\n    C --&gt;|displays| F[Feed/Timeline]\n    F --&gt;|shown to| U\n</code></pre>"},{"location":"concepts/clients/#the-client-workflow","title":"The Client Workflow","text":"<ol> <li>User Action: You want to post a note or read your timeline</li> <li>Event Creation: Client creates a properly formatted event</li> <li>Signing: Client signs the event with your private key</li> <li>Publishing: Client sends the event to your selected relays</li> <li>Fetching: Client requests events from relays for your timeline</li> <li>Display: Client formats and shows the content to you</li> </ol>"},{"location":"concepts/clients/#key-features-to-look-for","title":"Key Features to Look For","text":""},{"location":"concepts/clients/#essential-features","title":"Essential Features","text":"<ul> <li>Key Management: Secure storage and handling of private keys</li> <li>Multi-relay Support: Connect to multiple relays simultaneously</li> <li>Basic Event Types: Support for text notes, reactions, reposts</li> <li>User Profiles: View and edit profile information</li> <li>Timeline/Feed: Chronological display of events</li> </ul>"},{"location":"concepts/clients/#advanced-features","title":"Advanced Features","text":"<ul> <li>Thread Support: Proper display of conversation threads</li> <li>Media Support: Images, videos, and file attachments</li> <li>Lightning Integration: Zaps (Bitcoin Lightning payments)</li> <li>Advanced Filtering: Content filtering and moderation tools</li> <li>Backup/Export: Export your data and settings</li> </ul>"},{"location":"concepts/clients/#power-user-features","title":"Power User Features","text":"<ul> <li>Custom Relay Management: Advanced relay configuration</li> <li>Event Debugging: Raw event inspection and debugging</li> <li>Custom Event Types: Support for experimental NIPs</li> <li>API Access: Integration with external tools</li> <li>Plugin System: Extensibility through plugins</li> </ul>"},{"location":"concepts/clients/#choosing-the-right-client","title":"Choosing the Right Client","text":""},{"location":"concepts/clients/#for-beginners","title":"For Beginners","text":"<p>Recommended: Damus (iOS), Amethyst (Android), Iris (Web)</p> <ul> <li>Simple, intuitive interface</li> <li>Good onboarding experience</li> <li>Built-in key generation</li> <li>Reasonable default settings</li> </ul>"},{"location":"concepts/clients/#for-privacy-conscious-users","title":"For Privacy-Conscious Users","text":"<p>Recommended: Gossip (Desktop), Coracle (Web)</p> <ul> <li>Enhanced privacy features</li> <li>Local key storage</li> <li>Minimal data collection</li> <li>Tor support (some clients)</li> </ul>"},{"location":"concepts/clients/#for-power-users","title":"For Power Users","text":"<p>Recommended: Nostrudel (Web), Gossip (Desktop)</p> <ul> <li>Advanced configuration options</li> <li>Raw event inspection</li> <li>Custom relay management</li> <li>Experimental feature support</li> </ul>"},{"location":"concepts/clients/#for-content-creators","title":"For Content Creators","text":"<p>Recommended: Habla (Long-form), Nostrgram (Photos)</p> <ul> <li>Specialized content creation tools</li> <li>Rich media support</li> <li>Publishing workflows</li> <li>Audience engagement features</li> </ul>"},{"location":"concepts/clients/#client-interoperability","title":"Client Interoperability","text":"<p>One of Nostr's key advantages is client interoperability:</p> <p>Real-World Example</p> <p>Morning: Use Damus on your phone to check notifications</p> <p>Afternoon: Switch to Iris on your work computer to post updates</p> <p>Evening: Use Habla to write a long-form article</p> <p>Result: All your content appears seamlessly across all clients because they all use the same underlying protocol and relays.</p>"},{"location":"concepts/clients/#security-considerations","title":"Security Considerations","text":""},{"location":"concepts/clients/#key-storage","title":"Key Storage","text":"<ul> <li>Browser Storage: Convenient but less secure</li> <li>Mobile Keychain: Better security on mobile devices</li> <li>Hardware Wallets: Maximum security for valuable accounts</li> <li>External Signers: Dedicated key management apps</li> </ul>"},{"location":"concepts/clients/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Use reputable, open-source clients</li> <li>\u2705 Verify client authenticity before downloading</li> <li>\u2705 Keep your private key backed up securely</li> <li>\u2705 Use different clients to avoid vendor lock-in</li> <li>\u274c Never share your private key</li> <li>\u274c Don't use untrusted or closed-source clients</li> </ul>"},{"location":"concepts/clients/#the-future-of-clients","title":"The Future of Clients","text":"<p>The Nostr client ecosystem is rapidly evolving:</p> <ul> <li>Specialized Clients: Purpose-built for specific use cases</li> <li>AI Integration: Smart content curation and assistance</li> <li>Enhanced Privacy: Better anonymity and privacy features</li> <li>Cross-Platform: Seamless experience across all devices</li> <li>Plugin Ecosystems: Extensible, customizable clients</li> </ul>"},{"location":"concepts/clients/#next-steps","title":"Next Steps","text":"<p>Now that you understand clients, explore how they interact with relays and the broader Nostr ecosystem.</p>      Understanding Relays \u2192"},{"location":"concepts/clients/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What are the core functions of a Nostr client?</li> <li>Why can you switch between different Nostr clients freely?</li> <li>What's the difference between web clients and mobile apps?</li> <li>What should you consider when choosing a client for privacy?</li> </ol> Answers <ol> <li>Key management, event creation, relay communication, and content display</li> <li>Because all clients use the same open protocol and can access the same relays</li> <li>Web clients run in browsers (cross-platform, no install) while mobile apps are native (better performance, platform-specific)</li> <li>Local key storage, minimal data collection, open-source code, and privacy-focused features </li> </ol>"},{"location":"concepts/keys/","title":"Keys and Identity in Nostr","text":"<p>Learning Objectives</p> <p>After this lesson, you'll understand:</p> <ul> <li>How digital identity works in the Nostr protocol</li> <li>The difference between private and public keys</li> <li>Different key formats and their purposes</li> <li>Best practices for key security and management</li> <li>Why Nostr uses cryptographic identity instead of usernames</li> </ul>"},{"location":"concepts/keys/#cryptographic-identity","title":"Cryptographic Identity","text":"<p>Nostr uses a fundamentally different approach to identity compared to traditional social media platforms. Instead of usernames and passwords managed by a central authority, Nostr employs cryptographic key pairs to establish and verify identity.</p> <p>This approach provides users with complete ownership and control over their digital identity, eliminating dependence on any central platform or service provider.</p>"},{"location":"concepts/keys/#understanding-key-pairs","title":"Understanding Key Pairs","text":""},{"location":"concepts/keys/#cryptographic-fundamentals","title":"Cryptographic Fundamentals","text":"<p>Cryptographic keys work as mathematically related pairs that enable secure digital communication:</p> <ul> <li>One-way mathematical relationship: Public keys are derived from private keys, but the reverse is computationally infeasible</li> <li>Digital signatures: Private keys create signatures that public keys can verify</li> <li>Identity verification: Signatures prove ownership without revealing the private key</li> </ul> <pre><code>graph LR\n    A[Private Key&lt;br/&gt;Secret Component] --&gt;|generates| B[Public Key&lt;br/&gt;Identity Component]\n    A --&gt;|signs| C[Messages/Events]\n    B --&gt;|verifies| C\n    B --&gt;|becomes| D[Nostr Identity]\n</code></pre>"},{"location":"concepts/keys/#private-key-management","title":"Private Key Management","text":""},{"location":"concepts/keys/#definition-and-purpose","title":"Definition and Purpose","text":"<p>The private key serves as the master secret that controls your entire Nostr identity. It is a cryptographically secure random number that:</p> <ul> <li>Generates your public identity: Mathematically derives your public key</li> <li>Creates digital signatures: Proves authorship of your events</li> <li>Controls all interactions: Required for posting, following, and other actions</li> <li>Cannot be recovered: Loss results in permanent identity loss</li> </ul>"},{"location":"concepts/keys/#security-requirements","title":"Security Requirements","text":"<p>Private key security is critical for maintaining control of your Nostr identity:</p> <p>Critical Security Practices</p> <p>Never Share Your Private Key - Do not transmit via email, messaging, or any digital communication - Avoid storing in plain text files or unencrypted formats - Never enter into untrusted applications or websites</p> <p>Secure Storage Methods - Use hardware wallets for maximum security - Employ encrypted password managers - Create offline, encrypted backups - Store in multiple secure locations</p>"},{"location":"concepts/keys/#key-format-examples","title":"Key Format Examples","text":"Hex Formatnsec Format (Bech32) <pre><code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2\n</code></pre> <pre><code>nsec1mclkfkwu2n7v0wuwn6d2kwx56mn0029ceuxr6ul6xjm2k6l7qxsqrxqhp8\n</code></pre>"},{"location":"concepts/keys/#public-key-distribution","title":"Public Key Distribution","text":""},{"location":"concepts/keys/#purpose-and-function","title":"Purpose and Function","text":"<p>Your public key serves as your permanent Nostr address and identity. It enables:</p> <ul> <li>Global identification: Unique address in the Nostr network</li> <li>Signature verification: Others can verify your message authenticity  </li> <li>Social connections: Followers use this to find and follow you</li> <li>Cross-client compatibility: Works across all Nostr applications</li> </ul>"},{"location":"concepts/keys/#sharing-guidelines","title":"Sharing Guidelines","text":"<p>Unlike private keys, public keys are designed for open distribution:</p> <p>\u2705 Safe to share publicly \u2705 Include in social media profiles \u2705 Display on websites and business cards \u2705 Send via any communication method \u2705 Embed in QR codes</p>"},{"location":"concepts/keys/#public-key-formats","title":"Public Key Formats","text":"Hex Formatnpub Format (Bech32) <pre><code>a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2\n</code></pre> <pre><code>npub15xkv85x2um6h3jfgxhj259x54fvv7n7k9c5wxq9ewn64fhux5xeqz8p2qv\n</code></pre>"},{"location":"concepts/keys/#mathematical-relationship","title":"Mathematical Relationship","text":"<p>The relationship between private and public keys relies on elliptic curve cryptography:</p>"},{"location":"concepts/keys/#key-generation-process","title":"Key Generation Process","text":"<pre><code>graph TB\n    A[Cryptographically Secure&lt;br/&gt;Random Number] --&gt;|secp256k1| B[Private Key]\n    B --&gt;|Elliptic Curve&lt;br/&gt;Point Multiplication| C[Public Key]\n    B --&gt;|ECDSA| D[Digital Signatures]\n    C --&gt;|verifies| D\n</code></pre>"},{"location":"concepts/keys/#security-properties","title":"Security Properties","text":"<ul> <li>One-way function: Computing public key from private key is fast</li> <li>Computational security: Deriving private key from public key is infeasible</li> <li>Signature uniqueness: Each message produces a unique signature</li> <li>Non-repudiation: Signatures cannot be forged without the private key</li> </ul>"},{"location":"concepts/keys/#your-private-key-in-detail","title":"Your Private Key in Detail","text":"<p>Let's dive deeper into your most important digital possession.</p>"},{"location":"concepts/keys/#what-makes-it-special","title":"What Makes It Special","text":"<ul> <li>Completely random: Generated using cryptographically secure randomness</li> <li>Astronomically unique: The chances of two people getting the same key are basically zero</li> <li>Mathematically powerful: Can create unlimited verified signatures</li> <li>Irreplaceable: There's no customer service to call if you lose it</li> </ul>"},{"location":"concepts/keys/#what-it-looks-like","title":"What It Looks Like","text":"Hex Format (Raw)nsec Format (User-Friendly) <pre><code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2\n</code></pre> <pre><code>nsec1mclkfkwu2n7v0wuwn6d2kwx56mn0029ceuxr6ul6xjm2k6l7qxsqrxqhp8\n</code></pre>"},{"location":"concepts/keys/#creating-your-first-key-pair","title":"Creating Your First Key Pair","text":"JavaScriptPythonRust <pre><code>import { generatePrivateKey } from 'nostr-tools'\n\n// Generate your unique identity\nconst privateKey = generatePrivateKey()\nconsole.log('Your private key (keep secret!):', privateKey)\n</code></pre> <pre><code>from nostr.key import PrivateKey\n\n// Create your digital identity\nprivate_key = PrivateKey()\nprint(f\"Your private key (guard this!): {private_key.hex()}\")\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n// Generate your keys\nlet keys = Keys::generate();\nprintln!(\"Private key (keep safe!): {}\", keys.secret_key().display_secret());\n</code></pre>"},{"location":"concepts/keys/#your-public-key-in-detail","title":"Your Public Key in Detail","text":"<p>Now let's explore your public identity - the part of you that the Nostr world gets to see.</p>"},{"location":"concepts/keys/#what-makes-it-perfect-for-sharing","title":"What Makes It Perfect for Sharing","text":"<ul> <li>Derived from private: Mathematically created from your private key</li> <li>Always the same: Your private key always generates the same public key</li> <li>Safe to broadcast: No security risk in sharing it widely</li> <li>Verifiable: Others can use it to confirm your signatures are real</li> </ul>"},{"location":"concepts/keys/#key-formats-and-encoding","title":"Key Formats and Encoding","text":"<p>Nostr uses different formats for displaying keys to users:</p>"},{"location":"concepts/keys/#hex-format","title":"Hex Format","text":"<ul> <li>Raw format: 64 character hexadecimal string</li> <li>Use case: Internal processing, APIs</li> <li>Example: <code>d63b64d9c2c4f8c7b8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2</code></li> </ul>"},{"location":"concepts/keys/#bech32-format-nip-19","title":"Bech32 Format (NIP-19)","text":"<ul> <li>User-friendly: Includes checksums and prefixes</li> <li>Private keys: Start with <code>nsec1</code></li> <li>Public keys: Start with <code>npub1</code></li> <li>Benefits: Error detection, easier to copy/paste</li> </ul> <p>Format Conversion</p> <p>Most Nostr libraries provide functions to convert between formats:</p> <pre><code>import { nip19 } from 'nostr-tools'\n\n// Hex to bech32\nconst npub = nip19.npubEncode(hexPublicKey)\nconst nsec = nip19.nsecEncode(hexPrivateKey)\n\n// Bech32 to hex\nconst { type, data } = nip19.decode(npub)\n</code></pre>"},{"location":"concepts/keys/#digital-signatures","title":"Digital Signatures","text":"<p>Your private key is used to create digital signatures that prove authenticity:</p>"},{"location":"concepts/keys/#how-signatures-work","title":"How Signatures Work","text":"<ol> <li>Create Event: You compose a message or event</li> <li>Hash Content: The event content is hashed</li> <li>Sign Hash: Your private key signs the hash</li> <li>Attach Signature: The signature is included with the event</li> <li>Verify: Others use your public key to verify the signature</li> </ol>"},{"location":"concepts/keys/#example-signing-an-event","title":"Example: Signing an Event","text":"JavaScriptPython <pre><code>import { finishEvent } from 'nostr-tools'\n\nconst event = {\n    kind: 1,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],\n    content: 'Hello Nostr!'\n}\n\nconst signedEvent = finishEvent(event, privateKey)\nconsole.log('Signed event:', signedEvent)\n</code></pre> <pre><code>from nostr.event import Event\nfrom nostr.key import PrivateKey\nimport time\n\nprivate_key = PrivateKey()\n\nevent = Event(\n    kind=1,\n    content=\"Hello Nostr!\",\n    created_at=int(time.time())\n)\n\nprivate_key.sign_event(event)\nprint(f\"Signed event: {event.to_json()}\")\n</code></pre>"},{"location":"concepts/keys/#identity-without-usernames","title":"Identity Without Usernames","text":""},{"location":"concepts/keys/#traditional-vs-nostr-identity","title":"Traditional vs Nostr Identity","text":"Traditional Social Media Nostr Username + Password Cryptographic Keys Platform controls identity You control identity Can be banned/suspended Censorship resistant Tied to one platform Portable across clients Password can be reset Keys cannot be recovered"},{"location":"concepts/keys/#benefits-of-cryptographic-identity","title":"Benefits of Cryptographic Identity","text":"<p>Advantages</p> <ul> <li>True Ownership: You own your identity, not a platform</li> <li>Portability: Use the same identity across all Nostr clients</li> <li>Censorship Resistance: No central authority can ban you</li> <li>Verification: Cryptographic proof of authenticity</li> <li>Privacy: No personal information required</li> </ul> <p>Responsibilities</p> <ul> <li>Key Security: You must protect your private key</li> <li>No Recovery: Lost keys mean lost identity</li> <li>Backup Important: Always backup your keys securely</li> </ul>"},{"location":"concepts/keys/#key-management-best-practices","title":"Key Management Best Practices","text":""},{"location":"concepts/keys/#secure-storage","title":"Secure Storage","text":"<p>Never Do This</p> <ul> <li>Store private keys in plain text files</li> <li>Share private keys via email or messaging</li> <li>Use the same key across multiple devices without encryption</li> <li>Store keys in browser localStorage without encryption</li> </ul> <p>Best Practices</p> <ul> <li>Use hardware wallets when possible</li> <li>Encrypt private keys with strong passwords</li> <li>Use secure key management software</li> <li>Create offline backups in multiple locations</li> <li>Consider using key derivation for multiple identities</li> </ul>"},{"location":"concepts/keys/#key-backup-strategies","title":"Key Backup Strategies","text":"Paper BackupDigital BackupHardware Wallet <pre><code>1. Write down your private key (nsec format)\n2. Store in a fireproof safe\n3. Consider multiple copies in different locations\n4. Use tamper-evident storage\n</code></pre> <pre><code>1. Encrypt with strong password\n2. Store on multiple devices\n3. Use cloud storage with encryption\n4. Regular backup verification\n</code></pre> <pre><code>1. Use dedicated hardware device\n2. Secure with PIN/passphrase\n3. Backup seed phrase securely\n4. Test recovery process\n</code></pre>"},{"location":"concepts/keys/#multiple-identities","title":"Multiple Identities","text":"<p>You can have multiple Nostr identities for different purposes:</p>"},{"location":"concepts/keys/#use-cases","title":"Use Cases","text":"<ul> <li>Personal: Your main social identity</li> <li>Professional: Work-related content</li> <li>Anonymous: Privacy-focused interactions</li> <li>Bot: Automated accounts</li> <li>Testing: Development and experimentation</li> </ul>"},{"location":"concepts/keys/#managing-multiple-keys","title":"Managing Multiple Keys","text":"JavaScript <pre><code>class NostrIdentityManager {\n    constructor() {\n        this.identities = new Map()\n    }\n\n    createIdentity(name) {\n        const privateKey = generatePrivateKey()\n        const publicKey = getPublicKey(privateKey)\n\n        this.identities.set(name, {\n            privateKey,\n            publicKey,\n            npub: nip19.npubEncode(publicKey)\n        })\n\n        return this.identities.get(name)\n    }\n\n    getIdentity(name) {\n        return this.identities.get(name)\n    }\n\n    listIdentities() {\n        return Array.from(this.identities.keys())\n    }\n}\n</code></pre>"},{"location":"concepts/keys/#interactive-exercise","title":"Interactive Exercise","text":"<p>Let's practice working with keys:</p> <p>Try This</p> <ol> <li>Generate a new key pair</li> <li>Convert between hex and bech32 formats</li> <li>Create and sign a simple event</li> <li>Verify the signature</li> </ol> <p>Use the code examples above to experiment with key generation and signing.</p>"},{"location":"concepts/keys/#common-pitfalls","title":"Common Pitfalls","text":"<p>Avoid These Mistakes</p> <p>Key Confusion - Mixing up private and public keys - Using wrong key formats - Sharing private keys accidentally</p> <p>Security Issues - Storing keys insecurely - Not backing up keys - Using weak random number generation</p> <p>Format Errors - Invalid hex characters - Incorrect bech32 encoding - Wrong key length</p>"},{"location":"concepts/keys/#next-steps","title":"Next Steps","text":"<p>Now that you understand keys and identity, let's explore how events and messages work in Nostr.</p>      :material-arrow-right: Events &amp; Messages \u2192"},{"location":"concepts/keys/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What's the difference between a private key and public key?</li> <li>Which key format starts with \"npub1\"?</li> <li>What happens if you lose your private key?</li> <li>Why doesn't Nostr use usernames and passwords?</li> <li>What is the purpose of digital signatures?</li> </ol> Answers <ol> <li>Private key is secret and used for signing; public key is shared and used for verification</li> <li>Public keys in bech32 format start with \"npub1\"</li> <li>You lose access to that identity forever - there's no recovery</li> <li>Cryptographic keys provide better security, ownership, and censorship resistance</li> <li>Digital signatures prove authenticity and prevent tampering </li> </ol>"},{"location":"concepts/nips/","title":"Understanding NIPs (Nostr Implementation Possibilities)","text":"<p>NIPs are the backbone of Nostr's extensibility and standardization. They define how different parts of the protocol work and enable interoperability between clients and relays.</p>"},{"location":"concepts/nips/#what-are-nips","title":"What are NIPs?","text":"<p>NIP stands for Nostr Implementation Possibility. NIPs are technical specifications that describe:</p> <ul> <li>Protocol features and extensions</li> <li>Event formats and structures</li> <li>Client and relay behaviors</li> <li>Cryptographic standards</li> <li>Communication patterns</li> </ul> <p>Think of NIPs as the \"rules of the game\" that all Nostr applications follow to ensure they can work together seamlessly.</p>"},{"location":"concepts/nips/#why-nips-matter","title":"Why NIPs Matter","text":""},{"location":"concepts/nips/#interoperability","title":"\ud83d\udd17 Interoperability","text":"<p>NIPs ensure that a note posted from Damus can be read on Amethyst, Iris, or any other Nostr client.</p>"},{"location":"concepts/nips/#innovation","title":"\ud83d\ude80 Innovation","text":"<p>New features can be proposed, tested, and standardized through the NIP process.</p>"},{"location":"concepts/nips/#standardization","title":"\ud83d\udccb Standardization","text":"<p>Common patterns and best practices are documented for developers.</p>"},{"location":"concepts/nips/#evolution","title":"\ud83d\udd04 Evolution","text":"<p>The protocol can evolve while maintaining backward compatibility.</p>"},{"location":"concepts/nips/#nip-categories","title":"NIP Categories","text":""},{"location":"concepts/nips/#core-nips-essential","title":"Core NIPs (Essential)","text":""},{"location":"concepts/nips/#nip-01-basic-protocol-flow","title":"NIP-01: Basic Protocol Flow","text":"<p>The foundation of Nostr - defines events, signatures, and basic communication.</p> <pre><code>{\n  \"id\": \"event-id\",\n  \"pubkey\": \"author-pubkey\",\n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"signature\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-02-contact-list-and-petnames","title":"NIP-02: Contact List and Petnames","text":"<p>Defines how users follow each other and manage contact lists.</p> <pre><code>{\n  \"kind\": 3,\n  \"tags\": [\n    [\"p\", \"pubkey1\", \"relay-url\", \"alice\"],\n    [\"p\", \"pubkey2\", \"relay-url\", \"bob\"]\n  ],\n  \"content\": \"\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-04-encrypted-direct-messages","title":"NIP-04: Encrypted Direct Messages","text":"<p>Enables private messaging between users.</p> <pre><code>{\n  \"kind\": 4,\n  \"tags\": [[\"p\", \"recipient-pubkey\"]],\n  \"content\": \"encrypted-message-content\"\n}\n</code></pre>"},{"location":"concepts/nips/#event-types-kind-numbers","title":"Event Types (Kind Numbers)","text":""},{"location":"concepts/nips/#text-notes-kind-1","title":"Text Notes (Kind 1)","text":"<pre><code>{\n  \"kind\": 1,\n  \"content\": \"This is a text note\"\n}\n</code></pre>"},{"location":"concepts/nips/#metadata-kind-0","title":"Metadata (Kind 0)","text":"<pre><code>{\n  \"kind\": 0,\n  \"content\": \"{\\\"name\\\":\\\"Alice\\\",\\\"about\\\":\\\"Nostr enthusiast\\\"}\"\n}\n</code></pre>"},{"location":"concepts/nips/#reactions-kind-7","title":"Reactions (Kind 7)","text":"<pre><code>{\n  \"kind\": 7,\n  \"tags\": [[\"e\", \"note-id\"], [\"p\", \"author-pubkey\"]],\n  \"content\": \"\ud83e\udd19\"\n}\n</code></pre>"},{"location":"concepts/nips/#advanced-nips","title":"Advanced NIPs","text":""},{"location":"concepts/nips/#nip-09-event-deletion","title":"NIP-09: Event Deletion","text":"<p>Allows users to request deletion of their events.</p> <pre><code>{\n  \"kind\": 5,\n  \"tags\": [[\"e\", \"event-to-delete-id\"]],\n  \"content\": \"Deleting this note\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-10-text-note-references","title":"NIP-10: Text Note References","text":"<p>Standardizes how to reference other notes and create threads.</p> <pre><code>{\n  \"kind\": 1,\n  \"tags\": [\n    [\"e\", \"root-event-id\", \"\", \"root\"],\n    [\"e\", \"reply-to-id\", \"\", \"reply\"],\n    [\"p\", \"mentioned-pubkey\"]\n  ],\n  \"content\": \"This is a reply\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-23-long-form-content","title":"NIP-23: Long-form Content","text":"<p>Enables publishing articles and long-form content.</p> <pre><code>{\n  \"kind\": 30023,\n  \"tags\": [\n    [\"d\", \"article-identifier\"],\n    [\"title\", \"My Article Title\"],\n    [\"summary\", \"Article summary\"]\n  ],\n  \"content\": \"# Article Content\\n\\nThis is a long article...\"\n}\n</code></pre>"},{"location":"concepts/nips/#lightning-integration-nips","title":"Lightning Integration NIPs","text":""},{"location":"concepts/nips/#nip-57-lightning-zaps","title":"NIP-57: Lightning Zaps","text":"<p>Enables Bitcoin Lightning payments (zaps) on Nostr.</p> <pre><code>{\n  \"kind\": 9735,\n  \"tags\": [\n    [\"bolt11\", \"lightning-invoice\"],\n    [\"description\", \"zap-request\"],\n    [\"p\", \"recipient-pubkey\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/nips/#nip-47-wallet-connect","title":"NIP-47: Wallet Connect","text":"<p>Allows remote wallet control for Lightning payments.</p>"},{"location":"concepts/nips/#relay-nips","title":"Relay NIPs","text":""},{"location":"concepts/nips/#nip-11-relay-information-document","title":"NIP-11: Relay Information Document","text":"<p>Relays provide metadata about their capabilities.</p> <pre><code>{\n  \"name\": \"My Relay\",\n  \"description\": \"A Nostr relay\",\n  \"pubkey\": \"relay-pubkey\",\n  \"contact\": \"admin@relay.com\",\n  \"supported_nips\": [1, 2, 9, 11, 12, 15, 16, 20, 22],\n  \"software\": \"strfry\",\n  \"version\": \"0.9.6\"\n}\n</code></pre>"},{"location":"concepts/nips/#nip-20-command-results","title":"NIP-20: Command Results","text":"<p>Standardizes relay responses to client commands.</p> <pre><code>[\"OK\", \"event-id\", true, \"\"]\n[\"OK\", \"event-id\", false, \"blocked: content policy violation\"]\n</code></pre>"},{"location":"concepts/nips/#client-nips","title":"Client NIPs","text":""},{"location":"concepts/nips/#nip-07-browser-extension-interface","title":"NIP-07: Browser Extension Interface","text":"<p>Defines how web clients interact with browser extensions for key management.</p> <pre><code>// Request signing from extension\nconst event = await window.nostr.signEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: \"Hello from browser!\"\n})\n</code></pre>"},{"location":"concepts/nips/#nip-19-bech32-encoded-entities","title":"NIP-19: Bech32-encoded Entities","text":"<p>Defines human-readable identifiers for Nostr entities.</p> <pre><code>npub1... (public key)\nnsec1... (private key)  \nnote1... (note ID)\nnprofile1... (profile with relay hints)\nnevent1... (event with relay hints)\n</code></pre>"},{"location":"concepts/nips/#specialized-nips","title":"Specialized NIPs","text":""},{"location":"concepts/nips/#nip-26-delegated-event-signing","title":"NIP-26: Delegated Event Signing","text":"<p>Allows delegation of signing authority to other keys.</p>"},{"location":"concepts/nips/#nip-28-public-chat","title":"NIP-28: Public Chat","text":"<p>Defines public chat rooms and channels.</p>"},{"location":"concepts/nips/#nip-40-expiration-timestamp","title":"NIP-40: Expiration Timestamp","text":"<p>Events can specify when they should expire.</p>"},{"location":"concepts/nips/#nip-42-authentication-of-clients-to-relays","title":"NIP-42: Authentication of Clients to Relays","text":"<p>Enables authenticated connections to relays.</p>"},{"location":"concepts/nips/#nip-development-process","title":"NIP Development Process","text":""},{"location":"concepts/nips/#1-proposal","title":"1. Proposal","text":"<ul> <li>Identify a need or improvement</li> <li>Write initial specification</li> <li>Submit as GitHub issue/PR</li> </ul>"},{"location":"concepts/nips/#2-discussion","title":"2. Discussion","text":"<ul> <li>Community review and feedback</li> <li>Technical discussion</li> <li>Refinement of specification</li> </ul>"},{"location":"concepts/nips/#3-implementation","title":"3. Implementation","text":"<ul> <li>Prototype implementations</li> <li>Testing and validation</li> <li>Real-world usage</li> </ul>"},{"location":"concepts/nips/#4-adoption","title":"4. Adoption","text":"<ul> <li>Multiple implementations</li> <li>Client and relay support</li> <li>Community acceptance</li> </ul>"},{"location":"concepts/nips/#5-finalization","title":"5. Finalization","text":"<ul> <li>Specification stabilizes</li> <li>Becomes part of standard</li> </ul>"},{"location":"concepts/nips/#nip-status-levels","title":"NIP Status Levels","text":""},{"location":"concepts/nips/#draft","title":"Draft","text":"<ul> <li>Initial proposal</li> <li>Under active development</li> <li>Subject to major changes</li> </ul>"},{"location":"concepts/nips/#proposed","title":"Proposed","text":"<ul> <li>Stable specification</li> <li>Ready for implementation</li> <li>Minor changes possible</li> </ul>"},{"location":"concepts/nips/#final","title":"Final","text":"<ul> <li>Widely implemented</li> <li>Stable and mature</li> <li>Breaking changes unlikely</li> </ul>"},{"location":"concepts/nips/#deprecated","title":"Deprecated","text":"<ul> <li>No longer recommended</li> <li>Superseded by newer NIPs</li> <li>Legacy support only</li> </ul>"},{"location":"concepts/nips/#reading-nips","title":"Reading NIPs","text":"<p>NIPs are hosted on GitHub: github.com/nostr-protocol/nips</p>"},{"location":"concepts/nips/#structure","title":"Structure","text":"<p>Each NIP typically includes:</p> <ol> <li>Abstract - Brief summary</li> <li>Motivation - Why it's needed</li> <li>Specification - Technical details</li> <li>Examples - Code samples</li> <li>Implementation - Notes for developers</li> </ol>"},{"location":"concepts/nips/#example-nip-structure","title":"Example NIP Structure","text":"<pre><code># NIP-XX: Feature Name\n\n## Abstract\nBrief description of the feature.\n\n## Motivation\nWhy this feature is needed.\n\n## Specification\nTechnical implementation details.\n\n## Examples\nCode examples and use cases.\n\n## Security Considerations\nPotential security implications.\n</code></pre>"},{"location":"concepts/nips/#implementing-nips","title":"Implementing NIPs","text":""},{"location":"concepts/nips/#for-developers","title":"For Developers","text":"<ol> <li>Choose relevant NIPs for your application</li> <li>Read specifications carefully</li> <li>Implement incrementally starting with core NIPs</li> <li>Test interoperability with other clients</li> <li>Contribute feedback to improve specifications</li> </ol>"},{"location":"concepts/nips/#core-nips-to-implement","title":"Core NIPs to Implement","text":"<p>Minimum viable client: - NIP-01 (Basic protocol) - NIP-02 (Contact lists) - NIP-19 (Bech32 encoding)</p> <p>Enhanced client: - NIP-04 (Direct messages) - NIP-09 (Event deletion) - NIP-10 (Text note references) - NIP-25 (Reactions)</p> <p>Advanced client: - NIP-07 (Browser extension) - NIP-23 (Long-form content) - NIP-57 (Lightning zaps)</p>"},{"location":"concepts/nips/#nip-compatibility","title":"NIP Compatibility","text":""},{"location":"concepts/nips/#client-compatibility","title":"Client Compatibility","text":"<p>Check which NIPs a client supports:</p> <pre><code>// Many clients expose supported NIPs\nconst supportedNIPs = client.getSupportedNIPs()\nconsole.log(supportedNIPs) // [1, 2, 4, 9, 10, 25, ...]\n</code></pre>"},{"location":"concepts/nips/#relay-compatibility","title":"Relay Compatibility","text":"<p>Query relay information:</p> <pre><code>curl -H \"Accept: application/nostr+json\" https://relay.example.com\n</code></pre>"},{"location":"concepts/nips/#future-nips","title":"Future NIPs","text":"<p>The Nostr protocol continues to evolve with new NIPs being proposed for:</p> <ul> <li>Enhanced privacy (better encryption, metadata protection)</li> <li>Scalability (efficient data sync, caching strategies)</li> <li>Rich media (video, audio, file sharing)</li> <li>Decentralized identity (verification, reputation systems)</li> <li>Economic features (marketplaces, subscriptions)</li> </ul>"},{"location":"concepts/nips/#contributing-to-nips","title":"Contributing to NIPs","text":""},{"location":"concepts/nips/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Join discussions on GitHub and Telegram</li> <li>Propose improvements to existing NIPs</li> <li>Submit new NIPs for missing functionality</li> <li>Implement and test proposed specifications</li> <li>Provide feedback on draft NIPs</li> </ol>"},{"location":"concepts/nips/#nip-writing-guidelines","title":"NIP Writing Guidelines","text":"<ul> <li>Be specific and unambiguous</li> <li>Include examples and test cases</li> <li>Consider security implications</li> <li>Ensure backward compatibility when possible</li> <li>Follow existing formatting conventions</li> </ul>"},{"location":"concepts/nips/#resources","title":"Resources","text":"<ul> <li>NIPs Repository: github.com/nostr-protocol/nips</li> <li>NIP Discussion: Telegram</li> <li>Implementation Examples: github.com/nostr-protocol/nostr</li> <li>NIP Status Tracker: nips.nostr.com</li> </ul> <p>Stay Updated</p> <p>NIPs are constantly evolving. Follow the GitHub repository and join community discussions to stay informed about new developments and proposals.</p> <p>Implementation Strategy</p> <p>Start with core NIPs (1, 2, 19) and gradually add more advanced features. Focus on interoperability and user experience over feature completeness. </p>"},{"location":"concepts/nostr-fundamentals/","title":"Nostr Fundamentals: What Does Nostr Stand For?","text":"<p>Nostr stands for \"Notes and Other Stuff Transmitted by Relays\" - a simple yet powerful protocol for decentralized social networking and communication.</p>"},{"location":"concepts/nostr-fundamentals/#breaking-down-the-acronym","title":"Breaking Down the Acronym","text":""},{"location":"concepts/nostr-fundamentals/#n-notes","title":"N - Notes","text":"<p>The primary content type in Nostr. Notes are short messages, similar to tweets, that users publish to share thoughts, updates, and information.</p>"},{"location":"concepts/nostr-fundamentals/#o-other-stuff","title":"O - Other Stuff","text":"<p>Nostr isn't limited to just text notes. \"Other stuff\" includes: - Images and media - Long-form articles - Direct messages - Reactions and likes - Lightning payments (zaps) - Live events and streams - Marketplace listings - And much more...</p>"},{"location":"concepts/nostr-fundamentals/#t-transmitted","title":"T - Transmitted","text":"<p>Data flows through the network via a simple, standardized protocol using WebSockets and JSON.</p>"},{"location":"concepts/nostr-fundamentals/#b-by","title":"B - By","text":"<p>The preposition connecting the transmission method to the infrastructure.</p>"},{"location":"concepts/nostr-fundamentals/#r-relays","title":"R - Relays","text":"<p>The servers that store and forward messages. Unlike traditional social media, no single entity controls all relays.</p>"},{"location":"concepts/nostr-fundamentals/#core-philosophy","title":"Core Philosophy","text":""},{"location":"concepts/nostr-fundamentals/#censorship-resistance","title":"\ud83d\udd13 Censorship Resistance","text":"<p>No single point of control means no single point of failure or censorship.</p>"},{"location":"concepts/nostr-fundamentals/#user-ownership","title":"\ud83d\udd11 User Ownership","text":"<p>Your identity and data belong to you, not to a platform.</p>"},{"location":"concepts/nostr-fundamentals/#interoperability","title":"\ud83c\udf10 Interoperability","text":"<p>All clients can communicate with each other through the same protocol.</p>"},{"location":"concepts/nostr-fundamentals/#simplicity","title":"\u26a1 Simplicity","text":"<p>The protocol is intentionally simple, making it easy to implement and understand.</p>"},{"location":"concepts/nostr-fundamentals/#how-nostr-works-the-big-picture","title":"How Nostr Works: The Big Picture","text":"<pre><code>graph TB\n    A[User with Keys] --&gt; B[Nostr Client]\n    B --&gt; C[Sign Events]\n    C --&gt; D[Send to Relays]\n    D --&gt; E[Relay 1]\n    D --&gt; F[Relay 2]\n    D --&gt; G[Relay 3]\n    E --&gt; H[Other Users]\n    F --&gt; H\n    G --&gt; H\n    H --&gt; I[Read Events]\n    I --&gt; J[Display in Client]\n</code></pre>"},{"location":"concepts/nostr-fundamentals/#1-identity-layer","title":"1. Identity Layer","text":"<ul> <li>Users generate cryptographic key pairs</li> <li>Public key = your identity</li> <li>Private key = your signature authority</li> </ul>"},{"location":"concepts/nostr-fundamentals/#2-content-layer","title":"2. Content Layer","text":"<ul> <li>Everything is an \"event\" (note, reaction, profile update, etc.)</li> <li>Events are signed with your private key</li> <li>Events have standardized formats (defined by NIPs)</li> </ul>"},{"location":"concepts/nostr-fundamentals/#3-network-layer","title":"3. Network Layer","text":"<ul> <li>Events are sent to multiple relays</li> <li>Relays store and forward events</li> <li>Clients connect to relays to read/write events</li> </ul>"},{"location":"concepts/nostr-fundamentals/#4-application-layer","title":"4. Application Layer","text":"<ul> <li>Clients provide user interfaces</li> <li>Different clients can have different features</li> <li>All clients can interoperate through the protocol</li> </ul>"},{"location":"concepts/nostr-fundamentals/#key-concepts","title":"Key Concepts","text":""},{"location":"concepts/nostr-fundamentals/#events","title":"Events","text":"<p>Everything in Nostr is an \"event\" - a JSON object with specific fields:</p> <pre><code>{\n  \"id\": \"unique-event-identifier\",\n  \"pubkey\": \"author-public-key\", \n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Hello Nostr!\",\n  \"sig\": \"cryptographic-signature\"\n}\n</code></pre>"},{"location":"concepts/nostr-fundamentals/#event-kinds","title":"Event Kinds","text":"<p>Different types of content have different \"kind\" numbers:</p> <ul> <li>Kind 0: User metadata (profile info)</li> <li>Kind 1: Text notes (like tweets)</li> <li>Kind 3: Contact lists (who you follow)</li> <li>Kind 4: Encrypted direct messages</li> <li>Kind 7: Reactions (likes, etc.)</li> <li>And many more...</li> </ul>"},{"location":"concepts/nostr-fundamentals/#cryptographic-identity","title":"Cryptographic Identity","text":"<p>Your identity is your public key:</p> <pre><code>npub1xyz... (human-readable format)\n</code></pre> <p>Your private key is your password: <pre><code>nsec1abc... (keep this secret!)\n</code></pre></p>"},{"location":"concepts/nostr-fundamentals/#relays","title":"Relays","text":"<p>Servers that: - Store events temporarily or permanently - Forward events to connected clients - Can have their own policies and rules - Are operated by different entities</p>"},{"location":"concepts/nostr-fundamentals/#what-makes-nostr-different","title":"What Makes Nostr Different?","text":""},{"location":"concepts/nostr-fundamentals/#traditional-social-media","title":"Traditional Social Media","text":"<p><pre><code>User \u2192 Platform \u2192 Other Users\n</code></pre> - Platform controls everything - Single point of failure - Platform owns your data - Platform can censor or ban</p>"},{"location":"concepts/nostr-fundamentals/#nostr","title":"Nostr","text":"<p><pre><code>User \u2192 Multiple Relays \u2192 Other Users\n</code></pre> - No central control - Multiple paths for data - You own your identity and data - Censorship requires coordinated effort</p>"},{"location":"concepts/nostr-fundamentals/#nostr-vs-other-protocols","title":"Nostr vs Other Protocols","text":""},{"location":"concepts/nostr-fundamentals/#vs-mastodonactivitypub","title":"vs Mastodon/ActivityPub","text":"<ul> <li>Nostr: Simple, cryptographic identity, relay-based</li> <li>Mastodon: Complex, server-based identity, federation</li> </ul>"},{"location":"concepts/nostr-fundamentals/#vs-bitcoin","title":"vs Bitcoin","text":"<ul> <li>Nostr: Communication protocol, uses similar cryptography</li> <li>Bitcoin: Money protocol, proof-of-work consensus</li> </ul>"},{"location":"concepts/nostr-fundamentals/#vs-email","title":"vs Email","text":"<ul> <li>Nostr: Real-time, public by default, cryptographic identity</li> <li>Email: Store-and-forward, private by default, domain-based identity</li> </ul>"},{"location":"concepts/nostr-fundamentals/#the-nostr-ecosystem","title":"The Nostr Ecosystem","text":""},{"location":"concepts/nostr-fundamentals/#clients-user-interfaces","title":"Clients (User Interfaces)","text":"<ul> <li>Damus (iOS) - Native mobile experience</li> <li>Amethyst (Android) - Feature-rich Android client  </li> <li>Iris (Web) - Browser-based client</li> <li>Nostrudel (Web) - Advanced web client</li> <li>Primal (Multi-platform) - Caching and discovery</li> </ul>"},{"location":"concepts/nostr-fundamentals/#relays-infrastructure","title":"Relays (Infrastructure)","text":"<ul> <li>Public relays - Open to everyone</li> <li>Private relays - Restricted access</li> <li>Paid relays - Premium features</li> <li>Specialized relays - Specific content types</li> </ul>"},{"location":"concepts/nostr-fundamentals/#tools-and-services","title":"Tools and Services","text":"<ul> <li>Lightning integration - Bitcoin payments</li> <li>Media hosting - Image and video storage</li> <li>Search engines - Content discovery</li> <li>Analytics - Network insights</li> </ul>"},{"location":"concepts/nostr-fundamentals/#benefits-of-nostr","title":"Benefits of Nostr","text":""},{"location":"concepts/nostr-fundamentals/#for-users","title":"For Users","text":"<ul> <li>Own your identity - No platform can take it away</li> <li>Choose your experience - Pick clients that suit you</li> <li>Avoid censorship - Multiple relays provide redundancy</li> <li>Portable social graph - Take your followers anywhere</li> </ul>"},{"location":"concepts/nostr-fundamentals/#for-developers","title":"For Developers","text":"<ul> <li>Simple protocol - Easy to implement</li> <li>No API keys - Direct relay access</li> <li>Innovation freedom - Build any features you want</li> <li>Interoperability - Works with all other clients</li> </ul>"},{"location":"concepts/nostr-fundamentals/#for-society","title":"For Society","text":"<ul> <li>Decentralization - Reduces big tech power</li> <li>Free speech - Harder to censor globally</li> <li>Innovation - Permissionless development</li> <li>Resilience - No single point of failure</li> </ul>"},{"location":"concepts/nostr-fundamentals/#common-misconceptions","title":"Common Misconceptions","text":""},{"location":"concepts/nostr-fundamentals/#nostr-is-just-another-twitter-clone","title":"\u274c \"Nostr is just another Twitter clone\"","text":"<p>\u2705 Nostr is a protocol that can support many types of applications, not just social media.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-completely-anonymous","title":"\u274c \"Nostr is completely anonymous\"","text":"<p>\u2705 Nostr provides pseudonymity through public keys, but additional privacy measures may be needed.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-only-for-bitcoin-people","title":"\u274c \"Nostr is only for Bitcoin people\"","text":"<p>\u2705 While Bitcoin integration is popular, Nostr is useful for anyone wanting decentralized communication.</p>"},{"location":"concepts/nostr-fundamentals/#nostr-is-too-technical-for-normal-users","title":"\u274c \"Nostr is too technical for normal users\"","text":"<p>\u2705 While the underlying protocol is technical, user-friendly clients make it accessible to everyone.</p>"},{"location":"concepts/nostr-fundamentals/#getting-started-with-nostr","title":"Getting Started with Nostr","text":""},{"location":"concepts/nostr-fundamentals/#1-choose-a-client","title":"1. Choose a Client","text":"<p>Pick a user-friendly client like Damus (iOS), Amethyst (Android), or Iris (web).</p>"},{"location":"concepts/nostr-fundamentals/#2-generate-keys","title":"2. Generate Keys","text":"<p>Most clients will generate keys for you automatically.</p>"},{"location":"concepts/nostr-fundamentals/#3-set-up-profile","title":"3. Set Up Profile","text":"<p>Add your name, bio, and profile picture.</p>"},{"location":"concepts/nostr-fundamentals/#4-find-people","title":"4. Find People","text":"<p>Follow interesting accounts and join conversations.</p>"},{"location":"concepts/nostr-fundamentals/#5-start-posting","title":"5. Start Posting","text":"<p>Share your thoughts and engage with the community.</p>"},{"location":"concepts/nostr-fundamentals/#the-future-of-nostr","title":"The Future of Nostr","text":""},{"location":"concepts/nostr-fundamentals/#short-term","title":"Short Term","text":"<ul> <li>Better user experience</li> <li>More client features</li> <li>Improved relay infrastructure</li> <li>Enhanced privacy options</li> </ul>"},{"location":"concepts/nostr-fundamentals/#long-term","title":"Long Term","text":"<ul> <li>Integration with other protocols</li> <li>New application types beyond social media</li> <li>Global adoption as communication standard</li> <li>Economic layers and monetization</li> </ul>"},{"location":"concepts/nostr-fundamentals/#technical-deep-dive","title":"Technical Deep Dive","text":""},{"location":"concepts/nostr-fundamentals/#protocol-simplicity","title":"Protocol Simplicity","text":"<p>Nostr's power comes from its simplicity:</p> <pre><code>// The entire protocol in pseudocode\nfunction publishEvent(event, relays) {\n  const signedEvent = sign(event, privateKey)\n  relays.forEach(relay =&gt; relay.send(signedEvent))\n}\n\nfunction subscribeToEvents(filter, relays) {\n  relays.forEach(relay =&gt; {\n    relay.subscribe(filter, (event) =&gt; {\n      if (verify(event.signature, event.pubkey)) {\n        displayEvent(event)\n      }\n    })\n  })\n}\n</code></pre>"},{"location":"concepts/nostr-fundamentals/#cryptographic-foundation","title":"Cryptographic Foundation","text":"<ul> <li>Schnorr signatures (same as Bitcoin)</li> <li>secp256k1 elliptic curve</li> <li>SHA-256 hashing</li> <li>NIP-19 encoding for human-readable keys</li> </ul>"},{"location":"concepts/nostr-fundamentals/#resources-for-learning-more","title":"Resources for Learning More","text":""},{"location":"concepts/nostr-fundamentals/#official-documentation","title":"Official Documentation","text":"<ul> <li>Nostr Protocol</li> <li>NIPs Repository</li> </ul>"},{"location":"concepts/nostr-fundamentals/#community","title":"Community","text":"<ul> <li>Nostr Telegram</li> <li>Reddit r/nostr</li> <li>Nostr on Nostr</li> </ul>"},{"location":"concepts/nostr-fundamentals/#development","title":"Development","text":"<ul> <li>Awesome Nostr</li> <li>Nostr Tools</li> <li>Developer Chat</li> </ul> <p>Nostr's Vision</p> <p>\"The simplest open protocol that is able to create a censorship-resistant global 'social' network once and for all.\" - fiatjaf (Nostr creator)</p> <p>Remember</p> <p>Nostr is not just a social network - it's a communication protocol that can power many different types of applications. The social media use case is just the beginning! </p>"},{"location":"concepts/relays/","title":"Understanding Nostr Relays","text":"<p>Relays are the backbone of the Nostr network - simple servers that store and forward events between clients. Understanding how relays work is crucial for using Nostr effectively.</p>"},{"location":"concepts/relays/#what-is-a-relay","title":"What is a Relay?","text":"<p>A relay is a server that: - Accepts events from clients - Stores events (temporarily or permanently) - Forwards events to other connected clients - Implements filtering and subscription logic - Can enforce its own policies and rules</p> <p>Think of relays as post offices for the Nostr network - they receive, store, and deliver messages between users.</p>"},{"location":"concepts/relays/#how-relays-work","title":"How Relays Work","text":""},{"location":"concepts/relays/#basic-operation-flow","title":"Basic Operation Flow","text":"<pre><code>sequenceDiagram\n    participant C1 as Client 1\n    participant R as Relay\n    participant C2 as Client 2\n\n    C1-&gt;&gt;R: Connect (WebSocket)\n    C2-&gt;&gt;R: Connect (WebSocket)\n    C1-&gt;&gt;R: Publish Event\n    R-&gt;&gt;R: Store Event\n    C2-&gt;&gt;R: Subscribe to Events\n    R-&gt;&gt;C2: Send Matching Events\n    C1-&gt;&gt;R: New Event\n    R-&gt;&gt;C2: Forward New Event\n</code></pre>"},{"location":"concepts/relays/#websocket-communication","title":"WebSocket Communication","text":"<p>Relays communicate with clients using WebSocket connections and JSON messages:</p> <pre><code>// Client connects to relay\nconst relay = new WebSocket('wss://relay.example.com')\n\n// Client publishes an event\nrelay.send(JSON.stringify(['EVENT', signedEvent]))\n\n// Client subscribes to events\nrelay.send(JSON.stringify(['REQ', subscriptionId, filter]))\n\n// Relay sends events to client\n// [\"EVENT\", subscriptionId, event]\n</code></pre>"},{"location":"concepts/relays/#types-of-relays","title":"Types of Relays","text":""},{"location":"concepts/relays/#public-relays","title":"\ud83c\udf10 Public Relays","text":"<ul> <li>Open to everyone</li> <li>No registration required</li> <li>Usually free to use</li> <li>May have rate limits</li> </ul> <p>Examples: - <code>wss://relay.damus.io</code> - <code>wss://nos.lol</code> - <code>wss://relay.nostr.band</code></p>"},{"location":"concepts/relays/#private-relays","title":"\ud83d\udd12 Private Relays","text":"<ul> <li>Restricted access</li> <li>Invitation or whitelist only</li> <li>Better privacy and control</li> <li>Often used by communities</li> </ul>"},{"location":"concepts/relays/#paid-relays","title":"\ud83d\udcb0 Paid Relays","text":"<ul> <li>Require payment for access</li> <li>Better performance and reliability</li> <li>Spam protection through economic incentives</li> <li>Professional support</li> </ul>"},{"location":"concepts/relays/#specialized-relays","title":"\ud83c\udfaf Specialized Relays","text":"<ul> <li>Focus on specific content types</li> <li>Custom filtering and policies</li> <li>Optimized for particular use cases</li> </ul> <p>Examples: - Media-only relays - Long-form content relays - Lightning payment relays - Geographic relays</p>"},{"location":"concepts/relays/#relay-policies","title":"Relay Policies","text":""},{"location":"concepts/relays/#content-policies","title":"Content Policies","text":"<p>Relays can implement various content policies:</p> <pre><code>{\n  \"name\": \"Family Friendly Relay\",\n  \"description\": \"No adult content allowed\",\n  \"content_policy\": {\n    \"prohibited\": [\"adult\", \"violence\", \"spam\"],\n    \"required_tags\": [\"content-warning\"],\n    \"max_content_length\": 280\n  }\n}\n</code></pre>"},{"location":"concepts/relays/#rate-limiting","title":"Rate Limiting","text":"<p>Prevent spam and abuse:</p> <pre><code>{\n  \"rate_limits\": {\n    \"events_per_minute\": 10,\n    \"subscriptions_per_connection\": 20,\n    \"max_filters_per_subscription\": 10\n  }\n}\n</code></pre>"},{"location":"concepts/relays/#storage-policies","title":"Storage Policies","text":"<p>Different retention strategies:</p> <ul> <li>Permanent storage - Keep all events forever</li> <li>Time-based expiration - Delete events after X days</li> <li>Size-based limits - Keep only recent events</li> <li>Kind-based policies - Different rules for different event types</li> </ul>"},{"location":"concepts/relays/#relay-discovery","title":"Relay Discovery","text":""},{"location":"concepts/relays/#nip-11-relay-information","title":"NIP-11 Relay Information","text":"<p>Relays provide metadata about their capabilities:</p> <pre><code>curl -H \"Accept: application/nostr+json\" https://relay.example.com\n</code></pre> <pre><code>{\n  \"name\": \"My Awesome Relay\",\n  \"description\": \"A relay for the Nostr community\",\n  \"pubkey\": \"relay-operator-pubkey\",\n  \"contact\": \"admin@relay.example.com\",\n  \"supported_nips\": [1, 2, 9, 11, 12, 15, 16, 20, 22],\n  \"software\": \"strfry\",\n  \"version\": \"0.9.6\",\n  \"limitation\": {\n    \"max_message_length\": 65536,\n    \"max_subscriptions\": 20,\n    \"max_filters\": 100,\n    \"max_limit\": 5000,\n    \"max_subid_length\": 100,\n    \"min_prefix\": 4,\n    \"max_event_tags\": 100,\n    \"max_content_length\": 8196,\n    \"min_pow_difficulty\": 30,\n    \"auth_required\": false,\n    \"payment_required\": false\n  },\n  \"payments_url\": \"https://relay.example.com/payments\",\n  \"fees\": {\n    \"admission\": [{\"amount\": 5000000, \"unit\": \"msats\"}],\n    \"subscription\": [{\"amount\": 1000000, \"unit\": \"msats\", \"period\": 2592000}],\n    \"publication\": [{\"amount\": 100, \"unit\": \"msats\"}]\n  }\n}\n</code></pre>"},{"location":"concepts/relays/#relay-lists-and-directories","title":"Relay Lists and Directories","text":"<ul> <li>Nostr.watch - Real-time relay monitoring</li> <li>Relay registries - Curated lists of relays</li> <li>Client recommendations - Built-in relay suggestions</li> </ul>"},{"location":"concepts/relays/#choosing-relays","title":"Choosing Relays","text":""},{"location":"concepts/relays/#factors-to-consider","title":"Factors to Consider","text":""},{"location":"concepts/relays/#reliability","title":"Reliability","text":"<ul> <li>Uptime and availability</li> <li>Response time and latency</li> <li>Historical performance</li> </ul>"},{"location":"concepts/relays/#policies","title":"Policies","text":"<ul> <li>Content moderation approach</li> <li>Rate limiting rules</li> <li>Storage duration</li> </ul>"},{"location":"concepts/relays/#geographic-location","title":"Geographic Location","text":"<ul> <li>Closer relays = lower latency</li> <li>Legal jurisdiction considerations</li> <li>Data sovereignty requirements</li> </ul>"},{"location":"concepts/relays/#community","title":"Community","text":"<ul> <li>Who else uses this relay?</li> <li>Moderation quality</li> <li>Community standards</li> </ul>"},{"location":"concepts/relays/#recommended-strategy","title":"Recommended Strategy","text":""},{"location":"concepts/relays/#diversification","title":"Diversification","text":"<p>Use multiple relays for redundancy:</p> <pre><code>const relays = [\n  'wss://relay.damus.io',      // Popular public relay\n  'wss://nos.lol',             // Alternative public relay\n  'wss://relay.nostr.band',    // Search-optimized relay\n  'wss://private.relay.com'    // Your private relay\n]\n</code></pre>"},{"location":"concepts/relays/#read-vs-write-relays","title":"Read vs Write Relays","text":"<ul> <li>Write relays - Where you publish your events</li> <li>Read relays - Where you discover content</li> </ul> <p>Many clients allow different relay sets for reading and writing.</p>"},{"location":"concepts/relays/#relay-performance","title":"Relay Performance","text":""},{"location":"concepts/relays/#key-metrics","title":"Key Metrics","text":""},{"location":"concepts/relays/#latency","title":"Latency","text":"<p>Time for events to propagate: <pre><code># Test relay response time\ntime curl -s wss://relay.example.com &gt; /dev/null\n</code></pre></p>"},{"location":"concepts/relays/#throughput","title":"Throughput","text":"<p>Events processed per second: - Small relays: 10-100 events/sec - Large relays: 1000+ events/sec</p>"},{"location":"concepts/relays/#storage","title":"Storage","text":"<p>How much data the relay stores: - Event count - Total storage size - Retention policies</p>"},{"location":"concepts/relays/#monitoring-tools","title":"Monitoring Tools","text":""},{"location":"concepts/relays/#nostrwatch","title":"Nostr.watch","text":"<p>Real-time relay statistics: - Uptime monitoring - Response time tracking - Geographic distribution - NIP support matrix</p>"},{"location":"concepts/relays/#relaytools","title":"Relay.tools","text":"<p>Comprehensive relay analysis: - Performance benchmarks - Feature comparison - Historical data</p>"},{"location":"concepts/relays/#running-your-own-relay","title":"Running Your Own Relay","text":""},{"location":"concepts/relays/#benefits","title":"Benefits","text":"<ul> <li>Full control over policies and data</li> <li>Privacy for your communications</li> <li>Reliability for your content</li> <li>Community building around your relay</li> </ul>"},{"location":"concepts/relays/#popular-relay-software","title":"Popular Relay Software","text":""},{"location":"concepts/relays/#strfry-c","title":"Strfry (C++)","text":"<ul> <li>High performance</li> <li>Easy configuration</li> <li>Active development</li> <li>Good documentation</li> </ul>"},{"location":"concepts/relays/#nostream-typescript","title":"Nostream (TypeScript)","text":"<ul> <li>Feature-rich</li> <li>Easy to customize</li> <li>Good for developers</li> <li>Active community</li> </ul>"},{"location":"concepts/relays/#relay-pool-go","title":"Relay Pool (Go)","text":"<ul> <li>Lightweight</li> <li>Simple deployment</li> <li>Good for beginners</li> </ul>"},{"location":"concepts/relays/#basic-setup-example","title":"Basic Setup Example","text":"<pre><code># Install strfry\ngit clone https://github.com/hoytech/strfry.git\ncd strfry\nmake setup-golpe\nmake -j4\n\n# Configure\ncp strfry.conf.example strfry.conf\n# Edit configuration...\n\n# Run relay\n./strfry relay\n</code></pre>"},{"location":"concepts/relays/#relay-economics","title":"Relay Economics","text":""},{"location":"concepts/relays/#cost-factors","title":"Cost Factors","text":"<ul> <li>Server hosting - VPS or dedicated server</li> <li>Bandwidth - Data transfer costs</li> <li>Storage - Disk space for events</li> <li>Maintenance - Time and expertise</li> </ul>"},{"location":"concepts/relays/#revenue-models","title":"Revenue Models","text":"<ul> <li>Free/donation-based - Community supported</li> <li>Subscription fees - Monthly/yearly payments</li> <li>Pay-per-use - Micropayments per event</li> <li>Premium features - Enhanced services</li> </ul>"},{"location":"concepts/relays/#lightning-integration","title":"Lightning Integration","text":"<p>Many relays integrate Bitcoin Lightning for payments:</p> <pre><code>{\n  \"fees\": {\n    \"admission\": [{\"amount\": 5000, \"unit\": \"msats\"}],\n    \"publication\": [{\"amount\": 100, \"unit\": \"msats\"}]\n  }\n}\n</code></pre>"},{"location":"concepts/relays/#relay-security","title":"Relay Security","text":""},{"location":"concepts/relays/#authentication","title":"Authentication","text":"<p>Some relays require authentication:</p> <pre><code>// NIP-42 Authentication\nconst authEvent = {\n  kind: 22242,\n  tags: [\n    ['relay', 'wss://relay.example.com'],\n    ['challenge', challengeString]\n  ],\n  content: ''\n}\n</code></pre>"},{"location":"concepts/relays/#spam-protection","title":"Spam Protection","text":"<p>Common anti-spam measures: - Rate limiting - Limit events per time period - Proof of work - Require computational effort - Payment requirements - Economic spam deterrent - Content filtering - Automated moderation</p>"},{"location":"concepts/relays/#privacy-considerations","title":"Privacy Considerations","text":"<ul> <li>IP logging - Some relays log connection data</li> <li>Event correlation - Timing analysis possible</li> <li>Metadata exposure - Connection patterns visible</li> </ul>"},{"location":"concepts/relays/#relay-interoperability","title":"Relay Interoperability","text":""},{"location":"concepts/relays/#nips-for-relays","title":"NIPs for Relays","text":""},{"location":"concepts/relays/#nip-01-basic-protocol","title":"NIP-01 - Basic Protocol","text":"<p>Core event handling and WebSocket communication.</p>"},{"location":"concepts/relays/#nip-11-relay-information-document","title":"NIP-11 - Relay Information Document","text":"<p>Standardized relay metadata format.</p>"},{"location":"concepts/relays/#nip-20-command-results","title":"NIP-20 - Command Results","text":"<p>Standardized responses to client commands.</p>"},{"location":"concepts/relays/#nip-42-authentication","title":"NIP-42 - Authentication","text":"<p>Optional authentication for relay access.</p>"},{"location":"concepts/relays/#cross-relay-compatibility","title":"Cross-Relay Compatibility","text":"<p>All compliant relays should: - Accept standard event formats - Implement basic filtering - Provide NIP-11 information - Handle WebSocket connections properly</p>"},{"location":"concepts/relays/#troubleshooting-relay-issues","title":"Troubleshooting Relay Issues","text":""},{"location":"concepts/relays/#common-problems","title":"Common Problems","text":""},{"location":"concepts/relays/#connection-issues","title":"Connection Issues","text":"<pre><code># Test WebSocket connection\nwebsocat wss://relay.example.com\n</code></pre>"},{"location":"concepts/relays/#slow-performance","title":"Slow Performance","text":"<ul> <li>Check relay location</li> <li>Monitor network latency</li> <li>Verify relay load</li> </ul>"},{"location":"concepts/relays/#missing-events","title":"Missing Events","text":"<ul> <li>Check relay policies</li> <li>Verify event signatures</li> <li>Confirm relay synchronization</li> </ul>"},{"location":"concepts/relays/#debugging-tools","title":"Debugging Tools","text":""},{"location":"concepts/relays/#browser-developer-tools","title":"Browser Developer Tools","text":"<p>Monitor WebSocket connections and messages.</p>"},{"location":"concepts/relays/#command-line-tools","title":"Command Line Tools","text":"<pre><code># Test relay with nak\nnak req -k 1 --limit 10 wss://relay.example.com\n\n# Monitor relay with websocat\necho '[\"REQ\",\"test\",{\"kinds\":[1],\"limit\":1}]' | websocat wss://relay.example.com\n</code></pre>"},{"location":"concepts/relays/#best-practices","title":"Best Practices","text":""},{"location":"concepts/relays/#for-users","title":"For Users","text":"<ol> <li>Use multiple relays for redundancy</li> <li>Choose reliable relays with good uptime</li> <li>Respect relay policies and rate limits</li> <li>Support relay operators if possible</li> </ol>"},{"location":"concepts/relays/#for-relay-operators","title":"For Relay Operators","text":"<ol> <li>Implement proper monitoring and alerting</li> <li>Have clear policies and communicate them</li> <li>Keep software updated for security</li> <li>Engage with the community for feedback</li> </ol>"},{"location":"concepts/relays/#for-developers","title":"For Developers","text":"<ol> <li>Handle relay failures gracefully</li> <li>Implement proper retry logic</li> <li>Respect rate limits and policies</li> <li>Test with multiple relays</li> </ol>"},{"location":"concepts/relays/#future-of-relays","title":"Future of Relays","text":""},{"location":"concepts/relays/#emerging-trends","title":"Emerging Trends","text":"<ul> <li>Specialized relays for specific use cases</li> <li>Economic incentives through Lightning integration</li> <li>Enhanced privacy features</li> <li>Better discovery mechanisms</li> </ul>"},{"location":"concepts/relays/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Improved efficiency and performance</li> <li>Better spam protection</li> <li>Enhanced monitoring and analytics</li> <li>Standardized APIs for management</li> </ul>"},{"location":"concepts/relays/#resources","title":"Resources","text":""},{"location":"concepts/relays/#relay-lists","title":"Relay Lists","text":"<ul> <li>Nostr.watch - Live relay monitoring</li> <li>Relay.tools - Relay comparison</li> <li>Nostr.info - Relay directory</li> </ul>"},{"location":"concepts/relays/#documentation","title":"Documentation","text":"<ul> <li>NIP-11 Specification</li> <li>Relay Implementation Guide</li> </ul>"},{"location":"concepts/relays/#software","title":"Software","text":"<ul> <li>Strfry</li> <li>Nostream</li> <li>Relay Pool</li> </ul> <p>Relay Selection</p> <p>Start with popular, reliable public relays, then gradually add specialized or private relays based on your needs. Always use multiple relays for redundancy.</p> <p>Relay Trust</p> <p>Remember that relay operators can see all events sent to their relay. Choose relays operated by people or organizations you trust, especially for sensitive communications. </p>"},{"location":"concepts/zaps/","title":"Understanding Zaps","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What zaps are and why they're revolutionary</li> <li>How zaps work technically (NIP-57)</li> <li>Different types of zaps and their use cases</li> <li>The economics and incentives zaps create</li> <li>Privacy considerations with zaps</li> </ul>"},{"location":"concepts/zaps/#what-are-zaps","title":"What Are Zaps?","text":"<p>Zaps are instant Bitcoin payments sent over the Lightning Network that are cryptographically tied to Nostr events. They represent a fundamental shift from traditional social media \"likes\" to value-for-value interactions.</p> <p>Value-for-Value</p> <p>Instead of giving away your attention for free to advertisers, zaps let you directly support creators and signal quality content with real economic value.</p>"},{"location":"concepts/zaps/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>\u26a1 Instant: Payments settle in milliseconds</li> <li>\ud83d\udd12 Cryptographically Verified: Tied to specific Nostr events</li> <li>\ud83d\udcb0 Micro-payments: Can be as small as 1 satoshi (0.00000001 BTC)</li> <li>\ud83c\udf0d Global: Work anywhere in the world</li> <li>\ud83d\udd13 Permissionless: No intermediaries or gatekeepers</li> </ul>"},{"location":"concepts/zaps/#how-zaps-work-nip-57","title":"How Zaps Work (NIP-57)","text":"<p>Zaps are defined by NIP-57 (Nostr Implementation Possibility 57) and involve a sophisticated dance between your Nostr client, Lightning wallet, and the recipient's Lightning service.</p>"},{"location":"concepts/zaps/#the-zap-flow","title":"The Zap Flow","text":"<pre><code>sequenceDiagram\n    participant User as You\n    participant Client as Nostr Client\n    participant Wallet as Lightning Wallet\n    participant LNURL as Recipient LNURL\n    participant Relay as Nostr Relay\n\n    User-&gt;&gt;Client: Click Zap on post\n    Client-&gt;&gt;LNURL: Request zap endpoint\n    LNURL--&gt;&gt;Client: Return payment request template\n    Client-&gt;&gt;Wallet: Generate invoice for amount\n    Wallet--&gt;&gt;Client: Lightning invoice\n    Client-&gt;&gt;LNURL: Send invoice + Nostr event\n    LNURL-&gt;&gt;LNURL: Process payment\n    LNURL-&gt;&gt;Relay: Publish zap receipt (kind 9735)\n    Relay--&gt;&gt;Client: Zap receipt appears\n    Client-&gt;&gt;User: Show zap confirmation\n</code></pre>"},{"location":"concepts/zaps/#technical-components","title":"Technical Components","text":"<p>1. Lightning Address - Human-readable identifier (like email) - Example: <code>alice@getalby.com</code> - Resolves to LNURL-pay endpoint</p> <p>2. LNURL-pay - Protocol for requesting Lightning payments - Handles the payment request generation - Returns payment confirmation</p> <p>3. Zap Request (Kind 9734) - Nostr event that describes the intended zap - Contains recipient, amount, and optional message - Signed by the sender's private key</p> <p>4. Zap Receipt (Kind 9735) - Proof that payment was made - Published by recipient's Lightning service - Contains payment preimage as proof</p>"},{"location":"concepts/zaps/#types-of-zaps","title":"Types of Zaps","text":""},{"location":"concepts/zaps/#regular-zaps","title":"Regular Zaps","text":"<p>Standard zaps that appear publicly on posts:</p> <pre><code>{\n  \"kind\": 9735,\n  \"content\": \"Great post! \u26a1\",\n  \"tags\": [\n    [\"bolt11\", \"lnbc...\"],\n    [\"description\", \"...\"],\n    [\"p\", \"recipient_pubkey\"],\n    [\"e\", \"event_id\"]\n  ]\n}\n</code></pre>"},{"location":"concepts/zaps/#anonymous-zaps","title":"Anonymous Zaps","text":"<p>Zaps without revealing the sender's identity: - Payment is made but sender info is hidden - Useful for privacy-conscious users - Still cryptographically verifiable</p>"},{"location":"concepts/zaps/#private-zaps","title":"Private Zaps","text":"<p>Zaps that don't appear publicly: - Only sender and recipient know about them - No public zap receipt published - Maximum privacy</p>"},{"location":"concepts/zaps/#zap-goals","title":"Zap Goals","text":"<p>Crowdfunding mechanism using zaps: - Set a target amount for a project - Community can zap towards the goal - Transparent progress tracking</p>"},{"location":"concepts/zaps/#the-economics-of-zaps","title":"The Economics of Zaps","text":""},{"location":"concepts/zaps/#micro-economics","title":"Micro-Economics","text":"<p>Zaps enable micro-transactions that weren't possible before:</p> <ul> <li>1 sat = ~$0.0003 (varies with Bitcoin price)</li> <li>21 sats = Popular \"Bitcoin number\" </li> <li>100 sats = Meaningful appreciation</li> <li>1,000 sats = Strong support</li> <li>10,000+ sats = Significant contribution</li> </ul>"},{"location":"concepts/zaps/#creator-incentives","title":"Creator Incentives","text":"<p>Quality Content Rises - Good content gets zapped more - Creators earn directly from their audience - No need for advertising or sponsorships</p> <p>Immediate Feedback - Instant economic signal of content value - More meaningful than likes or hearts - Encourages thoughtful posting</p> <p>Global Monetization - Anyone, anywhere can earn Bitcoin - No geographic restrictions - No minimum payout thresholds</p>"},{"location":"concepts/zaps/#network-effects","title":"Network Effects","text":"<p>Value Flows to Value - Bitcoin naturally flows to valuable content - Creates positive feedback loops - Rewards genuine contribution over engagement farming</p> <p>Spam Reduction - Small cost to interact reduces spam - Economic incentive for quality - Self-regulating community standards</p>"},{"location":"concepts/zaps/#zap-etiquette-and-culture","title":"Zap Etiquette and Culture","text":""},{"location":"concepts/zaps/#common-zap-amounts","title":"Common Zap Amounts","text":"Amount Meaning Use Case 1 sat Acknowledgment \"I saw this\" 21 sats Bitcoin appreciation Standard like 100 sats Good content Quality post 500 sats Great content Excellent post 1,000+ sats Exceptional Outstanding work 10,000+ sats Support Major contribution"},{"location":"concepts/zaps/#when-to-zap","title":"When to Zap","text":"<p>\u2705 Good Times to Zap: - Content that taught you something - Posts that made you laugh - Helpful answers to questions - Original research or insights - Supporting creators you appreciate</p> <p>\u274c Avoid Zapping: - Content you disagree with (unless constructive) - Spam or low-effort posts - Just to get attention - Your own posts (generally frowned upon)</p>"},{"location":"concepts/zaps/#zap-messages","title":"Zap Messages","text":"<p>Many zaps include short messages: - Keep them positive and constructive - Emoji are popular (\u26a1\ud83d\ude80\ud83d\udd25\ud83d\udc9c) - Brief explanations of why you zapped - Encouragement for creators</p>"},{"location":"concepts/zaps/#privacy-considerations","title":"Privacy Considerations","text":""},{"location":"concepts/zaps/#whats-public","title":"What's Public","text":"<ul> <li>Zap amount (usually)</li> <li>Recipient (always)</li> <li>Associated post (if applicable)</li> <li>Zap message (if included)</li> </ul>"},{"location":"concepts/zaps/#what-can-be-private","title":"What Can Be Private","text":"<ul> <li>Sender identity (with anonymous zaps)</li> <li>Payment details (Lightning privacy)</li> <li>Exact timing (some obfuscation possible)</li> </ul>"},{"location":"concepts/zaps/#privacy-tips","title":"Privacy Tips","text":"<ul> <li>Use different Lightning addresses for different purposes</li> <li>Consider anonymous zaps for sensitive topics</li> <li>Be aware that payment patterns can be analyzed</li> <li>Lightning payments are more private than on-chain Bitcoin</li> </ul>"},{"location":"concepts/zaps/#setting-up-zaps","title":"Setting Up Zaps","text":""},{"location":"concepts/zaps/#requirements","title":"Requirements","text":"<ol> <li>Lightning Wallet (Alby, Wallet of Satoshi, etc.)</li> <li>Lightning Address (yourname@getalby.com)</li> <li>Nostr Client that supports zaps</li> <li>Some Bitcoin to send zaps</li> </ol>"},{"location":"concepts/zaps/#configuration-steps","title":"Configuration Steps","text":"<ol> <li>Set up Lightning wallet (see Wallet Setup Guide)</li> <li>Add Lightning address to Nostr profile</li> <li>Test with small zaps to yourself or friends</li> <li>Start zapping content you appreciate</li> </ol>"},{"location":"concepts/zaps/#advanced-zap-features","title":"Advanced Zap Features","text":""},{"location":"concepts/zaps/#zap-splits","title":"Zap Splits","text":"<p>Some clients support splitting zaps: - Send to multiple recipients - Useful for collaborations - Automatic revenue sharing</p>"},{"location":"concepts/zaps/#recurring-zaps","title":"Recurring Zaps","text":"<p>Subscription-like zaps: - Regular payments to creators - Automated support - Patreon-like functionality</p>"},{"location":"concepts/zaps/#conditional-zaps","title":"Conditional Zaps","text":"<p>Smart contract-like features: - Zaps that unlock at certain conditions - Goal-based releases - Time-locked payments</p>"},{"location":"concepts/zaps/#troubleshooting-zaps","title":"Troubleshooting Zaps","text":""},{"location":"concepts/zaps/#common-issues","title":"Common Issues","text":"<p>\"Zap failed to send\" - Check wallet balance - Verify Lightning address is correct - Try smaller amount - Check internet connection</p> <p>\"No zap button visible\" - Recipient may not have Lightning address set - Client may not support zaps - Check if zaps are enabled in settings</p> <p>\"Zap not appearing\" - May take a few seconds to process - Check if using compatible relays - Refresh the client</p>"},{"location":"concepts/zaps/#best-practices","title":"Best Practices","text":"<ul> <li>Start with small amounts while learning</li> <li>Keep some Bitcoin in your Lightning wallet</li> <li>Test zaps with friends first</li> <li>Monitor your spending</li> </ul>"},{"location":"concepts/zaps/#the-future-of-zaps","title":"The Future of Zaps","text":""},{"location":"concepts/zaps/#emerging-trends","title":"Emerging Trends","text":"<ul> <li>Zap-to-earn games and applications</li> <li>Algorithmic zapping based on preferences</li> <li>Cross-platform zaps beyond Nostr</li> <li>Integration with traditional payments</li> </ul>"},{"location":"concepts/zaps/#potential-developments","title":"Potential Developments","text":"<ul> <li>Stable coin zaps for price stability</li> <li>Programmable zaps with smart contracts</li> <li>Zap analytics for creators</li> <li>Enterprise zap solutions</li> </ul>"},{"location":"concepts/zaps/#impact-on-social-media","title":"Impact on Social Media","text":"<p>Zaps represent a fundamental shift in how we think about social media:</p>"},{"location":"concepts/zaps/#from-attention-economy-to-value-economy","title":"From Attention Economy to Value Economy","text":"<ul> <li>Traditional: Your attention is the product sold to advertisers</li> <li>Zaps: Your attention has direct economic value you control</li> </ul>"},{"location":"concepts/zaps/#from-engagement-farming-to-quality-content","title":"From Engagement Farming to Quality Content","text":"<ul> <li>Traditional: Optimize for clicks, views, time spent</li> <li>Zaps: Optimize for genuine value and appreciation</li> </ul>"},{"location":"concepts/zaps/#from-platform-lock-in-to-creator-freedom","title":"From Platform Lock-in to Creator Freedom","text":"<ul> <li>Traditional: Platform controls monetization and can ban you</li> <li>Zaps: Direct peer-to-peer payments, no intermediaries</li> </ul>"},{"location":"concepts/zaps/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What makes zaps different from traditional social media \"likes\"?</li> <li>What is NIP-57 and why is it important?</li> <li>What are the three types of zaps in terms of privacy?</li> <li>How do zaps change the incentives for content creators?</li> </ol> Answers <ol> <li>Zaps involve real Bitcoin payments that provide economic value, while likes are free and provide no direct value to creators</li> <li>NIP-57 is the Nostr Implementation Possibility that defines how zaps work technically, ensuring interoperability between clients and wallets</li> <li>Regular zaps (public), anonymous zaps (payment visible but sender hidden), and private zaps (completely private)</li> <li>Zaps create direct economic incentives for quality content, allowing creators to earn immediately from their audience without relying on advertising or platform monetization</li> </ol>      Start Building \u2192"},{"location":"getting-started/nostr-tools/","title":"Essential Nostr Tools","text":"<p>The Nostr ecosystem has a rich collection of tools for developers, relay operators, and users. This guide covers the most important tools you'll need for working with Nostr.</p>"},{"location":"getting-started/nostr-tools/#development-tools","title":"Development Tools","text":""},{"location":"getting-started/nostr-tools/#1-nostr-tools-javascripttypescript","title":"1. Nostr-Tools (JavaScript/TypeScript)","text":"<p>The most popular JavaScript library for Nostr development.</p> <pre><code>npm install nostr-tools\n</code></pre> <p>Key Features: - Event creation and signing - Key generation and management - Relay communication - NIP implementations</p> <pre><code>import { generatePrivateKey, getPublicKey, finishEvent, relayInit } from 'nostr-tools'\n\n// Generate keys\nconst sk = generatePrivateKey()\nconst pk = getPublicKey(sk)\n\n// Create event\nconst event = finishEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: 'Hello Nostr!'\n}, sk)\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-python-nostr","title":"2. Python-Nostr","text":"<p>Python library for Nostr protocol implementation.</p> <pre><code>pip install nostr\n</code></pre> <pre><code>from nostr.key import PrivateKey\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\n\n# Generate keys\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\n\n# Create event\nevent = Event(\n    kind=1,\n    content=\"Hello from Python!\",\n    created_at=int(time.time())\n)\nprivate_key.sign_event(event)\n</code></pre>"},{"location":"getting-started/nostr-tools/#3-nostr-sdk-rust","title":"3. Nostr-SDK (Rust)","text":"<p>High-performance Rust library with bindings for multiple languages.</p> <pre><code>[dependencies]\nnostr-sdk = \"0.24\"\n</code></pre> <pre><code>use nostr_sdk::prelude::*;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    let keys = Keys::generate();\n    let client = Client::new(&amp;keys);\n\n    client.add_relay(\"wss://relay.damus.io\", None).await?;\n    client.connect().await;\n\n    let event = EventBuilder::new_text_note(\"Hello Rust!\", &amp;[])\n        .to_event(&amp;keys)?;\n\n    client.send_event(event).await?;\n    Ok(())\n}\n</code></pre>"},{"location":"getting-started/nostr-tools/#command-line-tools","title":"Command Line Tools","text":""},{"location":"getting-started/nostr-tools/#1-nostril","title":"1. Nostril","text":"<p>Command-line tool for creating and publishing Nostr events.</p> <pre><code># Install\ngo install github.com/fiatjaf/nostril@latest\n\n# Create a text note\nnostril --content \"Hello Nostr!\" --sec &lt;your-private-key&gt;\n\n# Publish to relay\nnostril --content \"Hello!\" --sec &lt;key&gt; | websocat wss://relay.damus.io\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-nak","title":"2. Nak","text":"<p>Swiss Army knife for Nostr operations.</p> <pre><code># Install\ngo install github.com/fiatjaf/nak@latest\n\n# Generate keys\nnak key generate\n\n# Publish note\nnak event --content \"Hello!\" --sec &lt;key&gt; wss://relay.damus.io\n\n# Query events\nnak req -k 1 --limit 10 wss://relay.damus.io\n</code></pre>"},{"location":"getting-started/nostr-tools/#3-nostr-cli","title":"3. Nostr-CLI","text":"<p>Python-based CLI tool for Nostr operations.</p> <pre><code># Install\npip install nostr-cli\n\n# Generate keys\nnostr-cli generate-keys\n\n# Publish note\nnostr-cli publish --content \"Hello!\" --private-key &lt;key&gt; --relay wss://relay.damus.io\n\n# Subscribe to events\nnostr-cli subscribe --kinds 1 --limit 10 --relay wss://relay.damus.io\n</code></pre>"},{"location":"getting-started/nostr-tools/#key-management-tools","title":"Key Management Tools","text":""},{"location":"getting-started/nostr-tools/#1-alby-extension","title":"1. Alby Extension","text":"<p>Browser extension for key management and signing.</p> <ul> <li>Features: Key storage, event signing, Lightning integration</li> <li>Platforms: Chrome, Firefox, Safari</li> <li>Website: getalby.com</li> </ul>"},{"location":"getting-started/nostr-tools/#2-nos2x","title":"2. Nos2x","text":"<p>Lightweight browser extension for Nostr key management.</p> <ul> <li>Features: Simple key storage, event signing</li> <li>Platforms: Chrome, Firefox</li> <li>GitHub: github.com/fiatjaf/nos2x</li> </ul>"},{"location":"getting-started/nostr-tools/#3-nostore","title":"3. Nostore","text":"<p>Advanced key management with multiple account support.</p> <ul> <li>Features: Multiple keys, backup/restore, hardware wallet support</li> <li>Platform: Browser extension</li> <li>GitHub: github.com/ursuscamp/nostore</li> </ul>"},{"location":"getting-started/nostr-tools/#relay-tools","title":"Relay Tools","text":""},{"location":"getting-started/nostr-tools/#1-relay-tester","title":"1. Relay Tester","text":"<p>Tool for testing relay functionality and performance.</p> <pre><code># Install\nnpm install -g nostr-relay-tester\n\n# Test relay\nnostr-relay-tester wss://relay.damus.io\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-relay-monitor","title":"2. Relay Monitor","text":"<p>Monitor relay health and statistics.</p> <pre><code># Install\ngo install github.com/fiatjaf/relay-monitor@latest\n\n# Monitor relay\nrelay-monitor --relay wss://relay.damus.io --interval 30s\n</code></pre>"},{"location":"getting-started/nostr-tools/#3-strfry-tools","title":"3. Strfry Tools","text":"<p>Administrative tools for Strfry relay.</p> <pre><code># Export events\n./strfry export --since=1day &gt; events.jsonl\n\n# Import events\n./strfry import &lt; events.jsonl\n\n# Database statistics\n./strfry stats\n\n# Compact database\n./strfry compact\n</code></pre>"},{"location":"getting-started/nostr-tools/#development-utilities","title":"Development Utilities","text":""},{"location":"getting-started/nostr-tools/#1-nostr-debugger","title":"1. Nostr Debugger","text":"<p>Web-based tool for debugging Nostr events and relays.</p> <ul> <li>URL: nostrdebug.com</li> <li>Features: Event inspection, relay testing, key validation</li> </ul>"},{"location":"getting-started/nostr-tools/#2-nostr-army-knife","title":"2. Nostr Army Knife","text":"<p>Multi-purpose web tool for Nostr operations.</p> <ul> <li>URL: nak.nostr.com</li> <li>Features: Key generation, event creation, relay queries</li> </ul>"},{"location":"getting-started/nostr-tools/#3-nostrband","title":"3. Nostr.band","text":"<p>Analytics and search tool for the Nostr network.</p> <ul> <li>URL: nostr.band</li> <li>Features: Network statistics, event search, trending content</li> </ul>"},{"location":"getting-started/nostr-tools/#testing-tools","title":"Testing Tools","text":""},{"location":"getting-started/nostr-tools/#1-nostr-test-suite","title":"1. Nostr Test Suite","text":"<p>Comprehensive test suite for Nostr implementations.</p> <pre><code># Clone repository\ngit clone https://github.com/nostr-protocol/nostr-test-suite.git\ncd nostr-test-suite\n\n# Run tests\nnpm install\nnpm test\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-relay-benchmark","title":"2. Relay Benchmark","text":"<p>Performance testing tool for relays.</p> <pre><code># Install\ngo install github.com/fiatjaf/relay-benchmark@latest\n\n# Benchmark relay\nrelay-benchmark --relay wss://relay.damus.io --connections 100 --duration 60s\n</code></pre>"},{"location":"getting-started/nostr-tools/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"getting-started/nostr-tools/#1-nostrwatch","title":"1. Nostr.watch","text":"<p>Real-time relay monitoring and statistics.</p> <ul> <li>URL: nostr.watch</li> <li>Features: Relay uptime, performance metrics, geographic distribution</li> </ul>"},{"location":"getting-started/nostr-tools/#2-statsnostrband","title":"2. Stats.nostr.band","text":"<p>Network-wide statistics and analytics.</p> <ul> <li>URL: stats.nostr.band</li> <li>Features: User growth, event volume, relay statistics</li> </ul>"},{"location":"getting-started/nostr-tools/#3-relaytools","title":"3. Relay.tools","text":"<p>Comprehensive relay analysis and monitoring.</p> <ul> <li>URL: relay.tools</li> <li>Features: Relay comparison, performance analysis, NIP support</li> </ul>"},{"location":"getting-started/nostr-tools/#content-creation-tools","title":"Content Creation Tools","text":""},{"location":"getting-started/nostr-tools/#1-habla","title":"1. Habla","text":"<p>Long-form content publishing on Nostr.</p> <ul> <li>URL: habla.news</li> <li>Features: Article publishing, markdown support, commenting</li> </ul>"},{"location":"getting-started/nostr-tools/#2-highlighter","title":"2. Highlighter","text":"<p>Highlight and share content on Nostr.</p> <ul> <li>URL: highlighter.com</li> <li>Features: Content highlighting, social sharing, discovery</li> </ul>"},{"location":"getting-started/nostr-tools/#3-zapstream","title":"3. Zap.stream","text":"<p>Live streaming platform built on Nostr.</p> <ul> <li>URL: zap.stream</li> <li>Features: Live streaming, chat integration, zaps</li> </ul>"},{"location":"getting-started/nostr-tools/#mobile-development","title":"Mobile Development","text":""},{"location":"getting-started/nostr-tools/#1-nostr-react-native","title":"1. Nostr-React-Native","text":"<p>React Native components for Nostr apps.</p> <pre><code>npm install nostr-react-native\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-nostrkit-ios","title":"2. NostrKit (iOS)","text":"<p>Swift library for iOS Nostr development.</p> <pre><code>import NostrKit\n\nlet keys = Keys.generate()\nlet client = NostrClient(keys: keys)\n</code></pre>"},{"location":"getting-started/nostr-tools/#3-nostr-android","title":"3. Nostr-Android","text":"<p>Android library for Nostr integration.</p> <pre><code>implementation 'com.github.nostr:nostr-android:1.0.0'\n</code></pre>"},{"location":"getting-started/nostr-tools/#backup-and-migration-tools","title":"Backup and Migration Tools","text":""},{"location":"getting-started/nostr-tools/#1-nostr-backup","title":"1. Nostr Backup","text":"<p>Tool for backing up your Nostr data.</p> <pre><code># Install\nnpm install -g nostr-backup\n\n# Backup profile and notes\nnostr-backup --pubkey &lt;your-pubkey&gt; --output backup.json\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-profile-migrator","title":"2. Profile Migrator","text":"<p>Migrate profiles between different Nostr clients.</p> <pre><code># Export from client A\nnostr-export --client damus --output profile.json\n\n# Import to client B\nnostr-import --client amethyst --input profile.json\n</code></pre>"},{"location":"getting-started/nostr-tools/#security-tools","title":"Security Tools","text":""},{"location":"getting-started/nostr-tools/#1-key-validator","title":"1. Key Validator","text":"<p>Validate Nostr keys and addresses.</p> <pre><code># Install\nnpm install -g nostr-key-validator\n\n# Validate key\nnostr-validate-key &lt;public-key&gt;\n</code></pre>"},{"location":"getting-started/nostr-tools/#2-event-verifier","title":"2. Event Verifier","text":"<p>Verify event signatures and integrity.</p> <pre><code># Verify event signature\nnostr-verify-event &lt;event-json&gt;\n</code></pre>"},{"location":"getting-started/nostr-tools/#integration-tools","title":"Integration Tools","text":""},{"location":"getting-started/nostr-tools/#1-zapier-integration","title":"1. Zapier Integration","text":"<p>Connect Nostr to other services via Zapier.</p> <ul> <li>Features: Automated workflows, cross-platform integration</li> <li>Use cases: Social media cross-posting, notification systems</li> </ul>"},{"location":"getting-started/nostr-tools/#2-ifttt-connector","title":"2. IFTTT Connector","text":"<p>If This Then That integration for Nostr.</p> <ul> <li>Features: Trigger-based automation</li> <li>Use cases: Smart home integration, productivity workflows</li> </ul>"},{"location":"getting-started/nostr-tools/#getting-started-recommendations","title":"Getting Started Recommendations","text":""},{"location":"getting-started/nostr-tools/#for-developers","title":"For Developers","text":"<ol> <li>Start with nostr-tools (JavaScript) or nostr-sdk (Rust)</li> <li>Use nostril or nak for command-line testing</li> <li>Set up nostr-debugger for development debugging</li> </ol>"},{"location":"getting-started/nostr-tools/#for-relay-operators","title":"For Relay Operators","text":"<ol> <li>Use strfry with its built-in tools</li> <li>Monitor with nostr.watch and relay.tools</li> <li>Test with relay-tester and relay-benchmark</li> </ol>"},{"location":"getting-started/nostr-tools/#for-content-creators","title":"For Content Creators","text":"<ol> <li>Install Alby or nos2x for key management</li> <li>Use habla.news for long-form content</li> <li>Try zap.stream for live streaming</li> </ol>"},{"location":"getting-started/nostr-tools/#for-power-users","title":"For Power Users","text":"<ol> <li>Use nak for advanced operations</li> <li>Set up nostr-backup for data safety</li> <li>Monitor network with nostr.band and stats.nostr.band</li> </ol>"},{"location":"getting-started/nostr-tools/#tool-comparison-matrix","title":"Tool Comparison Matrix","text":"Tool Language Use Case Difficulty Active nostr-tools JS/TS Development Easy \u2705 nostr-sdk Rust Development Medium \u2705 nostril Go CLI Easy \u2705 nak Go CLI Easy \u2705 strfry C++ Relay Hard \u2705 Alby Browser Keys Easy \u2705"},{"location":"getting-started/nostr-tools/#contributing-to-tools","title":"Contributing to Tools","text":"<p>Many Nostr tools are open source and welcome contributions:</p> <ol> <li>Find issues: Look for \"good first issue\" labels</li> <li>Documentation: Help improve tool documentation</li> <li>Testing: Report bugs and test new features</li> <li>Development: Submit pull requests for new features</li> </ol>"},{"location":"getting-started/nostr-tools/#resources","title":"Resources","text":"<ul> <li>Awesome Nostr - Comprehensive tool list</li> <li>Nostr Protocol - Official protocol repository</li> <li>NIPs Repository - Protocol specifications</li> <li>Nostr Dev Chat - Developer community</li> </ul> <p>Tool Selection</p> <p>Choose tools based on your specific needs and technical expertise. Start with simpler tools and gradually move to more advanced ones as you become comfortable with the Nostr ecosystem. </p>"},{"location":"getting-started/relay-setup/","title":"Setting Up a Nostr Relay","text":"<p>A Nostr relay is a server that stores and forwards Nostr events. Running your own relay gives you control over your data and helps strengthen the Nostr network's decentralization.</p>"},{"location":"getting-started/relay-setup/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to choose the right relay software</li> <li>Setting up a basic relay</li> <li>Configuring relay policies</li> <li>Monitoring and maintenance</li> </ul>"},{"location":"getting-started/relay-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic command line knowledge</li> <li>A server or VPS (Virtual Private Server)</li> <li>Domain name (optional but recommended)</li> </ul>"},{"location":"getting-started/relay-setup/#popular-relay-implementations","title":"Popular Relay Implementations","text":""},{"location":"getting-started/relay-setup/#1-strfry-recommended-for-beginners","title":"1. Strfry (Recommended for Beginners)","text":"<p>Strfry is a high-performance relay written in C++ that's easy to set up and configure.</p> <pre><code># Install dependencies (Ubuntu/Debian)\nsudo apt update\nsudo apt install git build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\n\n# Clone and build strfry\ngit clone https://github.com/hoytech/strfry.git\ncd strfry\ngit submodule update --init\nmake setup-golpe\nmake -j4\n</code></pre>"},{"location":"getting-started/relay-setup/#2-nostream-nodejs","title":"2. Nostream (Node.js)","text":"<p>Nostream is a TypeScript/Node.js relay that's feature-rich and actively maintained.</p> <pre><code># Install Node.js and npm\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Clone and setup nostream\ngit clone https://github.com/Cameri/nostream.git\ncd nostream\nnpm install\n</code></pre>"},{"location":"getting-started/relay-setup/#3-relay-pool-go","title":"3. Relay Pool (Go)","text":"<p>Relay Pool is a lightweight Go implementation that's simple to deploy.</p> <pre><code># Install Go\nwget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\n\n# Clone and build\ngit clone https://github.com/fiatjaf/relay-pool.git\ncd relay-pool\ngo build\n</code></pre>"},{"location":"getting-started/relay-setup/#basic-configuration","title":"Basic Configuration","text":""},{"location":"getting-started/relay-setup/#strfry-configuration","title":"Strfry Configuration","text":"<p>Create a configuration file <code>strfry.conf</code>:</p> <pre><code>##\n## Default strfry config\n##\n\n# Directory that contains the strfry LMDB database (restart required)\ndb = \"./strfry-db/\"\n\ndbParams {\n    # Maximum number of threads/processes that can simultaneously have LMDB transactions open (restart required)\n    maxreaders = 256\n\n    # Size of mmap to use when loading LMDB (restart required)\n    mapsize = 1TB\n}\n\nrelay {\n    # Interface to listen on. Use 0.0.0.0 to listen on all interfaces (restart required)\n    bind = \"0.0.0.0\"\n\n    # Port to open for the nostr websocket protocol (restart required)\n    port = 7777\n\n    # Set OS-limit on maximum number of open files/sockets (if 0, don't attempt to set) (restart required)\n    nofiles = 1000000\n\n    # HTTP header that contains the client's real IP, before reverse proxying (ie x-real-ip) (MUST be all lower-case)\n    realIpHeader = \"\"\n\n    info {\n        # NIP-11: Name of this server. Short/descriptive (&lt; 30 characters)\n        name = \"My Nostr Relay\"\n\n        # NIP-11: Detailed plain-text description of relay\n        description = \"A personal Nostr relay\"\n\n        # NIP-11: Administrative nostr pubkey, for contact purposes\n        pubkey = \"your-pubkey-here\"\n\n        # NIP-11: Alternative administrative contact (email, website, etc)\n        contact = \"admin@yourrelay.com\"\n    }\n\n    # Maximum accepted incoming websocket frame size (should be larger than max event and yesstr msg size)\n    maxWebsocketPayloadSize = 131072\n\n    # Websocket-level PING message frequency (should be less than any reverse proxy idle timeouts)\n    autoPingSeconds = 55\n\n    # If TCP keep-alive should be enabled (detect dropped connections to upstream reverse proxy)\n    enableTcpKeepalive = false\n\n    # How much uninterrupted CPU time a REQ query should get during its DB scan\n    queryTimesliceBudgetMicroseconds = 10000\n\n    # Maximum records that can be returned per filter\n    maxFilterLimit = 500\n\n    # Maximum number of subscriptions (concurrent REQs) a connection can have open at any time\n    maxSubsPerConnection = 20\n\n    writePolicy {\n        # If non-empty, path to an executable script that implements the writePolicy plugin logic\n        plugin = \"\"\n    }\n\n    compression {\n        # Use permessage-deflate compression if supported by client. Reduces bandwidth, but uses more CPU (restart required)\n        enabled = true\n\n        # Maintain a sliding window buffer for each connection. Improves compression, but uses more memory (restart required)\n        slidingWindow = true\n    }\n}\n\nevents {\n    # Maximum size of normalised JSON, in bytes\n    maxEventSize = 65536\n\n    # Events newer than this will be rejected\n    rejectEventsNewerThanSeconds = 900\n\n    # Events older than this will be rejected\n    rejectEventsOlderThanSeconds = 94608000\n\n    # Ephemeral events older than this will be rejected\n    rejectEphemeralEventsOlderThanSeconds = 60\n\n    # Ephemeral events newer than this will be rejected\n    rejectEphemeralEventsNewerThanSeconds = 60\n\n    # Maximum number of tags allowed\n    maxNumTags = 2000\n\n    # Maximum size for tag values\n    maxTagValSize = 1024\n}\n</code></pre>"},{"location":"getting-started/relay-setup/#running-your-relay","title":"Running Your Relay","text":"<pre><code># Start strfry\n./strfry relay\n\n# Or run in background\nnohup ./strfry relay &gt; relay.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"getting-started/relay-setup/#setting-up-reverse-proxy-nginx","title":"Setting Up Reverse Proxy (Nginx)","text":"<p>For production deployment, use a reverse proxy like Nginx:</p> <pre><code>server {\n    listen 80;\n    server_name your-relay-domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:7777;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"getting-started/relay-setup/#ssltls-setup","title":"SSL/TLS Setup","text":"<p>Use Let's Encrypt for free SSL certificates:</p> <pre><code># Install certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Get certificate\nsudo certbot --nginx -d your-relay-domain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"getting-started/relay-setup/#relay-policies-and-moderation","title":"Relay Policies and Moderation","text":""},{"location":"getting-started/relay-setup/#content-filtering","title":"Content Filtering","text":"<p>You can implement content filtering using plugins or built-in policies:</p> <pre><code># Example strfry write policy script\n#!/bin/bash\n# This script can accept or reject events based on custom logic\n\n# Read the event from stdin\nevent=$(cat)\n\n# Example: Reject events with certain keywords\nif echo \"$event\" | grep -q \"spam\\|scam\"; then\n    echo '{\"action\": \"reject\", \"msg\": \"Content policy violation\"}'\n    exit 0\nfi\n\n# Accept the event\necho '{\"action\": \"accept\"}'\n</code></pre>"},{"location":"getting-started/relay-setup/#rate-limiting","title":"Rate Limiting","text":"<p>Configure rate limiting to prevent abuse:</p> <pre><code># In strfry.conf\nwritePolicy {\n    plugin = \"./write-policy.sh\"\n\n    # Rate limiting settings\n    rateLimitPerSecond = 10\n    rateLimitBurst = 50\n}\n</code></pre>"},{"location":"getting-started/relay-setup/#monitoring-your-relay","title":"Monitoring Your Relay","text":""},{"location":"getting-started/relay-setup/#basic-monitoring","title":"Basic Monitoring","text":"<pre><code># Check relay status\ncurl -H \"Accept: application/nostr+json\" http://your-relay.com\n\n# Monitor logs\ntail -f relay.log\n\n# Check database size\ndu -sh strfry-db/\n</code></pre>"},{"location":"getting-started/relay-setup/#advanced-monitoring","title":"Advanced Monitoring","text":"<p>Set up monitoring with tools like:</p> <ul> <li>Prometheus + Grafana for metrics</li> <li>Uptime monitoring services</li> <li>Log aggregation tools</li> </ul>"},{"location":"getting-started/relay-setup/#relay-discovery","title":"Relay Discovery","text":""},{"location":"getting-started/relay-setup/#nip-11-relay-information","title":"NIP-11 Relay Information","text":"<p>Ensure your relay provides proper NIP-11 information:</p> <pre><code>{\n  \"name\": \"My Nostr Relay\",\n  \"description\": \"A personal relay for the Nostr network\",\n  \"pubkey\": \"your-pubkey-here\",\n  \"contact\": \"admin@yourrelay.com\",\n  \"supported_nips\": [1, 2, 9, 11, 12, 15, 16, 20, 22],\n  \"software\": \"strfry\",\n  \"version\": \"0.9.6\"\n}\n</code></pre>"},{"location":"getting-started/relay-setup/#adding-to-relay-lists","title":"Adding to Relay Lists","text":"<p>Submit your relay to:</p> <ul> <li>Nostr.watch</li> <li>Relay registries</li> <li>Community relay lists</li> </ul>"},{"location":"getting-started/relay-setup/#maintenance-and-updates","title":"Maintenance and Updates","text":""},{"location":"getting-started/relay-setup/#regular-tasks","title":"Regular Tasks","text":"<pre><code># Backup database\ncp -r strfry-db/ backup-$(date +%Y%m%d)/\n\n# Update software\ngit pull\nmake -j4\n\n# Restart relay\npkill strfry\nnohup ./strfry relay &gt; relay.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"getting-started/relay-setup/#database-maintenance","title":"Database Maintenance","text":"<pre><code># Compact database (strfry)\n./strfry compact\n\n# Check database integrity\n./strfry verify\n</code></pre>"},{"location":"getting-started/relay-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/relay-setup/#common-issues","title":"Common Issues","text":"<ol> <li>Connection refused: Check firewall and port configuration</li> <li>SSL errors: Verify certificate installation</li> <li>High memory usage: Adjust database parameters</li> <li>Slow queries: Optimize database settings</li> </ol>"},{"location":"getting-started/relay-setup/#debug-mode","title":"Debug Mode","text":"<pre><code># Run with debug logging\n./strfry relay --verbose\n\n# Check specific event\n./strfry export --since=1hour | grep \"event-id\"\n</code></pre>"},{"location":"getting-started/relay-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Join relay operator communities</li> <li>Implement custom policies</li> <li>Set up monitoring and alerting</li> <li>Consider clustering for high availability</li> </ul>"},{"location":"getting-started/relay-setup/#resources","title":"Resources","text":"<ul> <li>Strfry Documentation</li> <li>Nostream Guide</li> <li>Relay Operator Chat</li> <li>NIP-11 Specification</li> </ul> <p>Pro Tip</p> <p>Start with a simple setup and gradually add features. Monitor your relay's performance and adjust configurations based on usage patterns. </p>"},{"location":"getting-started/wallet-setup/","title":"Setting Up a Lightning Wallet","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>Why you need a Lightning wallet for Nostr</li> <li>Different types of Lightning wallets available</li> <li>How to choose the right wallet for your needs</li> <li>How to connect your wallet to Nostr clients</li> </ul>"},{"location":"getting-started/wallet-setup/#why-do-you-need-a-lightning-wallet","title":"Why Do You Need a Lightning Wallet?","text":"<p>A Lightning wallet enables you to send and receive zaps - instant Bitcoin payments that are a core part of the Nostr social experience. Zaps allow you to:</p> <ul> <li>\u26a1 Tip creators for great content</li> <li>\ud83c\udfaf Show appreciation with micro-payments</li> <li>\ud83d\udcb0 Monetize your content by receiving zaps</li> <li>\ud83d\ude80 Boost signal on important posts</li> <li>\ud83e\udd1d Support the ecosystem with value-for-value interactions</li> </ul> <p>Zaps vs Traditional Social Media</p> <p>Instead of \"likes\" that cost nothing, zaps let you put real value behind your appreciation. Even small amounts (1-100 sats) create meaningful economic signals.</p>"},{"location":"getting-started/wallet-setup/#wallet-options","title":"Wallet Options","text":""},{"location":"getting-started/wallet-setup/#for-beginners-custodial-wallets","title":"For Beginners: Custodial Wallets","text":"<p>Alby (Recommended for Web Users) - Browser extension for seamless web integration - Easy setup and user-friendly interface - Built specifically for Nostr and Lightning - Get started with Alby \u2192</p> <p>Wallet of Satoshi (Mobile) - Extremely simple mobile wallet - Great for beginners on iOS/Android - No technical setup required</p>"},{"location":"getting-started/wallet-setup/#for-privacy-conscious-users-non-custodial-wallets","title":"For Privacy-Conscious Users: Non-Custodial Wallets","text":"<p>Phoenix (Mobile) - You control your own keys - Automatic channel management - Good balance of simplicity and control</p> <p>Breez (Mobile) - Built-in Lightning node - More advanced features - Self-sovereign Bitcoin storage</p>"},{"location":"getting-started/wallet-setup/#for-advanced-users","title":"For Advanced Users","text":"<p>Zeus (Mobile) - Connect to your own Lightning node - Full control and privacy - Requires technical knowledge</p> <p>Self-Hosted Solutions - Run your own Lightning node (Umbrel, Start9) - Complete sovereignty - Technical setup required</p>"},{"location":"getting-started/wallet-setup/#wallet-comparison","title":"Wallet Comparison","text":"Wallet Type Difficulty Best For Platform Alby Custodial Easy Web Nostr clients Browser Extension Wallet of Satoshi Custodial Very Easy Mobile beginners iOS/Android Phoenix Non-custodial Medium Privacy-conscious mobile Android Breez Non-custodial Medium Balanced mobile experience iOS/Android Zeus Non-custodial Hard Advanced users with nodes iOS/Android"},{"location":"getting-started/wallet-setup/#understanding-custodial-vs-non-custodial","title":"Understanding Custodial vs Non-Custodial","text":""},{"location":"getting-started/wallet-setup/#custodial-wallets-easier","title":"Custodial Wallets (Easier)","text":"<p>Pros: - \u2705 Very easy to use - \u2705 No technical setup - \u2705 Reliable connectivity - \u2705 Customer support</p> <p>Cons: - \u274c Company holds your Bitcoin - \u274c Can freeze your account - \u274c Privacy implications</p>"},{"location":"getting-started/wallet-setup/#non-custodial-wallets-more-control","title":"Non-Custodial Wallets (More Control)","text":"<p>Pros: - \u2705 You control your Bitcoin - \u2705 Better privacy - \u2705 No counterparty risk - \u2705 True ownership</p> <p>Cons: - \u274c More complex setup - \u274c You're responsible for backups - \u274c Higher technical barrier</p>"},{"location":"getting-started/wallet-setup/#getting-started","title":"Getting Started","text":""},{"location":"getting-started/wallet-setup/#step-1-choose-your-wallet","title":"Step 1: Choose Your Wallet","text":"<ul> <li>New to Bitcoin? Start with Alby (web) or Wallet of Satoshi (mobile)</li> <li>Want more control? Try Phoenix or Breez</li> <li>Advanced user? Consider Zeus or self-hosted solutions</li> </ul>"},{"location":"getting-started/wallet-setup/#step-2-set-up-your-wallet","title":"Step 2: Set Up Your Wallet","text":"<p>For detailed setup instructions, visit the wallet's official resources:</p> <ul> <li>Alby: Complete setup guide at getalby.com</li> <li>Wallet of Satoshi: Available on app stores with built-in tutorials</li> <li>Phoenix: Setup guide at phoenix.acinq.co</li> <li>Breez: Documentation at breez.technology</li> </ul>"},{"location":"getting-started/wallet-setup/#step-3-fund-your-wallet","title":"Step 3: Fund Your Wallet","text":"<p>Start with a small amount ($5-20 worth of Bitcoin) to learn: - Buy Bitcoin directly in some wallets - Send from another wallet or exchange - Use your Lightning address to receive payments</p>"},{"location":"getting-started/wallet-setup/#step-4-connect-to-nostr","title":"Step 4: Connect to Nostr","text":"<ol> <li>Add your Lightning address to your Nostr profile</li> <li>Test with small zaps to yourself or friends</li> <li>Start zapping content you appreciate</li> </ol>"},{"location":"getting-started/wallet-setup/#lightning-addresses","title":"Lightning Addresses","text":"<p>A Lightning address looks like an email address (e.g., <code>yourname@getalby.com</code>) and makes it easy for others to zap you. Most modern wallets provide Lightning addresses automatically.</p>"},{"location":"getting-started/wallet-setup/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/wallet-setup/#security","title":"Security","text":"<ul> <li>\u2705 Start with small amounts while learning</li> <li>\u2705 Keep recovery phrases offline and secure</li> <li>\u2705 Use strong, unique passwords</li> <li>\u2705 Enable 2FA when available</li> </ul>"},{"location":"getting-started/wallet-setup/#usage","title":"Usage","text":"<ul> <li>\u2705 Begin with small zaps (1-100 sats)</li> <li>\u2705 Zap content you genuinely appreciate</li> <li>\u2705 Set spending limits in your wallet</li> <li>\u2705 Monitor your balance regularly</li> </ul>"},{"location":"getting-started/wallet-setup/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"getting-started/wallet-setup/#wallet-not-connecting-to-nostr-client","title":"\"Wallet not connecting to Nostr client\"","text":"<ul> <li>Refresh the page and try again</li> <li>Check if wallet extension is enabled</li> <li>Try a different browser or incognito mode</li> <li>Ensure you're using a compatible client</li> </ul>"},{"location":"getting-started/wallet-setup/#cant-receive-zaps","title":"\"Can't receive zaps\"","text":"<ul> <li>Verify your Lightning address is correct in your profile</li> <li>Test by sending yourself a small zap</li> <li>Check if your wallet is online and synced</li> </ul>"},{"location":"getting-started/wallet-setup/#zap-failed-to-send","title":"\"Zap failed to send\"","text":"<ul> <li>Check your wallet balance</li> <li>Ensure recipient has a valid Lightning address</li> <li>Try a smaller amount first</li> <li>Check your internet connection</li> </ul>"},{"location":"getting-started/wallet-setup/#next-steps","title":"Next Steps","text":"<p>Now that you understand Lightning wallets:</p> <ol> <li>Choose a wallet that fits your needs and experience level</li> <li>Set it up using the official resources</li> <li>Fund it with a small amount to start</li> <li>Add your Lightning address to your Nostr profile  </li> <li>Practice sending and receiving zaps</li> <li>Explore different Nostr clients and their zap features</li> </ol>      Setting Up a Relay \u2192"},{"location":"getting-started/wallet-setup/#quick-quiz","title":"Quick Quiz","text":"<p>Test Your Understanding</p> <ol> <li>What's the main difference between custodial and non-custodial wallets?</li> <li>Which wallet is recommended for beginners using web-based Nostr clients?</li> <li>What is a Lightning address and why is it useful?</li> <li>How much Bitcoin should a beginner start with?</li> </ol> Answers <ol> <li>Custodial wallets hold your Bitcoin for you (easier but less control), while non-custodial wallets give you full control of your Bitcoin (harder but more secure)</li> <li>Alby browser extension is recommended for web users due to its seamless integration with Nostr clients</li> <li>A Lightning address is like an email address for Bitcoin payments, making it easy for others to zap you directly from your Nostr posts</li> <li>$5-20 worth (20,000-80,000 sats) is plenty for beginners to learn with hundreds of small zaps </li> </ol>"},{"location":"getting-started/what-is-nostr/","title":"What is Nostr?","text":"<p>Learning Objectives</p> <p>By the end of this lesson, you'll understand:</p> <ul> <li>What Nostr stands for and its core principles</li> <li>How Nostr differs from traditional social media platforms</li> <li>The fundamental components of the Nostr protocol</li> <li>The benefits of decentralized social networking</li> </ul>"},{"location":"getting-started/what-is-nostr/#introduction","title":"Introduction","text":"<p>Nostr stands for \"Notes and Other Stuff Transmitted by Relays.\" It is a simple, open protocol that enables global, decentralized, and censorship-resistant social networking.</p> <p>Unlike traditional social media platforms, Nostr operates without a central authority, giving users complete control over their identity and data through cryptographic key pairs.</p>"},{"location":"getting-started/what-is-nostr/#core-principles","title":"Core Principles","text":""},{"location":"getting-started/what-is-nostr/#decentralized-architecture","title":"Decentralized Architecture","text":"<p>Nostr operates on a network of independent relays rather than centralized servers, eliminating single points of failure and control.</p>"},{"location":"getting-started/what-is-nostr/#user-sovereignty","title":"User Sovereignty","text":"<p>Users maintain full ownership of their identity through cryptographic keys, ensuring no platform can ban or silence them permanently.</p>"},{"location":"getting-started/what-is-nostr/#protocol-simplicity","title":"Protocol Simplicity","text":"<p>The protocol prioritizes simplicity over complexity, making it reliable, performant, and easy to implement.</p>"},{"location":"getting-started/what-is-nostr/#censorship-resistance","title":"Censorship Resistance","text":"<p>The distributed nature of relays ensures that content cannot be globally censored by any single entity.</p>"},{"location":"getting-started/what-is-nostr/#how-nostr-works","title":"How Nostr Works","text":"<pre><code>graph TB\n    A[User] --&gt;|publishes events| R1[Relay 1]\n    A --&gt;|publishes events| R2[Relay 2]\n    A --&gt;|publishes events| R3[Relay 3]\n\n    R1 --&gt;|distributes to| B[Follower]\n    R2 --&gt;|distributes to| B\n    R3 --&gt;|distributes to| C[Other Users]\n\n    B --&gt;|publishes response| R1\n    B --&gt;|publishes response| R2\n\n    R1 --&gt;|delivers to| A\n    R2 --&gt;|delivers to| A\n</code></pre> <p>The basic flow involves:</p> <ol> <li>Event Creation: Users create signed events using their private keys</li> <li>Relay Distribution: Events are sent to multiple relays for storage</li> <li>Content Discovery: Other users query relays to retrieve relevant events</li> <li>Interaction: Users can respond, creating new events in the network</li> </ol>"},{"location":"getting-started/what-is-nostr/#protocol-components","title":"Protocol Components","text":""},{"location":"getting-started/what-is-nostr/#events","title":"Events","text":"<p>All content in Nostr is represented as events - JSON objects containing:</p> <pre><code>{\n  \"id\": \"event_identifier\",\n  \"pubkey\": \"author_public_key\", \n  \"created_at\": 1234567890,\n  \"kind\": 1,\n  \"tags\": [],\n  \"content\": \"Message content\",\n  \"sig\": \"cryptographic_signature\"\n}\n</code></pre>"},{"location":"getting-started/what-is-nostr/#relays","title":"Relays","text":"<p>Independent servers that store and forward events. Key characteristics:</p> <ul> <li>Autonomous Operation: Each relay operates independently</li> <li>Configurable Policies: Relays can implement custom rules and filters</li> <li>Redundancy: Users connect to multiple relays for reliability</li> </ul>"},{"location":"getting-started/what-is-nostr/#clients","title":"Clients","text":"<p>Applications that provide user interfaces for interacting with Nostr:</p> <ul> <li>Key Management: Handle cryptographic operations securely</li> <li>Relay Communication: Connect to multiple relays simultaneously</li> <li>Content Rendering: Display events in user-friendly formats</li> </ul>"},{"location":"getting-started/what-is-nostr/#comparison-with-traditional-platforms","title":"Comparison with Traditional Platforms","text":"Aspect Traditional Social Media Nostr Identity Control Platform-owned accounts User-controlled cryptographic keys Censorship Platform policies apply globally Per-relay policies, user choice Data Ownership Platform retains all data Users own their content Platform Lock-in High switching costs Portable identity across clients Algorithm Control Platform-determined feeds User-configurable content discovery"},{"location":"getting-started/what-is-nostr/#technical-example","title":"Technical Example","text":"<p>Here's a basic event creation and publishing flow:</p> Event StructurePublishing Flow <pre><code>{\n  \"id\": \"a1b2c3d4e5f6...\",\n  \"pubkey\": \"user_public_key\",\n  \"created_at\": 1672531200,\n  \"kind\": 1,\n  \"tags\": [\n    [\"t\", \"nostr\"],\n    [\"t\", \"decentralized\"]\n  ],\n  \"content\": \"Understanding the Nostr protocol\",\n  \"sig\": \"digital_signature\"\n}\n</code></pre> <pre><code>// 1. Create event\nconst event = {\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [[\"t\", \"nostr\"]],\n  content: \"Learning about decentralized protocols\"\n}\n\n// 2. Sign event\nconst signedEvent = finishEvent(event, privateKey)\n\n// 3. Publish to relays\nrelays.forEach(relay =&gt; {\n  relay.publish(signedEvent)\n})\n</code></pre>"},{"location":"getting-started/what-is-nostr/#benefits-and-advantages","title":"Benefits and Advantages","text":"<p>Key Benefits</p> <p>User Empowerment</p> <ul> <li>\u2705 Complete control over digital identity</li> <li>\u2705 Immunity from arbitrary account suspension</li> <li>\u2705 Data portability across applications</li> <li>\u2705 Algorithmic choice and transparency</li> </ul> <p>Technical Advantages</p> <ul> <li>\u2705 Simple, well-defined protocol specification</li> <li>\u2705 High reliability through decentralization</li> <li>\u2705 Extensible design for future capabilities</li> <li>\u2705 Minimal infrastructure requirements</li> </ul>"},{"location":"getting-started/what-is-nostr/#common-misconceptions","title":"Common Misconceptions","text":"<p>Clarifications</p> <p>\"Nostr requires blockchain technology\" False. Nostr is a simple protocol that does not use blockchain or cryptocurrency.</p> <p>\"Decentralized means unmoderated\" Incorrect. Individual relays can implement moderation policies, and users can choose their preferred content filters.</p> <p>\"Technical complexity prevents mainstream adoption\" The protocol complexity is abstracted away by user-friendly client applications.</p>"},{"location":"getting-started/what-is-nostr/#next-steps","title":"Next Steps","text":"<p>Understanding Nostr's architecture provides the foundation for learning about cryptographic identity management.</p>      :material-arrow-right: Keys &amp; Identity \u2192"},{"location":"getting-started/what-is-nostr/#knowledge-check","title":"Knowledge Check","text":"<p>Review Questions</p> <ol> <li>What does the acronym \"Nostr\" represent?</li> <li>How does Nostr achieve censorship resistance?</li> <li>What are the three main components of the Nostr ecosystem?</li> <li>Why doesn't Nostr require blockchain technology?</li> </ol> Answer Key <ol> <li>\"Notes and Other Stuff Transmitted by Relays\"</li> <li>Through decentralized relay architecture with no single point of control</li> <li>Events (content), Relays (infrastructure), and Clients (applications)</li> <li>It uses simple cryptographic signatures for verification without requiring distributed consensus </li> </ol>"},{"location":"tutorials/simple-client/","title":"Building a Simple Nostr Client","text":"<p>What You'll Build</p> <p>In this tutorial, you'll create a basic Nostr client that can:</p> <ul> <li>Generate and manage cryptographic keys</li> <li>Connect to Nostr relays</li> <li>Publish text notes</li> <li>Subscribe to and display events</li> <li>Handle user interactions</li> </ul> <p>Prerequisites</p> <ul> <li>Basic JavaScript knowledge</li> <li>Understanding of Nostr fundamentals</li> <li>Node.js installed on your system</li> </ul>"},{"location":"tutorials/simple-client/#project-setup","title":"Project Setup","text":"<p>Let's start by creating a new project and installing the necessary dependencies.</p>"},{"location":"tutorials/simple-client/#1-initialize-the-project","title":"1. Initialize the Project","text":"<pre><code>mkdir my-nostr-client\ncd my-nostr-client\nnpm init -y\n</code></pre>"},{"location":"tutorials/simple-client/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install nostr-tools\nnpm install --save-dev vite\n</code></pre>"},{"location":"tutorials/simple-client/#3-create-project-structure","title":"3. Create Project Structure","text":"<pre><code>my-nostr-client/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 main.js\n\u251c\u2500\u2500 style.css\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"tutorials/simple-client/#building-the-html-interface","title":"Building the HTML Interface","text":"<p>Create a simple but functional interface:</p> index.htmlstyle.css <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Nostr Client&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;header&gt;\n            &lt;h1&gt;\ud83d\ude80 My Nostr Client&lt;/h1&gt;\n            &lt;div class=\"connection-status\" id=\"status\"&gt;Disconnected&lt;/div&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;!-- Key Management Section --&gt;\n            &lt;section class=\"key-section\"&gt;\n                &lt;h2&gt;\ud83d\udd11 Your Identity&lt;/h2&gt;\n                &lt;div class=\"key-display\"&gt;\n                    &lt;label&gt;Public Key (npub):&lt;/label&gt;\n                    &lt;input type=\"text\" id=\"pubkey\" readonly&gt;\n                    &lt;button id=\"generate-keys\"&gt;Generate New Keys&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/section&gt;\n\n            &lt;!-- Compose Section --&gt;\n            &lt;section class=\"compose-section\"&gt;\n                &lt;h2&gt;\u270d\ufe0f Compose Note&lt;/h2&gt;\n                &lt;textarea id=\"note-content\" placeholder=\"What's on your mind?\"&gt;&lt;/textarea&gt;\n                &lt;button id=\"publish-note\"&gt;Publish Note&lt;/button&gt;\n            &lt;/section&gt;\n\n            &lt;!-- Feed Section --&gt;\n            &lt;section class=\"feed-section\"&gt;\n                &lt;h2&gt;\ud83d\udcf0 Global Feed&lt;/h2&gt;\n                &lt;div id=\"feed\"&gt;&lt;/div&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader {\n    background: white;\n    padding: 20px;\n    border-radius: 12px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nh1 {\n    color: #667eea;\n    font-size: 2rem;\n}\n\n.connection-status {\n    padding: 8px 16px;\n    border-radius: 20px;\n    font-weight: 600;\n    font-size: 0.9rem;\n}\n\n.connection-status.connected {\n    background: #10b981;\n    color: white;\n}\n\n.connection-status.disconnected {\n    background: #ef4444;\n    color: white;\n}\n\nsection {\n    background: white;\n    padding: 20px;\n    border-radius: 12px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n    margin-bottom: 20px;\n}\n\nh2 {\n    margin-bottom: 15px;\n    color: #374151;\n}\n\n.key-display {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\ninput, textarea {\n    padding: 12px;\n    border: 2px solid #e5e7eb;\n    border-radius: 8px;\n    font-size: 14px;\n    transition: border-color 0.3s;\n}\n\ninput:focus, textarea:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\n#pubkey {\n    flex: 1;\n    min-width: 300px;\n    font-family: monospace;\n    font-size: 12px;\n}\n\n#note-content {\n    width: 100%;\n    min-height: 100px;\n    resize: vertical;\n    margin-bottom: 10px;\n}\n\nbutton {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 8px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n\nbutton:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n}\n\nbutton:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.note {\n    background: #f9fafb;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    padding: 15px;\n    margin-bottom: 10px;\n}\n\n.note-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n    font-size: 0.9rem;\n    color: #6b7280;\n}\n\n.note-author {\n    font-family: monospace;\n    font-weight: 600;\n}\n\n.note-content {\n    line-height: 1.6;\n    white-space: pre-wrap;\n}\n\n.loading {\n    text-align: center;\n    color: #6b7280;\n    font-style: italic;\n}\n</code></pre>"},{"location":"tutorials/simple-client/#implementing-the-javascript-logic","title":"Implementing the JavaScript Logic","text":"<p>Now let's build the core functionality:</p> main.js <pre><code>import { \n    generatePrivateKey, \n    getPublicKey, \n    finishEvent, \n    relayInit,\n    nip19\n} from 'nostr-tools'\n\nclass NostrClient {\n    constructor() {\n        this.privateKey = null\n        this.publicKey = null\n        this.relays = []\n        this.connectedRelays = new Set()\n\n        this.initializeElements()\n        this.setupEventListeners()\n        this.loadOrGenerateKeys()\n        this.connectToRelays()\n    }\n\n    initializeElements() {\n        this.elements = {\n            status: document.getElementById('status'),\n            pubkey: document.getElementById('pubkey'),\n            generateKeys: document.getElementById('generate-keys'),\n            noteContent: document.getElementById('note-content'),\n            publishNote: document.getElementById('publish-note'),\n            feed: document.getElementById('feed')\n        }\n    }\n\n    setupEventListeners() {\n        this.elements.generateKeys.addEventListener('click', () =&gt; {\n            this.generateNewKeys()\n        })\n\n        this.elements.publishNote.addEventListener('click', () =&gt; {\n            this.publishNote()\n        })\n\n        // Enable publishing with Ctrl+Enter\n        this.elements.noteContent.addEventListener('keydown', (e) =&gt; {\n            if (e.ctrlKey &amp;&amp; e.key === 'Enter') {\n                this.publishNote()\n            }\n        })\n    }\n\n    loadOrGenerateKeys() {\n        // Try to load existing keys from localStorage\n        const savedPrivateKey = localStorage.getItem('nostr-private-key')\n\n        if (savedPrivateKey) {\n            this.privateKey = savedPrivateKey\n            this.publicKey = getPublicKey(savedPrivateKey)\n        } else {\n            this.generateNewKeys()\n        }\n\n        this.updateKeyDisplay()\n    }\n\n    generateNewKeys() {\n        this.privateKey = generatePrivateKey()\n        this.publicKey = getPublicKey(this.privateKey)\n\n        // Save to localStorage\n        localStorage.setItem('nostr-private-key', this.privateKey)\n\n        this.updateKeyDisplay()\n        this.showNotification('New keys generated! \ud83c\udf89')\n    }\n\n    updateKeyDisplay() {\n        if (this.publicKey) {\n            const npub = nip19.npubEncode(this.publicKey)\n            this.elements.pubkey.value = npub\n        }\n    }\n\n    async connectToRelays() {\n        const relayUrls = [\n            'wss://relay.damus.io',\n            'wss://nos.lol',\n            'wss://relay.snort.social'\n        ]\n\n        this.updateStatus('Connecting...')\n\n        for (const url of relayUrls) {\n            try {\n                const relay = relayInit(url)\n\n                relay.on('connect', () =&gt; {\n                    console.log(`Connected to ${url}`)\n                    this.connectedRelays.add(url)\n                    this.updateConnectionStatus()\n                    this.subscribeToFeed(relay)\n                })\n\n                relay.on('error', () =&gt; {\n                    console.log(`Failed to connect to ${url}`)\n                    this.connectedRelays.delete(url)\n                    this.updateConnectionStatus()\n                })\n\n                await relay.connect()\n                this.relays.push(relay)\n\n            } catch (error) {\n                console.error(`Error connecting to ${url}:`, error)\n            }\n        }\n    }\n\n    updateConnectionStatus() {\n        const connectedCount = this.connectedRelays.size\n        if (connectedCount &gt; 0) {\n            this.updateStatus(`Connected to ${connectedCount} relays`, 'connected')\n        } else {\n            this.updateStatus('Disconnected', 'disconnected')\n        }\n    }\n\n    updateStatus(message, className = '') {\n        this.elements.status.textContent = message\n        this.elements.status.className = `connection-status ${className}`\n    }\n\n    subscribeToFeed(relay) {\n        const sub = relay.sub([\n            {\n                kinds: [1], // Text notes\n                limit: 20\n            }\n        ])\n\n        sub.on('event', (event) =&gt; {\n            this.addEventToFeed(event)\n        })\n    }\n\n    addEventToFeed(event) {\n        const noteElement = this.createNoteElement(event)\n\n        // Add to top of feed\n        if (this.elements.feed.firstChild) {\n            this.elements.feed.insertBefore(noteElement, this.elements.feed.firstChild)\n        } else {\n            this.elements.feed.appendChild(noteElement)\n        }\n\n        // Limit feed to 50 notes\n        while (this.elements.feed.children.length &gt; 50) {\n            this.elements.feed.removeChild(this.elements.feed.lastChild)\n        }\n    }\n\n    createNoteElement(event) {\n        const noteDiv = document.createElement('div')\n        noteDiv.className = 'note'\n\n        const date = new Date(event.created_at * 1000)\n        const timeString = date.toLocaleString()\n\n        // Truncate public key for display\n        const shortPubkey = event.pubkey.slice(0, 8) + '...' + event.pubkey.slice(-8)\n\n        noteDiv.innerHTML = `\n            &lt;div class=\"note-header\"&gt;\n                &lt;span class=\"note-author\"&gt;${shortPubkey}&lt;/span&gt;\n                &lt;span class=\"note-time\"&gt;${timeString}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"note-content\"&gt;${this.escapeHtml(event.content)}&lt;/div&gt;\n        `\n\n        return noteDiv\n    }\n\n    escapeHtml(text) {\n        const div = document.createElement('div')\n        div.textContent = text\n        return div.innerHTML\n    }\n\n    async publishNote() {\n        const content = this.elements.noteContent.value.trim()\n\n        if (!content) {\n            this.showNotification('Please enter some content!', 'error')\n            return\n        }\n\n        if (this.connectedRelays.size === 0) {\n            this.showNotification('Not connected to any relays!', 'error')\n            return\n        }\n\n        try {\n            this.elements.publishNote.disabled = true\n            this.elements.publishNote.textContent = 'Publishing...'\n\n            const event = finishEvent({\n                kind: 1,\n                created_at: Math.floor(Date.now() / 1000),\n                tags: [],\n                content: content,\n            }, this.privateKey)\n\n            // Publish to all connected relays\n            const publishPromises = this.relays.map(relay =&gt; {\n                if (relay.status === 1) { // Connected\n                    return relay.publish(event)\n                }\n            })\n\n            await Promise.allSettled(publishPromises)\n\n            this.elements.noteContent.value = ''\n            this.showNotification('Note published! \ud83c\udf89')\n\n        } catch (error) {\n            console.error('Error publishing note:', error)\n            this.showNotification('Failed to publish note', 'error')\n        } finally {\n            this.elements.publishNote.disabled = false\n            this.elements.publishNote.textContent = 'Publish Note'\n        }\n    }\n\n    showNotification(message, type = 'success') {\n        // Create notification element\n        const notification = document.createElement('div')\n        notification.className = `notification ${type}`\n        notification.textContent = message\n\n        // Style the notification\n        Object.assign(notification.style, {\n            position: 'fixed',\n            top: '20px',\n            right: '20px',\n            padding: '12px 20px',\n            borderRadius: '8px',\n            color: 'white',\n            fontWeight: '600',\n            zIndex: '1000',\n            transform: 'translateX(100%)',\n            transition: 'transform 0.3s ease'\n        })\n\n        if (type === 'error') {\n            notification.style.background = '#ef4444'\n        } else {\n            notification.style.background = '#10b981'\n        }\n\n        document.body.appendChild(notification)\n\n        // Animate in\n        setTimeout(() =&gt; {\n            notification.style.transform = 'translateX(0)'\n        }, 100)\n\n        // Remove after 3 seconds\n        setTimeout(() =&gt; {\n            notification.style.transform = 'translateX(100%)'\n            setTimeout(() =&gt; {\n                document.body.removeChild(notification)\n            }, 300)\n        }, 3000)\n    }\n}\n\n// Initialize the client when the page loads\ndocument.addEventListener('DOMContentLoaded', () =&gt; {\n    new NostrClient()\n})\n</code></pre>"},{"location":"tutorials/simple-client/#adding-development-scripts","title":"Adding Development Scripts","text":"<p>Update your <code>package.json</code> to include development scripts:</p> <pre><code>{\n  \"name\": \"my-nostr-client\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"nostr-tools\": \"^1.17.0\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.4.0\"\n  }\n}\n</code></pre>"},{"location":"tutorials/simple-client/#running-your-client","title":"Running Your Client","text":"<p>Start the development server:</p> <pre><code>npm run dev\n</code></pre> <p>Open your browser to <code>http://localhost:5173</code> and you should see your Nostr client!</p>"},{"location":"tutorials/simple-client/#testing-your-client","title":"Testing Your Client","text":"<p>Try These Features</p> <ol> <li>Generate Keys: Click \"Generate New Keys\" to create a new identity</li> <li>Publish a Note: Write something in the text area and click \"Publish Note\"</li> <li>View Feed: Watch as notes from other users appear in the global feed</li> <li>Keyboard Shortcut: Use Ctrl+Enter to quickly publish notes</li> </ol>"},{"location":"tutorials/simple-client/#understanding-the-code","title":"Understanding the Code","text":""},{"location":"tutorials/simple-client/#key-management","title":"Key Management","text":"<pre><code>// Generate a new private key\nconst privateKey = generatePrivateKey()\n\n// Derive the public key\nconst publicKey = getPublicKey(privateKey)\n\n// Encode as npub for display\nconst npub = nip19.npubEncode(publicKey)\n</code></pre>"},{"location":"tutorials/simple-client/#event-creation","title":"Event Creation","text":"<pre><code>const event = finishEvent({\n    kind: 1,              // Text note\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [],             // No tags for simple notes\n    content: \"Hello Nostr!\",\n}, privateKey)\n</code></pre>"},{"location":"tutorials/simple-client/#relay-communication","title":"Relay Communication","text":"<pre><code>// Connect to relay\nconst relay = relayInit('wss://relay.damus.io')\nawait relay.connect()\n\n// Subscribe to events\nconst sub = relay.sub([{ kinds: [1], limit: 20 }])\nsub.on('event', handleEvent)\n\n// Publish event\nawait relay.publish(event)\n</code></pre>"},{"location":"tutorials/simple-client/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've built a working Nostr client. Here are some ideas for enhancements:</p> <p>Enhancement Ideas</p> <ul> <li>User Profiles: Display user metadata and avatars</li> <li>Replies: Implement threaded conversations</li> <li>Reactions: Add like/dislike functionality</li> <li>Media: Support image and video uploads</li> <li>Search: Add content and user search</li> <li>Relay Management: Let users add/remove relays</li> </ul>"},{"location":"tutorials/simple-client/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <p>Connection Problems - Check if relays are online - Try different relay URLs - Check browser console for errors</p> <p>Publishing Fails - Ensure you have valid keys - Check relay connection status - Verify content isn't empty</p>      \u2190 Previous: Creating a Bot         Next: Advanced Features \u2192"}]}